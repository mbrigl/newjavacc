/* Generated By:JavaCC: Do not edit this line. ExpressionTokenManager.cc Version 8.0.0 */
#include "ExpressionTokenManager.h"
#include "TokenMgrError.h"

static const long long stringLiterals[] = {
1LL, 0, 9LL, 1LL, -1LL, 
1LL, 0, 10LL, 2LL, -1LL, 
1LL, 0, 11LL, 3LL, -1LL, 
1LL, 0, 12LL, 4LL, -1LL, 
1LL, 0, 13LL, 5LL, -1LL, 
1LL, 0, 32LL, 6LL, -1LL, 
1LL, 0, 36LL, 14LL, -1LL, 
1LL, 0, 37LL, 50LL, -1LL, 
1LL, 0, 40LL, 7LL, -1LL, 
1LL, 0, 41LL, 8LL, -1LL, 
1LL, 0, 42LL, 48LL, -1LL, 
1LL, 0, 43LL, 46LL, -1LL, 
1LL, 0, 44LL, 12LL, -1LL, 
1LL, 0, 45LL, 47LL, -1LL, 
1LL, 0, 46LL, 11LL, -1LL, 
1LL, 0, 47LL, 49LL, -1LL, 
1LL, 0, 58LL, 13LL, -1LL, 
1LL, 0, 59LL, 15LL, -1LL, 
3LL, 1, 97LL, 110LL, 100LL, 65LL, 78LL, 68LL, 54LL, -1LL, 
3LL, 1, 97LL, 115LL, 99LL, 65LL, 83LL, 67LL, 51LL, -1LL, 
7LL, 1, 98LL, 101LL, 116LL, 119LL, 101LL, 101LL, 110LL, 66LL, 69LL, 84LL, 87LL, 69LL, 69LL, 78LL, 67LL, -1LL, 
6LL, 1, 98LL, 101LL, 121LL, 111LL, 110LL, 100LL, 66LL, 69LL, 89LL, 79LL, 78LL, 68LL, 71LL, -1LL, 
4LL, 1, 98LL, 98LL, 111LL, 120LL, 66LL, 66LL, 79LL, 88LL, 68LL, -1LL, 
8LL, 1, 99LL, 111LL, 110LL, 116LL, 97LL, 105LL, 110LL, 115LL, 67LL, 79LL, 78LL, 84LL, 65LL, 73LL, 78LL, 83LL, 76LL, -1LL, 
7LL, 1, 99LL, 114LL, 111LL, 115LL, 115LL, 101LL, 115LL, 67LL, 82LL, 79LL, 83LL, 83LL, 69LL, 83LL, 75LL, -1LL, 
8LL, 1, 100LL, 105LL, 115LL, 106LL, 111LL, 105LL, 110LL, 116LL, 68LL, 73LL, 83LL, 74LL, 79LL, 73LL, 78LL, 84LL, 78LL, -1LL, 
7LL, 1, 100LL, 119LL, 105LL, 116LL, 104LL, 105LL, 110LL, 68LL, 87LL, 73LL, 84LL, 72LL, 73LL, 78LL, 73LL, -1LL, 
4LL, 1, 100LL, 101LL, 115LL, 99LL, 68LL, 69LL, 83LL, 67LL, 52LL, -1LL, 
8LL, 1, 101LL, 110LL, 118LL, 101LL, 108LL, 111LL, 112LL, 101LL, 69LL, 78LL, 86LL, 69LL, 76LL, 79LL, 80LL, 69LL, 44LL, -1LL, 
6LL, 1, 101LL, 113LL, 117LL, 97LL, 108LL, 115LL, 69LL, 81LL, 85LL, 65LL, 76LL, 83LL, 70LL, -1LL, 
6LL, 1, 101LL, 120LL, 105LL, 115LL, 116LL, 115LL, 69LL, 88LL, 73LL, 83LL, 84LL, 83LL, 66LL, -1LL, 
4LL, 1, 102LL, 101LL, 101LL, 116LL, 70LL, 69LL, 69LL, 84LL, 80LL, -1LL, 
18LL, 1, 103LL, 101LL, 111LL, 109LL, 101LL, 116LL, 114LL, 121LL, 99LL, 111LL, 108LL, 108LL, 101LL, 99LL, 116LL, 105LL, 111LL, 110LL, 71LL, 69LL, 79LL, 77LL, 69LL, 84LL, 82LL, 89LL, 67LL, 79LL, 76LL, 76LL, 69LL, 67LL, 84LL, 73LL, 79LL, 78LL, 43LL, -1LL, 
10LL, 1, 105LL, 110LL, 116LL, 101LL, 114LL, 115LL, 101LL, 99LL, 116LL, 115LL, 73LL, 78LL, 84LL, 69LL, 82LL, 83LL, 69LL, 67LL, 84LL, 83LL, 79LL, -1LL, 
5LL, 1, 105LL, 108LL, 105LL, 107LL, 101LL, 73LL, 76LL, 73LL, 75LL, 69LL, 65LL, -1LL, 
2LL, 1, 105LL, 110LL, 73LL, 78LL, 63LL, -1LL, 
2LL, 1, 105LL, 115LL, 73LL, 83LL, 62LL, -1LL, 
10LL, 1, 107LL, 105LL, 108LL, 111LL, 109LL, 101LL, 116LL, 101LL, 114LL, 115LL, 75LL, 73LL, 76LL, 79LL, 77LL, 69LL, 84LL, 69LL, 82LL, 83LL, 82LL, -1LL, 
10LL, 1, 108LL, 105LL, 110LL, 101LL, 115LL, 116LL, 114LL, 105LL, 110LL, 103LL, 76LL, 73LL, 78LL, 69LL, 83LL, 84LL, 82LL, 73LL, 78LL, 71LL, 39LL, -1LL, 
4LL, 1, 108LL, 105LL, 107LL, 101LL, 76LL, 73LL, 75LL, 69LL, 64LL, -1LL, 
15LL, 1, 109LL, 117LL, 108LL, 116LL, 105LL, 108LL, 105LL, 110LL, 101LL, 115LL, 116LL, 114LL, 105LL, 110LL, 103LL, 77LL, 85LL, 76LL, 84LL, 73LL, 76LL, 73LL, 78LL, 69LL, 83LL, 84LL, 82LL, 73LL, 78LL, 71LL, 42LL, -1LL, 
12LL, 1, 109LL, 117LL, 108LL, 116LL, 105LL, 112LL, 111LL, 108LL, 121LL, 103LL, 111LL, 110LL, 77LL, 85LL, 76LL, 84LL, 73LL, 80LL, 79LL, 76LL, 89LL, 71LL, 79LL, 78LL, 41LL, -1LL, 
10LL, 1, 109LL, 117LL, 108LL, 116LL, 105LL, 112LL, 111LL, 105LL, 110LL, 116LL, 77LL, 85LL, 76LL, 84LL, 73LL, 80LL, 79LL, 73LL, 78LL, 84LL, 40LL, -1LL, 
6LL, 1, 109LL, 101LL, 116LL, 101LL, 114LL, 115LL, 77LL, 69LL, 84LL, 69LL, 82LL, 83LL, 81LL, -1LL, 
14LL, 1, 110LL, 97LL, 117LL, 116LL, 105LL, 99LL, 97LL, 108LL, 32LL, 109LL, 105LL, 108LL, 101LL, 115LL, 78LL, 65LL, 85LL, 84LL, 73LL, 67LL, 65LL, 76LL, 32LL, 77LL, 73LL, 76LL, 69LL, 83LL, 84LL, -1LL, 
4LL, 1, 110LL, 117LL, 108LL, 108LL, 78LL, 85LL, 76LL, 76LL, 19LL, -1LL, 
3LL, 1, 110LL, 111LL, 116LL, 78LL, 79LL, 84LL, 55LL, -1LL, 
8LL, 1, 111LL, 118LL, 101LL, 114LL, 108LL, 97LL, 112LL, 115LL, 79LL, 86LL, 69LL, 82LL, 76LL, 65LL, 80LL, 83LL, 77LL, -1LL, 
2LL, 1, 111LL, 114LL, 79LL, 82LL, 53LL, -1LL, 
7LL, 1, 112LL, 111LL, 108LL, 121LL, 103LL, 111LL, 110LL, 80LL, 79LL, 76LL, 89LL, 71LL, 79LL, 78LL, 38LL, -1LL, 
5LL, 1, 112LL, 111LL, 105LL, 110LL, 116LL, 80LL, 79LL, 73LL, 78LL, 84LL, 37LL, -1LL, 
6LL, 1, 114LL, 101LL, 108LL, 97LL, 116LL, 101LL, 82LL, 69LL, 76LL, 65LL, 84LL, 69LL, 69LL, -1LL, 
13LL, 1, 115LL, 116LL, 97LL, 116LL, 117LL, 116LL, 101LL, 32LL, 109LL, 105LL, 108LL, 101LL, 115LL, 83LL, 84LL, 65LL, 84LL, 85LL, 84LL, 69LL, 32LL, 77LL, 73LL, 76LL, 69LL, 83LL, 83LL, -1LL, 
5LL, 1, 115LL, 114LL, 105LL, 100LL, 61LL, 83LL, 82LL, 73LL, 68LL, 61LL, 36LL, -1LL, 
7LL, 1, 116LL, 111LL, 117LL, 99LL, 104LL, 101LL, 115LL, 84LL, 79LL, 85LL, 67LL, 72LL, 69LL, 83LL, 74LL, -1LL, 
6LL, 1, 119LL, 105LL, 116LL, 104LL, 105LL, 110LL, 87LL, 73LL, 84LL, 72LL, 73LL, 78LL, 72LL, -1LL, 
1LL, 0, 91LL, 9LL, -1LL, 
1LL, 0, 93LL, 10LL, -1LL, 
3LL, 1, 97LL, 110LL, 100LL, 65LL, 78LL, 68LL, 54LL, -1LL, 
3LL, 1, 97LL, 115LL, 99LL, 65LL, 83LL, 67LL, 51LL, -1LL, 
7LL, 1, 98LL, 101LL, 116LL, 119LL, 101LL, 101LL, 110LL, 66LL, 69LL, 84LL, 87LL, 69LL, 69LL, 78LL, 67LL, -1LL, 
6LL, 1, 98LL, 101LL, 121LL, 111LL, 110LL, 100LL, 66LL, 69LL, 89LL, 79LL, 78LL, 68LL, 71LL, -1LL, 
4LL, 1, 98LL, 98LL, 111LL, 120LL, 66LL, 66LL, 79LL, 88LL, 68LL, -1LL, 
8LL, 1, 99LL, 111LL, 110LL, 116LL, 97LL, 105LL, 110LL, 115LL, 67LL, 79LL, 78LL, 84LL, 65LL, 73LL, 78LL, 83LL, 76LL, -1LL, 
7LL, 1, 99LL, 114LL, 111LL, 115LL, 115LL, 101LL, 115LL, 67LL, 82LL, 79LL, 83LL, 83LL, 69LL, 83LL, 75LL, -1LL, 
8LL, 1, 100LL, 105LL, 115LL, 106LL, 111LL, 105LL, 110LL, 116LL, 68LL, 73LL, 83LL, 74LL, 79LL, 73LL, 78LL, 84LL, 78LL, -1LL, 
7LL, 1, 100LL, 119LL, 105LL, 116LL, 104LL, 105LL, 110LL, 68LL, 87LL, 73LL, 84LL, 72LL, 73LL, 78LL, 73LL, -1LL, 
4LL, 1, 100LL, 101LL, 115LL, 99LL, 68LL, 69LL, 83LL, 67LL, 52LL, -1LL, 
8LL, 1, 101LL, 110LL, 118LL, 101LL, 108LL, 111LL, 112LL, 101LL, 69LL, 78LL, 86LL, 69LL, 76LL, 79LL, 80LL, 69LL, 44LL, -1LL, 
6LL, 1, 101LL, 113LL, 117LL, 97LL, 108LL, 115LL, 69LL, 81LL, 85LL, 65LL, 76LL, 83LL, 70LL, -1LL, 
6LL, 1, 101LL, 120LL, 105LL, 115LL, 116LL, 115LL, 69LL, 88LL, 73LL, 83LL, 84LL, 83LL, 66LL, -1LL, 
4LL, 1, 102LL, 101LL, 101LL, 116LL, 70LL, 69LL, 69LL, 84LL, 80LL, -1LL, 
18LL, 1, 103LL, 101LL, 111LL, 109LL, 101LL, 116LL, 114LL, 121LL, 99LL, 111LL, 108LL, 108LL, 101LL, 99LL, 116LL, 105LL, 111LL, 110LL, 71LL, 69LL, 79LL, 77LL, 69LL, 84LL, 82LL, 89LL, 67LL, 79LL, 76LL, 76LL, 69LL, 67LL, 84LL, 73LL, 79LL, 78LL, 43LL, -1LL, 
10LL, 1, 105LL, 110LL, 116LL, 101LL, 114LL, 115LL, 101LL, 99LL, 116LL, 115LL, 73LL, 78LL, 84LL, 69LL, 82LL, 83LL, 69LL, 67LL, 84LL, 83LL, 79LL, -1LL, 
5LL, 1, 105LL, 108LL, 105LL, 107LL, 101LL, 73LL, 76LL, 73LL, 75LL, 69LL, 65LL, -1LL, 
2LL, 1, 105LL, 110LL, 73LL, 78LL, 63LL, -1LL, 
2LL, 1, 105LL, 115LL, 73LL, 83LL, 62LL, -1LL, 
10LL, 1, 107LL, 105LL, 108LL, 111LL, 109LL, 101LL, 116LL, 101LL, 114LL, 115LL, 75LL, 73LL, 76LL, 79LL, 77LL, 69LL, 84LL, 69LL, 82LL, 83LL, 82LL, -1LL, 
10LL, 1, 108LL, 105LL, 110LL, 101LL, 115LL, 116LL, 114LL, 105LL, 110LL, 103LL, 76LL, 73LL, 78LL, 69LL, 83LL, 84LL, 82LL, 73LL, 78LL, 71LL, 39LL, -1LL, 
4LL, 1, 108LL, 105LL, 107LL, 101LL, 76LL, 73LL, 75LL, 69LL, 64LL, -1LL, 
15LL, 1, 109LL, 117LL, 108LL, 116LL, 105LL, 108LL, 105LL, 110LL, 101LL, 115LL, 116LL, 114LL, 105LL, 110LL, 103LL, 77LL, 85LL, 76LL, 84LL, 73LL, 76LL, 73LL, 78LL, 69LL, 83LL, 84LL, 82LL, 73LL, 78LL, 71LL, 42LL, -1LL, 
12LL, 1, 109LL, 117LL, 108LL, 116LL, 105LL, 112LL, 111LL, 108LL, 121LL, 103LL, 111LL, 110LL, 77LL, 85LL, 76LL, 84LL, 73LL, 80LL, 79LL, 76LL, 89LL, 71LL, 79LL, 78LL, 41LL, -1LL, 
10LL, 1, 109LL, 117LL, 108LL, 116LL, 105LL, 112LL, 111LL, 105LL, 110LL, 116LL, 77LL, 85LL, 76LL, 84LL, 73LL, 80LL, 79LL, 73LL, 78LL, 84LL, 40LL, -1LL, 
6LL, 1, 109LL, 101LL, 116LL, 101LL, 114LL, 115LL, 77LL, 69LL, 84LL, 69LL, 82LL, 83LL, 81LL, -1LL, 
14LL, 1, 110LL, 97LL, 117LL, 116LL, 105LL, 99LL, 97LL, 108LL, 32LL, 109LL, 105LL, 108LL, 101LL, 115LL, 78LL, 65LL, 85LL, 84LL, 73LL, 67LL, 65LL, 76LL, 32LL, 77LL, 73LL, 76LL, 69LL, 83LL, 84LL, -1LL, 
4LL, 1, 110LL, 117LL, 108LL, 108LL, 78LL, 85LL, 76LL, 76LL, 19LL, -1LL, 
3LL, 1, 110LL, 111LL, 116LL, 78LL, 79LL, 84LL, 55LL, -1LL, 
8LL, 1, 111LL, 118LL, 101LL, 114LL, 108LL, 97LL, 112LL, 115LL, 79LL, 86LL, 69LL, 82LL, 76LL, 65LL, 80LL, 83LL, 77LL, -1LL, 
2LL, 1, 111LL, 114LL, 79LL, 82LL, 53LL, -1LL, 
7LL, 1, 112LL, 111LL, 108LL, 121LL, 103LL, 111LL, 110LL, 80LL, 79LL, 76LL, 89LL, 71LL, 79LL, 78LL, 38LL, -1LL, 
5LL, 1, 112LL, 111LL, 105LL, 110LL, 116LL, 80LL, 79LL, 73LL, 78LL, 84LL, 37LL, -1LL, 
6LL, 1, 114LL, 101LL, 108LL, 97LL, 116LL, 101LL, 82LL, 69LL, 76LL, 65LL, 84LL, 69LL, 69LL, -1LL, 
13LL, 1, 115LL, 116LL, 97LL, 116LL, 117LL, 116LL, 101LL, 32LL, 109LL, 105LL, 108LL, 101LL, 115LL, 83LL, 84LL, 65LL, 84LL, 85LL, 84LL, 69LL, 32LL, 77LL, 73LL, 76LL, 69LL, 83LL, 83LL, -1LL, 
5LL, 1, 115LL, 114LL, 105LL, 100LL, 61LL, 83LL, 82LL, 73LL, 68LL, 61LL, 36LL, -1LL, 
7LL, 1, 116LL, 111LL, 117LL, 99LL, 104LL, 101LL, 115LL, 84LL, 79LL, 85LL, 67LL, 72LL, 69LL, 83LL, 74LL, -1LL, 
6LL, 1, 119LL, 105LL, 116LL, 104LL, 105LL, 110LL, 87LL, 73LL, 84LL, 72LL, 73LL, 78LL, 72LL, -1LL};

static const long long jjCharData[][5] = {
{4LL, 1LL, 0LL, 1LL, 137438953504LL},
{4LL, 1LL, 0LL, 1LL, 2251799814209536LL},
{4LL, 1LL, 0LL, 1LL, 17592186048512LL},
{4LL, 1LL, 0LL, 1LL, 8589934594LL},
{4LL, 1LL, 0LL, 1LL, 274877907008LL},
{4LL, 1LL, 0LL, 1LL, 9007199256838144LL},
{4LL, 1LL, 0LL, 1LL, 1125899907104768LL},
{4LL, 1LL, 0LL, 1LL, 4503599628419072LL},
{4LL, 1LL, 0LL, 1LL, 16384LL},
{4LL, 1LL, 0LL, 1LL, 8589934592LL},
{4LL, 1LL, 0LL, 1LL, 16384LL},
{4LL, 1LL, 0LL, 1LL, 144115188075855872LL},
{4LL, 1LL, 0LL, 1LL, 4503599627370496LL},
{4LL, 1LL, 0LL, 1LL, 2199023255552LL},
{4LL, 1LL, 0LL, 1LL, 70368744177664LL},
{4LL, 1LL, 0LL, 1LL, 2199023255552LL},
{4LL, 1LL, 0LL, 1LL, 274877906944LL},
{4LL, 1LL, 0LL, 1LL, 70368744177664LL},
{4LL, 1LL, 0LL, 1LL, 512LL},
{4LL, 1LL, 0LL, 1LL, 576460752303423488LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{2LL, 1LL, 35184372088832LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{2LL, 1LL, 35184372088832LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{2LL, 1LL, 35184372088832LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{2LL, 1LL, 35184372088832LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{4LL, 1LL, 0LL, 1LL, 2305843009213693952LL},
{2LL, 1LL, 140737488355328LL},
{2LL, 1LL, 140737488355328LL},
{4LL, 1LL, 0LL, 1LL, 268435456LL},
{4LL, 1LL, -140737488355329LL, 1023LL, -1LL},
{2LL, 1LL, 140737488355328LL},
{2LL, 1LL, 549755813888LL},
{2LL, 1LL, 549755813888LL},
{2LL, 1LL, 549755813888LL},
{4LL, 1LL, -549755813889LL, 1023LL, -1LL},
{2LL, 1LL, 549755813888LL},
{4LL, 1LL, 1974722883485696LL, 1LL, 4503874506326080LL},
{4LL, 1LL, 1974722883485696LL, 1LL, 4503874506326080LL},
{4LL, 1LL, 1974722883485696LL, 1LL, 4503874506326080LL},
{4LL, 1LL, 1974722883485696LL, 1LL, 4503874506326080LL},
{4LL, 1LL, 1974722883485696LL, 1LL, 4503874506326080LL},
{4LL, 1LL, 1974722883485696LL, 1LL, 4503874506326080LL},
{4LL, 1LL, 1974722883485696LL, 1LL, 4503874506326080LL},
{4LL, 1LL, 1974722883485696LL, 1LL, 4503874506326080LL},
{4LL, 1LL, 1974722883485696LL, 1LL, 4503874506326080LL},
{2LL, 1LL, 2305843009213693952LL},
{4LL, 1LL, 0LL, 1LL, 562949953552384LL},
{4LL, 1LL, 0LL, 1LL, 137438953504LL},
{2LL, 1LL, 1152921504606846976LL},
{2LL, 1LL, 4611686018427387904LL},
{4LL, 1LL, 0LL, 1LL, 137438953504LL},
{4LL, 1LL, 0LL, 1LL, 70368744194048LL},
{2LL, 1LL, 2305843009213693952LL},
{2LL, 1LL, 4611686018427387904LL},
{4LL, 1LL, 0LL, 1LL, 576460745995190270LL},
{4LL, 1LL, 287948969894477824LL, 1LL, 576460745995190270LL},
{2LL, 1LL, 17179869184LL},
{4LL, 1LL, -17179869185LL, 1023LL, -1LL},
{2LL, 1LL, 17179869184LL},
{4LL, 1LL, 0LL, 1LL, 65536LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 33554432LL},
{4LL, 1LL, 0LL, 1LL, 1048576LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 256LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 8192LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 524288LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 8192LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 8388608LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 16LL},
{4LL, 1LL, 0LL, 1LL, 1048576LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 256LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 8192LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 70368744177664LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 137438953504LL},
{2LL, 1LL, 43980465111040LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 281474976710656LL},
{2LL, 1LL, 71776119061217280LL},
{4LL, 1LL, 0LL, 1LL, 72057594054705152LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 541165879422LL},
{2LL, 1LL, 70368744177664LL},
{2LL, 1LL, 70368744177664LL},
{2LL, 1LL, 287667426198290432LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 288230376151711744LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 288230376151711744LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 70368744177664LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 35184372088832LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 35184372088832LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 35184372088832LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 35184372088832LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 1048576LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 288230376151711744LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 288230376151711744LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 70368744177664LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 288230376151711744LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 288230376151711744LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 70368744177664LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 67108864LL},
{2LL, 1LL, 43980465111040LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 288230376151711744LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 35184372088832LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 35184372088832LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 1048576LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 288230376151711744LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 288230376151711744LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 70368744177664LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 67108864LL},
{2LL, 1LL, 43980465111040LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 288230376151711744LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 43980465111040LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 17592186048512LL},
{4LL, 1LL, 0LL, 1LL, 4503599628419072LL},
{4LL, 1LL, 0LL, 1LL, 137438953504LL},
{4LL, 1LL, 0LL, 1LL, 549755814016LL},
{4LL, 1LL, 0LL, 1LL, 4503599628419072LL},
{4LL, 1LL, 0LL, 1LL, 137438953504LL},
{2LL, 1LL, 1152921504606846976LL},
{2LL, 1LL, 4611686018427387904LL},
{2LL, 1LL, 2305843009213693952LL}};

static const int jjcompositeState[][25] = {
{}, 
{}, 
{}, 
{}, 
{4, 7, 10, 18, 19, 57, 62, 67, 76, 78, 79, 80, 82, 84, 85, 87, 90, 112, 118, 124, 129, 211, 215, 218, 221}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}, 
{}};

static const int jjmatchKinds[] = {
20, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
24, 
2147483647, 
2147483647, 
24, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
27, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
28, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
29, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
45, 
56, 
56, 
2147483647, 
57, 
58, 
59, 
2147483647, 
61, 
2147483647, 
85, 
85, 
2147483647, 
2147483647, 
86, 
88, 
2147483647, 
88, 
88, 
2147483647, 
88, 
2147483647, 
88, 
2147483647, 
88, 
2147483647, 
88, 
2147483647, 
88, 
2147483647, 
88, 
88, 
2147483647, 
88, 
2147483647, 
88, 
2147483647, 
2147483647, 
24, 
2147483647, 
2147483647, 
2147483647, 
24, 
22, 
21, 
2147483647, 
23, 
2147483647, 
2147483647, 
22, 
22, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
30, 
2147483647, 
2147483647, 
30, 
2147483647, 
30, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
31, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
32, 
2147483647, 
2147483647, 
32, 
2147483647, 
32, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
33, 
2147483647, 
2147483647, 
33, 
2147483647, 
2147483647, 
33, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
34, 
2147483647, 
2147483647, 
34, 
2147483647, 
2147483647, 
34, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
57, 
60, 
2147483647, 
58, 
61, 
2147483647, 
59, 
60};

static const int jjnextStateSet[][8] = {
{0}, 
{1, 0}, 
{1, 1}, 
{1, 2}, 
{1, 3}, 
{1, 0}, 
{1, 5}, 
{1, 6}, 
{0}, 
{1, 8}, 
{1, 9}, 
{0}, 
{1, 11}, 
{1, 12}, 
{1, 13}, 
{1, 14}, 
{1, 15}, 
{1, 16}, 
{1, 17}, 
{1, 20}, 
{1, 21}, 
{1, 22}, 
{1, 23}, 
{1, 24}, 
{1, 25}, 
{1, 26}, 
{1, 27}, 
{1, 28}, 
{1, 29}, 
{1, 30}, 
{1, 31}, 
{1, 32}, 
{1, 33}, 
{1, 34}, 
{1, 35}, 
{1, 36}, 
{1, 37}, 
{1, 38}, 
{1, 39}, 
{1, 40}, 
{1, 41}, 
{1, 42}, 
{1, 43}, 
{1, 44}, 
{1, 45}, 
{1, 46}, 
{1, 47}, 
{1, 48}, 
{1, 49}, 
{1, 50}, 
{1, 51}, 
{1, 52}, 
{1, 53}, 
{1, 54}, 
{1, 55}, 
{1, 56}, 
{0}, 
{3, 59, 60, 61}, 
{3, 59, 60, 61}, 
{1, 58}, 
{3, 59, 60, 61}, 
{0}, 
{3, 64, 65, 66}, 
{3, 64, 65, 66}, 
{1, 63}, 
{3, 64, 65, 66}, 
{0}, 
{1, 68}, 
{1, 69}, 
{1, 70}, 
{1, 71}, 
{1, 72}, 
{1, 73}, 
{1, 74}, 
{1, 75}, 
{0}, 
{0}, 
{0}, 
{1, 77}, 
{0}, 
{0}, 
{0}, 
{1, 81}, 
{0}, 
{1, 83}, 
{1, 86}, 
{1, 86}, 
{2, 88, 89}, 
{2, 88, 89}, 
{0}, 
{2, 91, 106}, 
{4, 92, 101, 103, 105}, 
{2, 93, 100}, 
{1, 94}, 
{3, 95, 97, 99}, 
{1, 96}, 
{2, 97, 99}, 
{1, 98}, 
{1, 99}, 
{0}, 
{3, 101, 103, 105}, 
{2, 93, 102}, 
{2, 103, 105}, 
{2, 93, 104}, 
{1, 105}, 
{1, 93}, 
{2, 94, 107}, 
{3, 99, 108, 110}, 
{1, 109}, 
{2, 99, 110}, 
{1, 111}, 
{1, 99}, 
{2, 113, 114}, 
{1, 113}, 
{2, 114, 115}, 
{2, 116, 117}, 
{1, 117}, 
{1, 117}, 
{5, 115, 119, 120, 122, 123}, 
{1, 119}, 
{1, 121}, 
{1, 121}, 
{1, 113}, 
{1, 114}, 
{7, 115, 122, 123, 125, 126, 127, 128}, 
{1, 125}, 
{2, 122, 126}, 
{2, 123, 127}, 
{2, 115, 128}, 
{5, 130, 139, 148, 168, 184}, 
{1, 131}, 
{1, 132}, 
{1, 133}, 
{1, 134}, 
{1, 135}, 
{1, 136}, 
{1, 137}, 
{1, 138}, 
{1, 138}, 
{1, 140}, 
{1, 141}, 
{2, 141, 142}, 
{1, 143}, 
{1, 144}, 
{1, 145}, 
{1, 146}, 
{1, 147}, 
{0}, 
{1, 149}, 
{1, 150}, 
{2, 150, 151}, 
{1, 152}, 
{1, 153}, 
{1, 154}, 
{1, 155}, 
{1, 156}, 
{1, 157}, 
{1, 158}, 
{1, 159}, 
{1, 160}, 
{1, 161}, 
{1, 162}, 
{1, 163}, 
{1, 164}, 
{1, 165}, 
{1, 166}, 
{1, 167}, 
{1, 167}, 
{1, 169}, 
{1, 170}, 
{1, 171}, 
{3, 172, 177, 178}, 
{1, 173}, 
{1, 174}, 
{3, 175, 177, 178}, 
{1, 176}, 
{3, 176, 177, 178}, 
{0}, 
{1, 179}, 
{1, 180}, 
{2, 181, 182}, 
{1, 182}, 
{1, 183}, 
{0}, 
{1, 185}, 
{1, 186}, 
{2, 186, 187}, 
{1, 188}, 
{1, 189}, 
{1, 190}, 
{1, 191}, 
{1, 192}, 
{1, 193}, 
{1, 194}, 
{1, 195}, 
{1, 196}, 
{1, 197}, 
{1, 198}, 
{3, 199, 204, 205}, 
{1, 200}, 
{1, 201}, 
{3, 202, 204, 205}, 
{1, 203}, 
{3, 203, 204, 205}, 
{0}, 
{1, 206}, 
{1, 207}, 
{2, 208, 209}, 
{1, 209}, 
{1, 210}, 
{0}, 
{3, 212, 213, 214}, 
{1, 139}, 
{1, 148}, 
{1, 184}, 
{2, 216, 217}, 
{0}, 
{0}, 
{2, 219, 220}, 
{0}, 
{0}, 
{2, 222, 223}, 
{0}, 
{0}};

static const int jjInitStates[]  = {
4};

static const int canMatchAnyChar[] = {
2147483647};

static const JJString jjstrLiteralImages[] = {
""
, 
"\11", 
"\12", 
"\13", 
"\14", 
"\15", 
"\40", 
"\50", 
"\51", 
"\133", 
"\135", 
"\56", 
"\54", 
"\72", 
"\44", 
"\73", 
""
, 
""
, 
""
, 
"\156\165\154\154", 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
"\123\122\111\104\75", 
"\120\117\111\116\124", 
"\120\117\114\131\107\117\116", 
"\114\111\116\105\123\124\122\111\116\107", 
"\115\125\114\124\111\120\117\111\116\124", 
"\115\125\114\124\111\120\117\114\131\107\117\116", 
"\115\125\114\124\111\114\111\116\105\123\124\122\111\116\107", 
"\107\105\117\115\105\124\122\131\103\117\114\114\105\103\124\111\117\116", 
"\105\116\126\105\114\117\120\105", 
""
, 
"\53", 
"\55", 
"\52", 
"\57", 
"\45", 
"\101\123\103", 
"\104\105\123\103", 
"\117\122", 
"\101\116\104", 
"\116\117\124", 
""
, 
""
, 
""
, 
""
, 
""
, 
""
, 
"\111\123", 
"\111\116", 
"\114\111\113\105", 
"\111\114\111\113\105", 
"\105\130\111\123\124\123", 
"\102\105\124\127\105\105\116", 
"\102\102\117\130", 
"\122\105\114\101\124\105", 
"\105\121\125\101\114\123", 
"\102\105\131\117\116\104", 
"\127\111\124\110\111\116", 
"\104\127\111\124\110\111\116", 
"\124\117\125\103\110\105\123", 
"\103\122\117\123\123\105\123", 
"\103\117\116\124\101\111\116\123", 
"\117\126\105\122\114\101\120\123", 
"\104\111\123\112\117\111\116\124", 
"\111\116\124\105\122\123\105\103\124\123", 
"\146\145\145\164", 
"\155\145\164\145\162\163", 
"\153\151\154\157\155\145\164\145\162\163", 
"\163\164\141\164\165\164\145\40\155\151\154\145\163", 
"\156\141\165\164\151\143\141\154\40\155\151\154\145\163", 
""
, 
""
, 
""
, 
""
, 
""
, 
""
};

static const unsigned long long jjtoSkip[] = {
   126ULL, 268435456ULL};
static const unsigned long long jjtoSpecial[] = {
   0ULL, 268435456ULL};
static const unsigned long long jjtoMore[] = {
   0ULL, 268435456ULL};
static const unsigned long long jjtoToken[] = {
   -127ULL, 402653183ULL};
static const int jjnewLexState[] = {
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

static const JJChar lexStateNames_arr_0[] = 
{0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0};
static const JJString lexStateNames[] = {
lexStateNames_arr_0
};


bool ExpressionTokenManager::moveToNextChar() {
  if(input_stream->endOfInput())
    return false;

  curChar = input_stream->readChar();
  return true;
}



/** Constructor. */
ExpressionTokenManager::ExpressionTokenManager (JAVACC_CHARSTREAM * stream, int lexState)
{
    ReInit(stream, lexState);
}

/** Reinitialise parser. */
void ExpressionTokenManager::ReInit(JAVACC_CHARSTREAM * stream, int lexState)
{
    defaultLexState = 0;
    curLexState = 0;
    moveIndex = 1;
    errorHandler = nullptr;
    delete_eh = false;

    for (int i = 0; i < 224; i++) {
      int ind = 0;
      // We originally generate something like RLE for the static arrays and
      // we actually expannd them here.
      for (int j = 0; j < (int) jjCharData[i][0]; j += 2) {
        for (int k = 0; k < (int) jjCharData[i][j + 1]; k++) {
          jjChars[i][ind++] = jjCharData[i][j + 2];
        }
      }
    }

    jjmatchedPos = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    SwitchTo(lexState);
    errorHandler = new TokenManagerErrorHandler();
}

/** Switch to specified lex state. */
void ExpressionTokenManager::SwitchTo(int lexState)
{
    if (lexState >= 1 || lexState < 0) {
      JJString message;
#ifdef WIDE_CHAR
      message += L"Error: Ignoring invalid lexical state : ";
      message += lexState; message += L". State unchanged.";
#else
      message += "Error: Ignoring invalid lexical state : ";
      message += lexState; message += ". State unchanged.";
#endif
      throw new TokenMgrError(message, INVALID_LEXICAL_STATE);
    } else
      curLexState = lexState;
}

int ExpressionTokenManager::jjRunStringLiteralMatch() {
  int curPos = 0;
  int key = (int)curLexState << 16 | curChar;
  int startState = jjInitStates[curLexState];
  int index = getStartAndSize(key, 0);
  if (index != -1) {
    for (int i = 0; i < getStartAndSize(key, 1); i++) {
      int len = (int) stringLiterals[index++];
      int ignoreCase = (int) stringLiterals[index++];
      do {
        if (curChar != stringLiterals[index + curPos] &&
            (ignoreCase == 0 || curChar != stringLiterals[index + len + curPos])) break;
        if (++curPos == len) break;
        if (!moveToNextChar()) {
          --curPos;
          break;
        }
      } while(curPos < len);
      if (curPos == len) {
        jjmatchedKind = (int) stringLiterals[index + len + (ignoreCase * len)];
        jjmatchedPos = curPos;
        startState = (int) stringLiterals[index + len + (ignoreCase * len) + 1];
        if (!moveToNextChar()) {
          return curPos;
        }
        curPos++;
        break;
      } else {
        index += len + (ignoreCase * len) + 2;
        input_stream->backup(curPos + 1);
        curPos = 0;
        if (!moveToNextChar()) {
          assert(false);
        }
      }
    }
  } else {
  }
  return jjMoveNfa(startState, curPos);
}

int ExpressionTokenManager::jjMoveNfa(int startState, int curPos) {

  if (startState < 0) {
    return curPos;
  }

  // We have an array indexed by the NFA state number to roughly indicate
  // the input position so when the input reaches part 0x7fffffff (which
  // should be extremely rare), we need to reset them all back to zero.
  if (++moveIndex == 0x7fffffff) {
    for (int i = 0; i < 224; i++) moved[i] = 0;
    moveIndex = 1;
  }

  // We initialize the kind to MAX value so that when a match is found, we can
  // simply check if it's less than the current match and store it in that
  // case. This helps implement the 'first occurring' rule properly.
  int cnt = 0;
  stateSet[cnt++] = startState;
  moved[startState] = moveIndex;
 
  // Some NFA states have epsilon transitions (move on empty string). So we
  // just start with all of them. Note that the nextStates array already adds
  // the epsilon closure. Only the initial state needs to do this explicitly.
  for (int s : jjcompositeState[startState]) { 
    if (moved[s] != moveIndex) {
      stateSet[cnt++] = s;
      moved[s] = moveIndex;
    }
  }

  do {
    int newCnt = 0;
    int kind = 0x7fffffff;
    if (++moveIndex == 0x7fffffff) {
      for (int i = 0; i < 224; i++) moved[i] = 0;
      moveIndex = 1;
    }

    int vectorIndex = curChar >> 6;
    // unsigned long long bitpattern = (1ULL << (curChar & 0x37));
    unsigned long long bitpattern = (1ULL << (curChar & 077)) & 0x7fffffe07fffffeULL;
    do {
      int state = stateSet[--cnt];
      if ((jjChars[state][vectorIndex] & bitpattern) != 0L) {
        // Current input character can move this NFA state. So add all the
        // next states of the current states for use with the next input char.
        for (int idx = 0; idx < jjnextStateSet[state][0]; idx++) {
          int newState = jjnextStateSet[state][idx + 1];
          if (moved[newState] != moveIndex) {
            // We add each state only once.
            newStateSet[newCnt++] = newState;
            moved[newState] = moveIndex;
          }
        }
        int newKind = jjmatchKinds[state];
        if (kind > newKind) {
          // It's a state so store the matched kind if it's smaller than
          // what's already matched.
          kind = newKind;
        }
      }
    } while (cnt > 0);

    if (kind != 0x7fffffff) {
      // We found a match. So remember the kind and position of the match.
      jjmatchedKind = kind;
      jjmatchedPos = curPos;
      // Reset the kind to max value so we can contine looking for a longer
      // match.
      kind = 0x7fffffff;
    }

    // Swap the current and next state sets.
    int tmp;
    for(int i = 0; i < 224; i++) {
      tmp = stateSet[i];
      stateSet[i] = newStateSet[i];
      newStateSet[i] = tmp;
    }
    // Reset the number of states.
    cnt = newCnt;
    if (newCnt == 0) {
      // There were no transitions from any of the current states on the
      // current input. So we are done.
      return curPos;
    }
    // Read the next character and try to continue running the NFA.
    if (!moveToNextChar()) {
      // EOF reached!
      return curPos;
    }
    ++curPos;
  } while (cnt > 0);

  throw "Interal error. Please submit a bug at: http://javacc.java.net.";
//  return curPos;
}

static bool isToken(int kind) {
  return (jjtoToken[kind >> 6] & (1ULL << (kind & 077))) != 0L;
}

static bool isSkip(int kind) {
  return (jjtoSkip[kind >> 6] & (1ULL << (kind & 077))) != 0L;
}

static bool isSpecial(int kind) {
  return (jjtoSpecial[kind >> 6] & (1ULL << (kind & 077))) != 0L;
}

static bool isMore(int kind) {
  return (jjtoMore[kind >> 6] & (1ULL << (kind & 077))) != 0L;
}

Token * ExpressionTokenManager::jjFillToken() {
  Token * t;
  JJString curTokenImage;
  int beginLine;
  int endLine;
  int beginColumn;
  int endColumn;
  if (jjmatchedPos < 0) {
    if (image.length() == 0) {
      curTokenImage = "";
    } else {
      curTokenImage = image;
    }
    beginLine = endLine = input_stream->getEndLine();
    beginColumn = endColumn = input_stream->getEndColumn();
  } else {
    JJString im = jjstrLiteralImages[jjmatchedKind];
    curTokenImage = (im.length() == 0) ? input_stream->GetImage() : im;
    beginLine = input_stream->getBeginLine();
    beginColumn = input_stream->getBeginColumn();
    endLine = input_stream->getEndLine();
    endColumn = input_stream->getEndColumn();
  }

   t = Token::newToken(jjmatchedKind);
   t->kind = jjmatchedKind;
   t->image = curTokenImage;

   t->beginLine = beginLine;
   t->endLine = endLine;
   t->beginColumn = beginColumn;
   t->endColumn = endColumn;

   return t;
}

/** Get the next Token. */
Token * ExpressionTokenManager::getNextToken() {
  Token * specialToken = nullptr;
  Token * matchedToken;
  int lastReadPosition = 0;

  EOFLoop:
  for (;;) {
    if(input_stream->endOfInput()) {
      // No input. So return EOF token.
      jjmatchedKind = _EOF;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken->specialToken = specialToken;
      return matchedToken;
    }

    // First see if we have any input at all.
    curChar = input_stream->BeginToken();


    // Set matched kind to a MAX VALUE to implement largest, first occuring rule
    // i.e., smallest kind value matched should be used.
    image = jjimage;
    // image->setLength(0);
    jjimageLen = 0;

    for (;;) {
      jjmatchedKind = 0x7fffffff;
      jjmatchedPos = 0;
      lastReadPosition = jjRunStringLiteralMatch();
      if (jjmatchedPos == 0 && jjmatchedKind > canMatchAnyChar[curLexState]) {
        jjmatchedKind = canMatchAnyChar[curLexState];
      }

      if (jjmatchedKind != 0x7fffffff) {
        // We have a match!
  
        // Put back any characters looked ahead.
        input_stream->backup(lastReadPosition - jjmatchedPos);
        if (isToken(jjmatchedKind)) {
          // Matched kind is a real TOKEN.
          matchedToken = jjFillToken();
          matchedToken->specialToken = specialToken;
          TokenLexicalActions(matchedToken);
          if (jjnewLexState[jjmatchedKind] != -1) {
            curLexState = jjnewLexState[jjmatchedKind];
          }
          return matchedToken;
        } else if (isSkip(jjmatchedKind) || isSpecial(jjmatchedKind)) {
          // Matched kind is a SKIP or SPECIAL_TOKEN.
          if (isSpecial(jjmatchedKind)) {
            matchedToken = jjFillToken();
            if (specialToken == nullptr) {
              specialToken = matchedToken;
            } else {
              matchedToken->specialToken = specialToken;
              specialToken = (specialToken->next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
          } else {
            SkipLexicalActions(nullptr);
          }
          if (jjnewLexState[jjmatchedKind] != -1) {
            curLexState = jjnewLexState[jjmatchedKind];
          }
          goto EOFLoop;
        }
        // Here it's a MORE.
        MoreLexicalActions();
        if (jjnewLexState[jjmatchedKind] != -1) {
          curLexState = jjnewLexState[jjmatchedKind];
        }
        lastReadPosition = 0;
        jjmatchedKind = 0x7fffffff;
        do {
          curChar = input_stream->readChar();
        } while(curChar >= 0);
      }
      int error_line = input_stream->getEndLine();
      int error_column = input_stream->getEndColumn();
      JJString error_after = "";
      bool EOFSeen = false;

      if(input_stream->endOfInput()) {
        EOFSeen = true;
        error_after = lastReadPosition <= 1 ? "" : input_stream->GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
      }
      if (!EOFSeen) {
        error_after = lastReadPosition <= 1 ? "" : input_stream->GetImage();
      }
      errorHandler->lexicalError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, this);
      goto EOFLoop;
    }
  }
}
int ExpressionTokenManager::getStartAndSize(int index, int isCount)
{
  switch(index) {
    case 9: { return (isCount == 0) ? 0 : 1;}
    case 10: { return (isCount == 0) ? 5 : 1;}
    case 11: { return (isCount == 0) ? 10 : 1;}
    case 12: { return (isCount == 0) ? 15 : 1;}
    case 13: { return (isCount == 0) ? 20 : 1;}
    case 32: { return (isCount == 0) ? 25 : 1;}
    case 36: { return (isCount == 0) ? 30 : 1;}
    case 37: { return (isCount == 0) ? 35 : 1;}
    case 40: { return (isCount == 0) ? 40 : 1;}
    case 41: { return (isCount == 0) ? 45 : 1;}
    case 42: { return (isCount == 0) ? 50 : 1;}
    case 43: { return (isCount == 0) ? 55 : 1;}
    case 44: { return (isCount == 0) ? 60 : 1;}
    case 45: { return (isCount == 0) ? 65 : 1;}
    case 46: { return (isCount == 0) ? 70 : 1;}
    case 47: { return (isCount == 0) ? 75 : 1;}
    case 58: { return (isCount == 0) ? 80 : 1;}
    case 59: { return (isCount == 0) ? 85 : 1;}
    case 65: { return (isCount == 0) ? 90 : 2;}
    case 66: { return (isCount == 0) ? 110 : 3;}
    case 67: { return (isCount == 0) ? 156 : 2;}
    case 68: { return (isCount == 0) ? 194 : 3;}
    case 69: { return (isCount == 0) ? 244 : 3;}
    case 70: { return (isCount == 0) ? 296 : 1;}
    case 71: { return (isCount == 0) ? 308 : 1;}
    case 73: { return (isCount == 0) ? 348 : 4;}
    case 75: { return (isCount == 0) ? 402 : 1;}
    case 76: { return (isCount == 0) ? 426 : 2;}
    case 77: { return (isCount == 0) ? 462 : 4;}
    case 78: { return (isCount == 0) ? 564 : 3;}
    case 79: { return (isCount == 0) ? 618 : 2;}
    case 80: { return (isCount == 0) ? 646 : 2;}
    case 82: { return (isCount == 0) ? 678 : 1;}
    case 83: { return (isCount == 0) ? 694 : 2;}
    case 84: { return (isCount == 0) ? 738 : 1;}
    case 87: { return (isCount == 0) ? 756 : 1;}
    case 91: { return (isCount == 0) ? 772 : 1;}
    case 93: { return (isCount == 0) ? 777 : 1;}
    case 97: { return (isCount == 0) ? 782 : 2;}
    case 98: { return (isCount == 0) ? 802 : 3;}
    case 99: { return (isCount == 0) ? 848 : 2;}
    case 100: { return (isCount == 0) ? 886 : 3;}
    case 101: { return (isCount == 0) ? 936 : 3;}
    case 102: { return (isCount == 0) ? 988 : 1;}
    case 103: { return (isCount == 0) ? 1000 : 1;}
    case 105: { return (isCount == 0) ? 1040 : 4;}
    case 107: { return (isCount == 0) ? 1094 : 1;}
    case 108: { return (isCount == 0) ? 1118 : 2;}
    case 109: { return (isCount == 0) ? 1154 : 4;}
    case 110: { return (isCount == 0) ? 1256 : 3;}
    case 111: { return (isCount == 0) ? 1310 : 2;}
    case 112: { return (isCount == 0) ? 1338 : 2;}
    case 114: { return (isCount == 0) ? 1370 : 1;}
    case 115: { return (isCount == 0) ? 1386 : 2;}
    case 116: { return (isCount == 0) ? 1430 : 1;}
    case 119: { return (isCount == 0) ? 1448 : 1;}
  }
  return -1;
}

void ExpressionTokenManager::TokenLexicalActions(Token * matchedToken) {
  switch(matchedToken->kind) {
    default: break;
  }
}
void ExpressionTokenManager::SkipLexicalActions(Token * /*matchedToken*/) {
  switch(jjmatchedKind) {
    default: break;
  }
  switch(jjmatchedKind) {
    default: break;
  }
}
void ExpressionTokenManager::MoreLexicalActions() {
jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
  switch(jjmatchedKind) {
    default: break;
  }
}
/* JavaCC - OriginalChecksum=302846638f568035c4fa14828e67241c (do not edit this line) */
