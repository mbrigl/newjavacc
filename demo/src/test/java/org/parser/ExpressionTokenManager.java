/* Generated By:JavaCC: Do not edit this line. ExpressionTokenManager.java Version 8.0.0 */
package org.parser;


public class ExpressionTokenManager  implements ExpressionConstants {

protected boolean moveToNextChar() {
  try {
    curChar = input_stream.readChar();
  } catch(java.io.IOException e) {
    return false;
  }
  return true;
}



    /** Constructor. */
    public ExpressionTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ExpressionTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(JavaCharStream stream)
  {

    jjmatchedPos = 0;
    curLexState = defaultLexState;
    input_stream = stream;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState) {
    curLexState = lexState;
  }

private  int jjRunStringLiteralMatch() {
  int curPos = 0;
  int key = (int)curLexState << 16 | curChar;
  int startState = jjInitStates[curLexState];
  if (startAndSize.containsKey(key)) {
    int[] arr = startAndSize.get(key);
    int index = arr[0];
    for (int i = 0; i < arr[1]; i++) {
      int len = stringLiterals[index++];
      int ignoreCase = stringLiterals[index++];
      do {
        if (curChar != stringLiterals[index + curPos] &&
            (ignoreCase == 0 || curChar != stringLiterals[index + len + curPos])) break;
        if (++curPos == len) break;
        if (!moveToNextChar()) {
          --curPos;
          break;
        }
      } while(curPos < len);
      if (curPos == len) {
        jjmatchedKind = stringLiterals[index + len + (ignoreCase * len)];
        jjmatchedPos = curPos;
        startState = stringLiterals[index + len + (ignoreCase * len) + 1];
        if (!moveToNextChar()) {
          return curPos;
        }
        curPos++;
        break;
      } else {
        index += len + (ignoreCase * len) + 2;
        input_stream.backup(curPos + 1);
        curPos = 0;
        if (!moveToNextChar()) {
          assert(false);
        }
      }
    }
  } else {
  }
  return jjMoveNfa(startState, curPos);
}

private   int[] stateSet = new int[224];
private   int[] newStateSet = new int[224];
private   long[] moved = new long[224];
private  long moveIndex = 1L;

private final int jjMoveNfa(int startState, int curPos) {

  if (startState < 0) {
    return curPos;
  }

  // We have a long array indexed by the NFA state number to roughly indicate
  // the input position so when the input reaches part Long.MAX_VALUE (which
  // should be extremely rare), we need to reset them all back to zero.
  if (++moveIndex == Long.MAX_VALUE) {
    for (int i = 0; i < 224; i++) moved[i] = 0L;
    moveIndex = 1L;
  }

  // We initialize the kind to MAX value so that when a match is found, we can
  // simply check if it's less than the current match and store it in that
  // case. This helps implement the 'first occurring' rule properly.
  int cnt = 0;
  stateSet[cnt++] = startState;
  moved[startState] = moveIndex;
 
  // Some NFA states have epsilon transitions (move on empty string). So we
  // just start with all of them. Note that the nextStates array already adds
  // the epsilon closure. Only the initial state needs to do this explicitly.
  for (int s : jjcompositeState[startState]) { 
    if (moved[s] != moveIndex) {
      stateSet[cnt++] = s;
      moved[s] = moveIndex;
    }
  }

  do {
    int newCnt = 0;
    int kind = Integer.MAX_VALUE;
    if (++moveIndex == Long.MAX_VALUE) {
      for (int i = 0; i < 224; i++) moved[i] = 0L;
      moveIndex = 1L;
    }

    int vectorIndex = curChar >> 6;
    long bitpattern = (1L << (curChar & 0x3f));
    do {
      int state = stateSet[--cnt];
      if ((jjChars[state][vectorIndex] & bitpattern) != 0L) {
        // Current input character can move this NFA state. So add all the
        // next states of the current states for use with the next input char.
        for (int newState : jjnextStateSet[state]) {
          if (moved[newState] != moveIndex) {
            // We add each state only once.
            newStateSet[newCnt++] = newState;
            moved[newState] = moveIndex;
          }
        }
        int newKind = jjmatchKinds[state];
        if (kind > newKind) {
          // It's a state so store the matched kind if it's smaller than
          // what's already matched.
          kind = newKind;
        }
      }
    } while (cnt > 0);

    if (kind != Integer.MAX_VALUE) {
      // We found a match. So remember the kind and position of the match.
      jjmatchedKind = kind;
      jjmatchedPos = curPos;
      // Reset the kind to max value so we can contine looking for a longer
      // match.
      kind = Integer.MAX_VALUE;
    }

    // Swap the current and next state sets.
    int[] tmp = stateSet;
    stateSet = newStateSet;
    newStateSet = tmp;
    // Reset the number of states.
    cnt = newCnt;
    if (newCnt == 0) {
      // There were no transitions from any of the current states on the
      // current input. So we are done.
      return curPos;
    }
    // Read the next character and try to continue running the NFA.
    if (!moveToNextChar()) {
      // EOF reached!
      return curPos;
    }
    ++curPos;
  } while (cnt > 0);

  assert(false) :
      "Interal error. Please submit a bug at: http://javacc.java.net.";
  return curPos;
}

private  int defaultLexState = 0;
protected  int curLexState = 0;
private  int jjmatchedPos;
private  int jjmatchedKind;
private  StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected int curChar;
protected  JavaCharStream input_stream;

public static boolean isToken(int kind) {
  return (jjtoToken[kind >> 6] & (1L << (kind & 0x3f))) != 0L;
}

public static final boolean isSkip(int kind) {
  return (jjtoSkip[kind >> 6] & (1L << (kind & 0x3f))) != 0L;
}

public static boolean isSpecial(int kind) {
  return (jjtoSpecial[kind >> 6] & (1L << (kind & 0x3f))) != 0L;
}

public static boolean isMore(int kind) {
  return (jjtoMore[kind >> 6] & (1L << (kind & 0x3f))) != 0L;
}

protected  Token jjFillToken() {
  Token t;
  String curTokenImage;
  int beginLine;
  int endLine;
  int beginColumn;
  int endColumn;
  if (jjmatchedPos < 0) {
    if (image == null) {
      curTokenImage = "";
    } else {
      curTokenImage = image.toString();
    }
    beginLine = endLine = input_stream.getEndLine();
    beginColumn = endColumn = input_stream.getEndColumn();
  } else {
    String im = jjstrLiteralImages[jjmatchedKind];
    curTokenImage = (im == null) ? input_stream.GetImage() : im;
    beginLine = input_stream.getBeginLine();
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
  }

   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

/** Get the next Token. */
public  Token getNextToken() {
  Token specialToken = null;
  Token matchedToken;
  int lastReadPosition = 0;

  EOFLoop:
  for (;;) {
    // First see if we have any input at all.
    try {
      curChar = input_stream.BeginToken();
    } catch(Exception e) {
      // No input. So return EOF token.
      jjmatchedKind = EOF;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
    }

    // Set matched kind to a MAX VALUE to implement largest, first occuring rule
    // i.e., smallest kind value matched should be used.
    image = jjimage;
    image.setLength(0);
    jjimageLen = 0;

    MoreLoop: for (;;) {
      jjmatchedKind = Integer.MAX_VALUE;
      jjmatchedPos = 0;
      lastReadPosition = jjRunStringLiteralMatch();
      if (jjmatchedPos == 0 && jjmatchedKind > canMatchAnyChar[curLexState]) {
        jjmatchedKind = canMatchAnyChar[curLexState];
      }

      if (jjmatchedKind != Integer.MAX_VALUE) {
        // We have a match!
  
        // Put back any characters looked ahead.
        input_stream.backup(lastReadPosition - jjmatchedPos);
        if (isToken(jjmatchedKind)) {
          // Matched kind is a real TOKEN.
          matchedToken = jjFillToken();
          matchedToken.specialToken = specialToken;
          TokenLexicalActions(matchedToken);
          if (jjnewLexState[jjmatchedKind] != -1) {
            curLexState = jjnewLexState[jjmatchedKind];
          }
          return matchedToken;
        } else if (isSkip(jjmatchedKind) || isSpecial(jjmatchedKind)) {
          // Matched kind is a SKIP or SPECIAL_TOKEN.
          if (isSpecial(jjmatchedKind)) {
            matchedToken = jjFillToken();
            if (specialToken == null) {
              specialToken = matchedToken;
            } else {
              matchedToken.specialToken = specialToken;
              specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
          } else {
            SkipLexicalActions(null);
          }
          if (jjnewLexState[jjmatchedKind] != -1) {
            curLexState = jjnewLexState[jjmatchedKind];
          }
          continue EOFLoop;
        }
        // Here it's a MORE.
        MoreLexicalActions();
        if (jjnewLexState[jjmatchedKind] != -1) {
          curLexState = jjnewLexState[jjmatchedKind];
        }
        lastReadPosition = 0;
        jjmatchedKind = Integer.MAX_VALUE;
        try {
          curChar = input_stream.readChar();
          continue;
        }
        catch (java.io.IOException e1) { }
      }
      reportError(lastReadPosition);
    }
  }
}

protected  void reportError(int lastReadPosition) {
  int error_line = input_stream.getEndLine();
  int error_column = input_stream.getEndColumn();
  String error_after = null;
  boolean EOFSeen = false;
  try {
    input_stream.readChar();
    input_stream.backup(1);
  } catch (java.io.IOException e1) {
    EOFSeen = true;
    error_after = lastReadPosition <= 1 ? "" : input_stream.GetImage();
    if (curChar == '\n' || curChar == '\r') {
       error_line++;
       error_column = 0;
    }
    else
       error_column++;
  }
  if (!EOFSeen) {
    input_stream.backup(1);
    error_after = lastReadPosition <= 1 ? "" : input_stream.GetImage();
  }
  throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column,
                          error_after, curChar, TokenMgrException.LEXICAL_ERROR);
}

private static final java.util.Map<Integer, int[]> startAndSize =
    new java.util.HashMap<Integer, int[]>();


private static final long[][] jjChars = new long[224][];
private static void InitNfaData() {
  for (int i = 0; i < 224; i++) {
    jjChars[i] = new long[1024];
    int ind = 0;
    // We originally generate something like RLE for the static arrays and
    // we actually expannd them here.
    for (int j = 0; j < jjCharData[i].length; j += 2) {
      for (int k = 0; k < (int)jjCharData[i][j]; k++) {
        jjChars[i][ind++] = jjCharData[i][j + 1];
      }
    }
  }
}
public static String[] lexStateNames = {
"DEFAULT"
};
private static final int[] stringLiterals = {
1, 0, 12288, 10, -1, 
1, 0, 9, 1, -1, 
1, 0, 10, 2, -1, 
1, 0, 11, 3, -1, 
1, 0, 12, 4, -1, 
1, 0, 13, 5, -1, 
1, 0, 32, 6, -1, 
1, 0, 160, 7, -1, 
1, 0, 36, 18, -1, 
1, 0, 37, 54, -1, 
1, 0, 8232, 8, -1, 
1, 0, 40, 11, -1, 
1, 0, 8233, 9, -1, 
1, 0, 41, 12, -1, 
1, 0, 42, 52, -1, 
1, 0, 43, 50, -1, 
1, 0, 44, 16, -1, 
1, 0, 45, 51, -1, 
1, 0, 46, 15, -1, 
1, 0, 47, 53, -1, 
1, 0, 58, 17, -1, 
1, 0, 59, 19, -1, 
3, 1, 97, 110, 100, 65, 78, 68, 58, -1, 
3, 1, 97, 115, 99, 65, 83, 67, 55, -1, 
7, 1, 98, 101, 116, 119, 101, 101, 110, 66, 69, 84, 87, 69, 69, 78, 71, -1, 
6, 1, 98, 101, 121, 111, 110, 100, 66, 69, 89, 79, 78, 68, 75, -1, 
4, 1, 98, 98, 111, 120, 66, 66, 79, 88, 72, -1, 
8, 1, 99, 111, 110, 116, 97, 105, 110, 115, 67, 79, 78, 84, 65, 73, 78, 83, 80, -1, 
7, 1, 99, 114, 111, 115, 115, 101, 115, 67, 82, 79, 83, 83, 69, 83, 79, -1, 
8, 1, 100, 105, 115, 106, 111, 105, 110, 116, 68, 73, 83, 74, 79, 73, 78, 84, 82, -1, 
7, 1, 100, 119, 105, 116, 104, 105, 110, 68, 87, 73, 84, 72, 73, 78, 77, -1, 
4, 1, 100, 101, 115, 99, 68, 69, 83, 67, 56, -1, 
8, 1, 101, 110, 118, 101, 108, 111, 112, 101, 69, 78, 86, 69, 76, 79, 80, 69, 48, -1, 
6, 1, 101, 113, 117, 97, 108, 115, 69, 81, 85, 65, 76, 83, 74, -1, 
6, 1, 101, 120, 105, 115, 116, 115, 69, 88, 73, 83, 84, 83, 70, -1, 
4, 1, 102, 101, 101, 116, 70, 69, 69, 84, 84, -1, 
18, 1, 103, 101, 111, 109, 101, 116, 114, 121, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 71, 69, 79, 77, 69, 84, 82, 89, 67, 79, 76, 76, 69, 67, 84, 73, 79, 78, 47, -1, 
10, 1, 105, 110, 116, 101, 114, 115, 101, 99, 116, 115, 73, 78, 84, 69, 82, 83, 69, 67, 84, 83, 83, -1, 
5, 1, 105, 108, 105, 107, 101, 73, 76, 73, 75, 69, 69, -1, 
2, 1, 105, 110, 73, 78, 67, -1, 
2, 1, 105, 115, 73, 83, 66, -1, 
10, 1, 107, 105, 108, 111, 109, 101, 116, 101, 114, 115, 75, 73, 76, 79, 77, 69, 84, 69, 82, 83, 86, -1, 
10, 1, 108, 105, 110, 101, 115, 116, 114, 105, 110, 103, 76, 73, 78, 69, 83, 84, 82, 73, 78, 71, 43, -1, 
4, 1, 108, 105, 107, 101, 76, 73, 75, 69, 68, -1, 
15, 1, 109, 117, 108, 116, 105, 108, 105, 110, 101, 115, 116, 114, 105, 110, 103, 77, 85, 76, 84, 73, 76, 73, 78, 69, 83, 84, 82, 73, 78, 71, 46, -1, 
12, 1, 109, 117, 108, 116, 105, 112, 111, 108, 121, 103, 111, 110, 77, 85, 76, 84, 73, 80, 79, 76, 89, 71, 79, 78, 45, -1, 
10, 1, 109, 117, 108, 116, 105, 112, 111, 105, 110, 116, 77, 85, 76, 84, 73, 80, 79, 73, 78, 84, 44, -1, 
6, 1, 109, 101, 116, 101, 114, 115, 77, 69, 84, 69, 82, 83, 85, -1, 
14, 1, 110, 97, 117, 116, 105, 99, 97, 108, 32, 109, 105, 108, 101, 115, 78, 65, 85, 84, 73, 67, 65, 76, 32, 77, 73, 76, 69, 83, 88, -1, 
4, 1, 110, 117, 108, 108, 78, 85, 76, 76, 23, -1, 
3, 1, 110, 111, 116, 78, 79, 84, 59, -1, 
8, 1, 111, 118, 101, 114, 108, 97, 112, 115, 79, 86, 69, 82, 76, 65, 80, 83, 81, -1, 
2, 1, 111, 114, 79, 82, 57, -1, 
7, 1, 112, 111, 108, 121, 103, 111, 110, 80, 79, 76, 89, 71, 79, 78, 42, -1, 
5, 1, 112, 111, 105, 110, 116, 80, 79, 73, 78, 84, 41, -1, 
6, 1, 114, 101, 108, 97, 116, 101, 82, 69, 76, 65, 84, 69, 73, -1, 
13, 1, 115, 116, 97, 116, 117, 116, 101, 32, 109, 105, 108, 101, 115, 83, 84, 65, 84, 85, 84, 69, 32, 77, 73, 76, 69, 83, 87, -1, 
5, 1, 115, 114, 105, 100, 61, 83, 82, 73, 68, 61, 40, -1, 
7, 1, 116, 111, 117, 99, 104, 101, 115, 84, 79, 85, 67, 72, 69, 83, 78, -1, 
6, 1, 119, 105, 116, 104, 105, 110, 87, 73, 84, 72, 73, 78, 76, -1, 
1, 0, 91, 13, -1, 
1, 0, 93, 14, -1, 
3, 1, 97, 110, 100, 65, 78, 68, 58, -1, 
3, 1, 97, 115, 99, 65, 83, 67, 55, -1, 
7, 1, 98, 101, 116, 119, 101, 101, 110, 66, 69, 84, 87, 69, 69, 78, 71, -1, 
6, 1, 98, 101, 121, 111, 110, 100, 66, 69, 89, 79, 78, 68, 75, -1, 
4, 1, 98, 98, 111, 120, 66, 66, 79, 88, 72, -1, 
8, 1, 99, 111, 110, 116, 97, 105, 110, 115, 67, 79, 78, 84, 65, 73, 78, 83, 80, -1, 
7, 1, 99, 114, 111, 115, 115, 101, 115, 67, 82, 79, 83, 83, 69, 83, 79, -1, 
8, 1, 100, 105, 115, 106, 111, 105, 110, 116, 68, 73, 83, 74, 79, 73, 78, 84, 82, -1, 
7, 1, 100, 119, 105, 116, 104, 105, 110, 68, 87, 73, 84, 72, 73, 78, 77, -1, 
4, 1, 100, 101, 115, 99, 68, 69, 83, 67, 56, -1, 
8, 1, 101, 110, 118, 101, 108, 111, 112, 101, 69, 78, 86, 69, 76, 79, 80, 69, 48, -1, 
6, 1, 101, 113, 117, 97, 108, 115, 69, 81, 85, 65, 76, 83, 74, -1, 
6, 1, 101, 120, 105, 115, 116, 115, 69, 88, 73, 83, 84, 83, 70, -1, 
4, 1, 102, 101, 101, 116, 70, 69, 69, 84, 84, -1, 
18, 1, 103, 101, 111, 109, 101, 116, 114, 121, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 71, 69, 79, 77, 69, 84, 82, 89, 67, 79, 76, 76, 69, 67, 84, 73, 79, 78, 47, -1, 
10, 1, 105, 110, 116, 101, 114, 115, 101, 99, 116, 115, 73, 78, 84, 69, 82, 83, 69, 67, 84, 83, 83, -1, 
5, 1, 105, 108, 105, 107, 101, 73, 76, 73, 75, 69, 69, -1, 
2, 1, 105, 110, 73, 78, 67, -1, 
2, 1, 105, 115, 73, 83, 66, -1, 
10, 1, 107, 105, 108, 111, 109, 101, 116, 101, 114, 115, 75, 73, 76, 79, 77, 69, 84, 69, 82, 83, 86, -1, 
10, 1, 108, 105, 110, 101, 115, 116, 114, 105, 110, 103, 76, 73, 78, 69, 83, 84, 82, 73, 78, 71, 43, -1, 
4, 1, 108, 105, 107, 101, 76, 73, 75, 69, 68, -1, 
15, 1, 109, 117, 108, 116, 105, 108, 105, 110, 101, 115, 116, 114, 105, 110, 103, 77, 85, 76, 84, 73, 76, 73, 78, 69, 83, 84, 82, 73, 78, 71, 46, -1, 
12, 1, 109, 117, 108, 116, 105, 112, 111, 108, 121, 103, 111, 110, 77, 85, 76, 84, 73, 80, 79, 76, 89, 71, 79, 78, 45, -1, 
10, 1, 109, 117, 108, 116, 105, 112, 111, 105, 110, 116, 77, 85, 76, 84, 73, 80, 79, 73, 78, 84, 44, -1, 
6, 1, 109, 101, 116, 101, 114, 115, 77, 69, 84, 69, 82, 83, 85, -1, 
14, 1, 110, 97, 117, 116, 105, 99, 97, 108, 32, 109, 105, 108, 101, 115, 78, 65, 85, 84, 73, 67, 65, 76, 32, 77, 73, 76, 69, 83, 88, -1, 
4, 1, 110, 117, 108, 108, 78, 85, 76, 76, 23, -1, 
3, 1, 110, 111, 116, 78, 79, 84, 59, -1, 
8, 1, 111, 118, 101, 114, 108, 97, 112, 115, 79, 86, 69, 82, 76, 65, 80, 83, 81, -1, 
2, 1, 111, 114, 79, 82, 57, -1, 
7, 1, 112, 111, 108, 121, 103, 111, 110, 80, 79, 76, 89, 71, 79, 78, 42, -1, 
5, 1, 112, 111, 105, 110, 116, 80, 79, 73, 78, 84, 41, -1, 
6, 1, 114, 101, 108, 97, 116, 101, 82, 69, 76, 65, 84, 69, 73, -1, 
13, 1, 115, 116, 97, 116, 117, 116, 101, 32, 109, 105, 108, 101, 115, 83, 84, 65, 84, 85, 84, 69, 32, 77, 73, 76, 69, 83, 87, -1, 
5, 1, 115, 114, 105, 100, 61, 83, 82, 73, 68, 61, 40, -1, 
7, 1, 116, 111, 117, 99, 104, 101, 115, 84, 79, 85, 67, 72, 69, 83, 78, -1, 
6, 1, 119, 105, 116, 104, 105, 110, 87, 73, 84, 72, 73, 78, 76, -1};
static void InitStringLiteralData() {
startAndSize.put(12288, new int[]{0, 1});
startAndSize.put(9, new int[]{5, 1});
startAndSize.put(10, new int[]{10, 1});
startAndSize.put(11, new int[]{15, 1});
startAndSize.put(12, new int[]{20, 1});
startAndSize.put(13, new int[]{25, 1});
startAndSize.put(32, new int[]{30, 1});
startAndSize.put(160, new int[]{35, 1});
startAndSize.put(36, new int[]{40, 1});
startAndSize.put(37, new int[]{45, 1});
startAndSize.put(8232, new int[]{50, 1});
startAndSize.put(40, new int[]{55, 1});
startAndSize.put(8233, new int[]{60, 1});
startAndSize.put(41, new int[]{65, 1});
startAndSize.put(42, new int[]{70, 1});
startAndSize.put(43, new int[]{75, 1});
startAndSize.put(44, new int[]{80, 1});
startAndSize.put(45, new int[]{85, 1});
startAndSize.put(46, new int[]{90, 1});
startAndSize.put(47, new int[]{95, 1});
startAndSize.put(58, new int[]{100, 1});
startAndSize.put(59, new int[]{105, 1});
startAndSize.put(65, new int[]{110, 2});
startAndSize.put(66, new int[]{130, 3});
startAndSize.put(67, new int[]{176, 2});
startAndSize.put(68, new int[]{214, 3});
startAndSize.put(69, new int[]{264, 3});
startAndSize.put(70, new int[]{316, 1});
startAndSize.put(71, new int[]{328, 1});
startAndSize.put(73, new int[]{368, 4});
startAndSize.put(75, new int[]{422, 1});
startAndSize.put(76, new int[]{446, 2});
startAndSize.put(77, new int[]{482, 4});
startAndSize.put(78, new int[]{584, 3});
startAndSize.put(79, new int[]{638, 2});
startAndSize.put(80, new int[]{666, 2});
startAndSize.put(82, new int[]{698, 1});
startAndSize.put(83, new int[]{714, 2});
startAndSize.put(84, new int[]{758, 1});
startAndSize.put(87, new int[]{776, 1});
startAndSize.put(91, new int[]{792, 1});
startAndSize.put(93, new int[]{797, 1});
startAndSize.put(97, new int[]{802, 2});
startAndSize.put(98, new int[]{822, 3});
startAndSize.put(99, new int[]{868, 2});
startAndSize.put(100, new int[]{906, 3});
startAndSize.put(101, new int[]{956, 3});
startAndSize.put(102, new int[]{1008, 1});
startAndSize.put(103, new int[]{1020, 1});
startAndSize.put(105, new int[]{1060, 4});
startAndSize.put(107, new int[]{1114, 1});
startAndSize.put(108, new int[]{1138, 2});
startAndSize.put(109, new int[]{1174, 4});
startAndSize.put(110, new int[]{1276, 3});
startAndSize.put(111, new int[]{1330, 2});
startAndSize.put(112, new int[]{1358, 2});
startAndSize.put(114, new int[]{1390, 1});
startAndSize.put(115, new int[]{1406, 2});
startAndSize.put(116, new int[]{1450, 1});
startAndSize.put(119, new int[]{1468, 1});
}
private static final long[][] jjCharData = {
new long[] {1, 0L, 1, 137438953504L},
new long[] {1, 0L, 1, 2251799814209536L},
new long[] {1, 0L, 1, 17592186048512L},
new long[] {1, 0L, 1, 8589934594L},
new long[] {1, 0L, 1, 274877907008L},
new long[] {1, 0L, 1, 9007199256838144L},
new long[] {1, 0L, 1, 1125899907104768L},
new long[] {1, 0L, 1, 4503599628419072L},
new long[] {1, 0L, 1, 16384L},
new long[] {1, 0L, 1, 8589934592L},
new long[] {1, 0L, 1, 16384L},
new long[] {1, 0L, 1, 144115188075855872L},
new long[] {1, 0L, 1, 4503599627370496L},
new long[] {1, 0L, 1, 2199023255552L},
new long[] {1, 0L, 1, 70368744177664L},
new long[] {1, 0L, 1, 2199023255552L},
new long[] {1, 0L, 1, 274877906944L},
new long[] {1, 0L, 1, 70368744177664L},
new long[] {1, 0L, 1, 512L},
new long[] {1, 0L, 1, 576460752303423488L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 35184372088832L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 35184372088832L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 35184372088832L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 35184372088832L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 0L, 1, 2305843009213693952L},
new long[] {1, 140737488355328L},
new long[] {1, 140737488355328L},
new long[] {1, 0L, 1, 268435456L},
new long[] {1, -140737488355329L, 1023, -1L},
new long[] {1, 140737488355328L},
new long[] {1, 549755813888L},
new long[] {1, 549755813888L},
new long[] {1, 549755813888L},
new long[] {1, -549755813889L, 1023, -1L},
new long[] {1, 549755813888L},
new long[] {1, 1974722883485696L, 1, 4503874506326080L},
new long[] {1, 1974722883485696L, 1, 4503874506326080L},
new long[] {1, 1974722883485696L, 1, 4503874506326080L},
new long[] {1, 1974722883485696L, 1, 4503874506326080L},
new long[] {1, 1974722883485696L, 1, 4503874506326080L},
new long[] {1, 1974722883485696L, 1, 4503874506326080L},
new long[] {1, 1974722883485696L, 1, 4503874506326080L},
new long[] {1, 1974722883485696L, 1, 4503874506326080L},
new long[] {1, 1974722883485696L, 1, 4503874506326080L},
new long[] {1, 2305843009213693952L},
new long[] {1, 0L, 1, 562949953552384L},
new long[] {1, 0L, 1, 137438953504L},
new long[] {1, 1152921504606846976L},
new long[] {1, 4611686018427387904L},
new long[] {1, 0L, 1, 137438953504L},
new long[] {1, 0L, 1, 70368744194048L},
new long[] {1, 2305843009213693952L},
new long[] {1, 4611686018427387904L},
new long[] {1, 0L, 1, 576460745995190270L},
new long[] {1, 287948969894477824L, 1, 576460745995190270L},
new long[] {1, 17179869184L},
new long[] {1, -17179869185L, 1023, -1L},
new long[] {1, 17179869184L},
new long[] {1, 0L, 1, 65536L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 33554432L},
new long[] {1, 0L, 1, 1048576L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 256L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 8192L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 524288L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 8192L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 8388608L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 16L},
new long[] {1, 0L, 1, 1048576L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 256L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 8192L},
new long[] {1, 287948901175001088L},
new long[] {1, 70368744177664L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 137438953504L},
new long[] {1, 43980465111040L},
new long[] {1, 287948901175001088L},
new long[] {1, 281474976710656L},
new long[] {1, 71776119061217280L},
new long[] {1, 0L, 1, 72057594054705152L},
new long[] {1, 287948901175001088L, 1, 541165879422L},
new long[] {1, 70368744177664L},
new long[] {1, 70368744177664L},
new long[] {1, 287667426198290432L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 288230376151711744L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 288230376151711744L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 70368744177664L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 35184372088832L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 35184372088832L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 35184372088832L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 35184372088832L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 1048576L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 288230376151711744L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 288230376151711744L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 70368744177664L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 288230376151711744L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 288230376151711744L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 70368744177664L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 67108864L},
new long[] {1, 43980465111040L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 288230376151711744L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 35184372088832L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 35184372088832L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 1048576L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 288230376151711744L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 288230376151711744L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 70368744177664L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 67108864L},
new long[] {1, 43980465111040L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 288230376151711744L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 43980465111040L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 287948901175001088L},
new long[] {1, 0L, 1, 17592186048512L},
new long[] {1, 0L, 1, 4503599628419072L},
new long[] {1, 0L, 1, 137438953504L},
new long[] {1, 0L, 1, 549755814016L},
new long[] {1, 0L, 1, 4503599628419072L},
new long[] {1, 0L, 1, 137438953504L},
new long[] {1, 1152921504606846976L},
new long[] {1, 4611686018427387904L},
new long[] {1, 2305843009213693952L}};
private static final int[][] jjcompositeState = {
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{4, 7, 10, 18, 19, 57, 62, 67, 76, 78, 79, 80, 82, 84, 85, 87, 90, 112, 118, 124, 129, 211, 215, 218, 221}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}};
private static final int[] jjmatchKinds = {
24, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
28, 
2147483647, 
2147483647, 
28, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
31, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
32, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
33, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
49, 
60, 
60, 
2147483647, 
61, 
62, 
63, 
2147483647, 
65, 
2147483647, 
89, 
89, 
2147483647, 
2147483647, 
90, 
92, 
2147483647, 
92, 
92, 
2147483647, 
92, 
2147483647, 
92, 
2147483647, 
92, 
2147483647, 
92, 
2147483647, 
92, 
2147483647, 
92, 
92, 
2147483647, 
92, 
2147483647, 
92, 
2147483647, 
2147483647, 
28, 
2147483647, 
2147483647, 
2147483647, 
28, 
26, 
25, 
2147483647, 
27, 
2147483647, 
2147483647, 
26, 
26, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
34, 
2147483647, 
2147483647, 
34, 
2147483647, 
34, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
35, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
36, 
2147483647, 
2147483647, 
36, 
2147483647, 
36, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
37, 
2147483647, 
2147483647, 
37, 
2147483647, 
2147483647, 
37, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
38, 
2147483647, 
2147483647, 
38, 
2147483647, 
2147483647, 
38, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
61, 
64, 
2147483647, 
62, 
65, 
2147483647, 
63, 
64};
private static final int[][] jjnextStateSet = {
new int[]{}, 
new int[]{0}, 
new int[]{1}, 
new int[]{2}, 
new int[]{3}, 
new int[]{0}, 
new int[]{5}, 
new int[]{6}, 
new int[]{}, 
new int[]{8}, 
new int[]{9}, 
new int[]{}, 
new int[]{11}, 
new int[]{12}, 
new int[]{13}, 
new int[]{14}, 
new int[]{15}, 
new int[]{16}, 
new int[]{17}, 
new int[]{20}, 
new int[]{21}, 
new int[]{22}, 
new int[]{23}, 
new int[]{24}, 
new int[]{25}, 
new int[]{26}, 
new int[]{27}, 
new int[]{28}, 
new int[]{29}, 
new int[]{30}, 
new int[]{31}, 
new int[]{32}, 
new int[]{33}, 
new int[]{34}, 
new int[]{35}, 
new int[]{36}, 
new int[]{37}, 
new int[]{38}, 
new int[]{39}, 
new int[]{40}, 
new int[]{41}, 
new int[]{42}, 
new int[]{43}, 
new int[]{44}, 
new int[]{45}, 
new int[]{46}, 
new int[]{47}, 
new int[]{48}, 
new int[]{49}, 
new int[]{50}, 
new int[]{51}, 
new int[]{52}, 
new int[]{53}, 
new int[]{54}, 
new int[]{55}, 
new int[]{56}, 
new int[]{}, 
new int[]{59, 60, 61}, 
new int[]{59, 60, 61}, 
new int[]{58}, 
new int[]{59, 60, 61}, 
new int[]{}, 
new int[]{64, 65, 66}, 
new int[]{64, 65, 66}, 
new int[]{63}, 
new int[]{64, 65, 66}, 
new int[]{}, 
new int[]{68}, 
new int[]{69}, 
new int[]{70}, 
new int[]{71}, 
new int[]{72}, 
new int[]{73}, 
new int[]{74}, 
new int[]{75}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{77}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{81}, 
new int[]{}, 
new int[]{83}, 
new int[]{86}, 
new int[]{86}, 
new int[]{88, 89}, 
new int[]{88, 89}, 
new int[]{}, 
new int[]{91, 106}, 
new int[]{92, 101, 103, 105}, 
new int[]{93, 100}, 
new int[]{94}, 
new int[]{95, 97, 99}, 
new int[]{96}, 
new int[]{97, 99}, 
new int[]{98}, 
new int[]{99}, 
new int[]{}, 
new int[]{101, 103, 105}, 
new int[]{93, 102}, 
new int[]{103, 105}, 
new int[]{93, 104}, 
new int[]{105}, 
new int[]{93}, 
new int[]{94, 107}, 
new int[]{99, 108, 110}, 
new int[]{109}, 
new int[]{99, 110}, 
new int[]{111}, 
new int[]{99}, 
new int[]{113, 114}, 
new int[]{113}, 
new int[]{114, 115}, 
new int[]{116, 117}, 
new int[]{117}, 
new int[]{117}, 
new int[]{115, 119, 120, 122, 123}, 
new int[]{119}, 
new int[]{121}, 
new int[]{121}, 
new int[]{113}, 
new int[]{114}, 
new int[]{115, 122, 123, 125, 126, 127, 128}, 
new int[]{125}, 
new int[]{122, 126}, 
new int[]{123, 127}, 
new int[]{115, 128}, 
new int[]{130, 139, 148, 168, 184}, 
new int[]{131}, 
new int[]{132}, 
new int[]{133}, 
new int[]{134}, 
new int[]{135}, 
new int[]{136}, 
new int[]{137}, 
new int[]{138}, 
new int[]{138}, 
new int[]{140}, 
new int[]{141}, 
new int[]{141, 142}, 
new int[]{143}, 
new int[]{144}, 
new int[]{145}, 
new int[]{146}, 
new int[]{147}, 
new int[]{}, 
new int[]{149}, 
new int[]{150}, 
new int[]{150, 151}, 
new int[]{152}, 
new int[]{153}, 
new int[]{154}, 
new int[]{155}, 
new int[]{156}, 
new int[]{157}, 
new int[]{158}, 
new int[]{159}, 
new int[]{160}, 
new int[]{161}, 
new int[]{162}, 
new int[]{163}, 
new int[]{164}, 
new int[]{165}, 
new int[]{166}, 
new int[]{167}, 
new int[]{167}, 
new int[]{169}, 
new int[]{170}, 
new int[]{171}, 
new int[]{172, 177, 178}, 
new int[]{173}, 
new int[]{174}, 
new int[]{175, 177, 178}, 
new int[]{176}, 
new int[]{176, 177, 178}, 
new int[]{}, 
new int[]{179}, 
new int[]{180}, 
new int[]{181, 182}, 
new int[]{182}, 
new int[]{183}, 
new int[]{}, 
new int[]{185}, 
new int[]{186}, 
new int[]{186, 187}, 
new int[]{188}, 
new int[]{189}, 
new int[]{190}, 
new int[]{191}, 
new int[]{192}, 
new int[]{193}, 
new int[]{194}, 
new int[]{195}, 
new int[]{196}, 
new int[]{197}, 
new int[]{198}, 
new int[]{199, 204, 205}, 
new int[]{200}, 
new int[]{201}, 
new int[]{202, 204, 205}, 
new int[]{203}, 
new int[]{203, 204, 205}, 
new int[]{}, 
new int[]{206}, 
new int[]{207}, 
new int[]{208, 209}, 
new int[]{209}, 
new int[]{210}, 
new int[]{}, 
new int[]{212, 213, 214}, 
new int[]{139}, 
new int[]{148}, 
new int[]{184}, 
new int[]{216, 217}, 
new int[]{}, 
new int[]{}, 
new int[]{219, 220}, 
new int[]{}, 
new int[]{}, 
new int[]{222, 223}, 
new int[]{}, 
new int[]{}};
private static final int[] jjInitStates  = {
4};
private static final int[] canMatchAnyChar = {
2147483647};
public static final String[] jjstrLiteralImages = {
null
, 
"\11", 
"\12", 
"\13", 
"\14", 
"\15", 
"\40", 
"\240", 
"\u2028", 
"\u2029", 
"\u3000", 
"\50", 
"\51", 
"\133", 
"\135", 
"\56", 
"\54", 
"\72", 
"\44", 
"\73", 
null
, 
null
, 
null
, 
"\156\165\154\154", 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
"\123\122\111\104\75", 
"\120\117\111\116\124", 
"\120\117\114\131\107\117\116", 
"\114\111\116\105\123\124\122\111\116\107", 
"\115\125\114\124\111\120\117\111\116\124", 
"\115\125\114\124\111\120\117\114\131\107\117\116", 
"\115\125\114\124\111\114\111\116\105\123\124\122\111\116\107", 
"\107\105\117\115\105\124\122\131\103\117\114\114\105\103\124\111\117\116", 
"\105\116\126\105\114\117\120\105", 
null
, 
"\53", 
"\55", 
"\52", 
"\57", 
"\45", 
"\101\123\103", 
"\104\105\123\103", 
"\117\122", 
"\101\116\104", 
"\116\117\124", 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
"\111\123", 
"\111\116", 
"\114\111\113\105", 
"\111\114\111\113\105", 
"\105\130\111\123\124\123", 
"\102\105\124\127\105\105\116", 
"\102\102\117\130", 
"\122\105\114\101\124\105", 
"\105\121\125\101\114\123", 
"\102\105\131\117\116\104", 
"\127\111\124\110\111\116", 
"\104\127\111\124\110\111\116", 
"\124\117\125\103\110\105\123", 
"\103\122\117\123\123\105\123", 
"\103\117\116\124\101\111\116\123", 
"\117\126\105\122\114\101\120\123", 
"\104\111\123\112\117\111\116\124", 
"\111\116\124\105\122\123\105\103\124\123", 
"\146\145\145\164", 
"\155\145\164\145\162\163", 
"\153\151\154\157\155\145\164\145\162\163", 
"\163\164\141\164\165\164\145\40\155\151\154\145\163", 
"\156\141\165\164\151\143\141\154\40\155\151\154\145\163", 
null
, 
null
, 
null
, 
null
, 
null
, 
null
};
private static final long[] jjtoSkip = {
2046L, 4294967296L};
private static final long[] jjtoSpecial = {
0L, 4294967296L};
private static final long[] jjtoMore = {
0L, 4294967296L};
private static final long[] jjtoToken = {
-2047L, 6442450943L};
private static final int[] jjnewLexState = {
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
void TokenLexicalActions(Token matchedToken) {
  switch(matchedToken.kind) {
    default: break;
  }
}
void SkipLexicalActions(Token matchedToken) {
  switch(jjmatchedKind) {
    default: break;
  }
  switch(jjmatchedKind) {
    default: break;
  }
}
void MoreLexicalActions() {
jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
  switch(jjmatchedKind) {
    default: break;
  }
}
static {
  InitStringLiteralData();
  InitNfaData(); } 
}
/* JavaCC - OriginalChecksum=2ab97424d90870053b701f129919e703 (do not edit this line) */
