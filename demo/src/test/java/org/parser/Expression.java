/* Generated By:JavaCC: Do not edit this line. Expression.java Version 8.0.0 */

//C++
//protected:
//  virtual void jjtreeOpenNodeScope(SimpleNode * node) = 0;
//  virtual void jjtreeCloseNodeScope(SimpleNode * node) = 0;

//JAVA
package org.parser;

public abstract class Expression/*@bgen(jjtree)*/implements ExpressionTreeConstants, ExpressionConstants /*@egen*/
{/*@bgen(jjtree)*/
  protected JJTExpressionState jjtree = new JJTExpressionState();

/*@egen*/
  protected final Node rootNode() { return jjtree.rootNode(); }
  protected void jjtreeOpenNodeScope(Node node) throws ParseException {}
  protected void jjtreeCloseNodeScope(Node node) throws ParseException {}

  
 
 
 
 
 
/*****************************************
 *         LITERAL GRAMMAR               *
 *****************************************/                                            
  final public void parseNull() throws ParseException {

    SimpleNode jjtn001 = new SimpleNode(JJTNIL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
    try {
      jj_consume_token(NULL_TOKEN);
    } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
    }
}

  
 
 
  final public void parseBool() throws ParseException {

    SimpleNode jjtn001 = new SimpleNode(JJTBOOL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
    try {
      jj_consume_token(BOOL_TOKEN);
    } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
    }
}

  
 
 
  final public void parseUuid() throws ParseException {

    SimpleNode jjtn001 = new SimpleNode(JJTUUID);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
    try {
      jj_consume_token(UUID_TOKEN);
    } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
    }
}

  
 
 
  final public void parseRegExp() throws ParseException {

    SimpleNode jjtn001 = new SimpleNode(JJTREGEXP);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
    try {
      jj_consume_token(REGEXP_TOKEN);
    } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
    }
}

  
 
 
  final public void parseString() throws ParseException {

    SimpleNode jjtn001 = new SimpleNode(JJTSTRING);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
    try {
      jj_consume_token(STRING_TOKEN);
    } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
    }
}

  
 
 
  final public void parseInteger() throws ParseException {
    switch (jj_nt.kind) {
    case OCTAL_TOKEN:{

    SimpleNode jjtn001 = new SimpleNode(JJTOCTAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        jj_consume_token(OCTAL_TOKEN);
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    case INTEGER_TOKEN:{

    SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);



                                 
  
      try {
        jj_consume_token(INTEGER_TOKEN);
      } finally {

    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }





     
  
      }
      break;
      }
    case HEXADECIMAL_TOKEN:{

    SimpleNode jjtn003 = new SimpleNode(JJTHEXADECIMAL);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);



                                 
  
      try {
        jj_consume_token(HEXADECIMAL_TOKEN);
      } finally {

    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn003);
      }
    }





     
  
      }
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
  final public void parseDecimal() throws ParseException {

    SimpleNode jjtn001 = new SimpleNode(JJTDECIMAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
    try {
      jj_consume_token(DECIMAL_TOKEN);
    } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
    }
}

  
 
 
  final public void parseNumber() throws ParseException {
    switch (jj_nt.kind) {
    case OCTAL_TOKEN:
    case INTEGER_TOKEN:
    case HEXADECIMAL_TOKEN:{
      parseInteger();
      break;
      }
    case DECIMAL_TOKEN:{
      parseDecimal();
      break;
      }
    case ADD:{
      jj_consume_token(ADD);
      switch (jj_nt.kind) {
      case OCTAL_TOKEN:
      case INTEGER_TOKEN:
      case HEXADECIMAL_TOKEN:{
        parseInteger();
        break;
        }
      case DECIMAL_TOKEN:{
        parseDecimal();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
      switch (jj_nt.kind) {
      case OCTAL_TOKEN:
      case INTEGER_TOKEN:
      case HEXADECIMAL_TOKEN:{

             SimpleNode jjtn001 = new SimpleNode(JJTNEGATIVE_INTEGER);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);



                                          
           
        try {
          parseInteger();
        } catch (Throwable jjte001) {                    
                      
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        
        
        
        
        
        
        
        
        
        
        
        
                                          
                   
        } finally {

             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               if (jjtree.nodeCreated()) {
                jjtreeCloseNodeScope(jjtn001);
               }
             }





              
           
        }
        break;
        }
      case DECIMAL_TOKEN:{

                                                SimpleNode jjtn002 = new SimpleNode(JJTNEGATIVE_NUMBER);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
                                                jjtreeOpenNodeScope(jjtn002);



                                                                             
                                              
        try {
          parseDecimal();
        } catch (Throwable jjte002) {                    
                                                         
                                                        if (jjtc002) {
                                                          jjtree.clearNodeScope(jjtn002);
                                                          jjtc002 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte002 instanceof RuntimeException) {
                                                          {if (true) throw (RuntimeException)jjte002;}
                                                        }
                                                        if (jjte002 instanceof ParseException) {
                                                          {if (true) throw (ParseException)jjte002;}
                                                        }
                                                        {if (true) throw (Error)jjte002;}
        
        
        
        
        
        
        
        
        
        
        
        
                                                                             
                                                      
        } finally {

                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002, true);
                                                  if (jjtree.nodeCreated()) {
                                                   jjtreeCloseNodeScope(jjtn002);
                                                  }
                                                }





                                                 
                                              
        }
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
  final public void parseTemporal() throws ParseException {
    switch (jj_nt.kind) {
    case LOCALTIME_TOKEN:{

    SimpleNode jjtn001 = new SimpleNode(JJTLOCALTIME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        jj_consume_token(LOCALTIME_TOKEN);
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    case LOCALDATE_TOKEN:{

    SimpleNode jjtn002 = new SimpleNode(JJTLOCALDATE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);



                                 
  
      try {
        jj_consume_token(LOCALDATE_TOKEN);
      } finally {

    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }





     
  
      }
      break;
      }
    case LOCALDATETIME_TOKEN:{

    SimpleNode jjtn003 = new SimpleNode(JJTLOCALDATETIME);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);



                                 
  
      try {
        jj_consume_token(LOCALDATETIME_TOKEN);
      } finally {

    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn003);
      }
    }





     
  
      }
      break;
      }
    case OFFSETTIME_TOKEN:{

    SimpleNode jjtn004 = new SimpleNode(JJTOFFSETTIME);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);



                                 
  
      try {
        jj_consume_token(OFFSETTIME_TOKEN);
      } finally {

    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn004);
      }
    }





     
  
      }
      break;
      }
    case OFFSETDATETIME_TOKEN:{

    SimpleNode jjtn005 = new SimpleNode(JJTOFFSETDATETIME);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);



                                 
  
      try {
        jj_consume_token(OFFSETDATETIME_TOKEN);
      } finally {

    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn005);
      }
    }





     
  
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
  final public void parseGeometry() throws ParseException {
    switch (jj_nt.kind) {
    case POINT_TOKEN:{
      jj_consume_token(POINT_TOKEN);
      parsePoint();
      break;
      }
    case POLYGON_TOKEN:{
      jj_consume_token(POLYGON_TOKEN);
      parsePolygon();
      break;
      }
    case LINESTRING_TOKEN:{
      jj_consume_token(LINESTRING_TOKEN);
      parseLineString();
      break;
      }
    case MULTIPOINT_TOKEN:{
      jj_consume_token(MULTIPOINT_TOKEN);
      parseMultiPoint();
      break;
      }
    case MULTIPOLYGON_TOKEN:{
      jj_consume_token(MULTIPOLYGON_TOKEN);
      parseMultiPolygon();
      break;
      }
    case MULTILINESTRING_TOKEN:{
      jj_consume_token(MULTILINESTRING_TOKEN);
      parseMultiLineString();
      break;
      }
    case GEOMETRYCOLLECTION_TOKEN:{
      jj_consume_token(GEOMETRYCOLLECTION_TOKEN);
      parseGeometryCollection();
      break;
      }
    case ENVELOPE_TOKEN:{
      jj_consume_token(ENVELOPE_TOKEN);
      parseEnvelope();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
  final public void parseEWKT() throws ParseException {/*@bgen(jjtree) EWKT */
  SimpleNode jjtn000 = new SimpleNode(JJTEWKT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      jj_consume_token(SRID_TOKEN);
      parseNumber();
      jj_consume_token(SEMICOLON);
      parseGeometry();
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
  final public void parseCoordinate() throws ParseException {/*@bgen(jjtree) COORDINATE */
  SimpleNode jjtn000 = new SimpleNode(JJTCOORDINATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseNumber();
      label_1:
      while (true) {
        parseNumber();
        switch (jj_nt.kind) {
        case OCTAL_TOKEN:
        case INTEGER_TOKEN:
        case HEXADECIMAL_TOKEN:
        case DECIMAL_TOKEN:
        case ADD:
        case SUB:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_1;
        }
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
  final public void parseCoordinateArray() throws ParseException {/*@bgen(jjtree) COORDINATEARRAY */
  SimpleNode jjtn000 = new SimpleNode(JJTCOORDINATEARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      jj_consume_token(LP);
      parseCoordinate();
      label_2:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        parseCoordinate();
      }
      jj_consume_token(RP);
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
  final public void parsePoint() throws ParseException {/*@bgen(jjtree) POINT */
  SimpleNode jjtn000 = new SimpleNode(JJTPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      switch (jj_nt.kind) {
      case LP:{
        jj_consume_token(LP);
        parseCoordinate();
        jj_consume_token(RP);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
  final public void parsePointCoordinate() throws ParseException {
    switch (jj_nt.kind) {
    case OCTAL_TOKEN:
    case INTEGER_TOKEN:
    case HEXADECIMAL_TOKEN:
    case DECIMAL_TOKEN:
    case ADD:
    case SUB:{

    SimpleNode jjtn001 = new SimpleNode(JJTPOINT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        parseCoordinate();
      } catch (Throwable jjte001) {                    
           
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      
      
      
      
      
      
      
      
      
      
      
      
                               
        
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      parsePoint();
    }
}

  
 
  final public void parseLineString() throws ParseException {/*@bgen(jjtree) LINESTRING */
  SimpleNode jjtn000 = new SimpleNode(JJTLINESTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      switch (jj_nt.kind) {
      case LP:{
        parseCoordinateArray();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
  final public void parsePolygon() throws ParseException {/*@bgen(jjtree) POLYGON */
  SimpleNode jjtn000 = new SimpleNode(JJTPOLYGON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      switch (jj_nt.kind) {
      case LP:{
        jj_consume_token(LP);
        parseCoordinateArray();
        label_3:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          parseCoordinateArray();
        }
        jj_consume_token(RP);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
  final public void parseMultiPoint() throws ParseException {/*@bgen(jjtree) MULTIPOINT */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      switch (jj_nt.kind) {
      case LP:{
        jj_consume_token(LP);
        parsePointCoordinate();
        label_4:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          parsePointCoordinate();
        }
        jj_consume_token(RP);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
  final public void parseMultiLineString() throws ParseException {/*@bgen(jjtree) MULTILINESTRING */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTILINESTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      switch (jj_nt.kind) {
      case LP:{
        jj_consume_token(LP);
        parseLineString();
        label_5:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          parseLineString();
        }
        jj_consume_token(RP);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
  final public void parseMultiPolygon() throws ParseException {/*@bgen(jjtree) MULTIPOLYGON */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPOLYGON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      switch (jj_nt.kind) {
      case LP:{
        jj_consume_token(LP);
        parsePolygon();
        label_6:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          parsePolygon();
        }
        jj_consume_token(RP);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
  final public void parseGeometryCollection() throws ParseException {/*@bgen(jjtree) GEOMETRYCOLLECTION */
  SimpleNode jjtn000 = new SimpleNode(JJTGEOMETRYCOLLECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      switch (jj_nt.kind) {
      case LP:{
        jj_consume_token(LP);
        parseGeometry();
        label_7:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          parseGeometry();
        }
        jj_consume_token(RP);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
  final public void parseEnvelope() throws ParseException {/*@bgen(jjtree) ENVELOPE */
  SimpleNode jjtn000 = new SimpleNode(JJTENVELOPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      switch (jj_nt.kind) {
      case LP:{
        jj_consume_token(LP);
        parseNumber();
        jj_consume_token(COMMA);
        parseNumber();
        jj_consume_token(COMMA);
        parseNumber();
        jj_consume_token(COMMA);
        parseNumber();
        jj_consume_token(RP);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
  final public void parseIdentifier() throws ParseException {
    switch (jj_nt.kind) {
    case IDENTIFIER_TOKEN:{

    SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        jj_consume_token(IDENTIFIER_TOKEN);
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    case IDENTIFIER_QUOTED_TOKEN:{

    SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFIER_QUOTED);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);



                                 
  
      try {
        jj_consume_token(IDENTIFIER_QUOTED_TOKEN);
      } finally {

    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }





     
  
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
  final public void parseDE9IM() throws ParseException {

    SimpleNode jjtn001 = new SimpleNode(JJTDE9IM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
    try {
      jj_consume_token(DE9IM);
    } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
    }
}

  
 
  final public void parseDistanceUnits() throws ParseException {/*@bgen(jjtree) LENGTH_UNITS */
  SimpleNode jjtn000 = new SimpleNode(JJTLENGTH_UNITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      switch (jj_nt.kind) {
      case FEET:{
        jj_consume_token(FEET);
        break;
        }
      case METERS:{
        jj_consume_token(METERS);
        break;
        }
      case KILOMETERS:{
        jj_consume_token(KILOMETERS);
        break;
        }
      case STATUTE_MILES:{
        jj_consume_token(STATUTE_MILES);
        break;
        }
      case NAUTICAL_MILES:{
        jj_consume_token(NAUTICAL_MILES);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*****************************************
 *       NAME GRAMMAR                    *
 *****************************************/                                            
  final public void compileName() throws ParseException {
    parseName();
    jj_consume_token(0);
}

  
 
 
/*
 * Name ::=
 *		  <LocalName> ("." <Name> | "[" <Identifier> "]" ("." <Name>) ? ) ?
 */    
  final public void parseName() throws ParseException {/*@bgen(jjtree) NAME */
  SimpleNode jjtn000 = new SimpleNode(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseLocalName();
      switch (jj_nt.kind) {
      case LSP:
      case DOT:{
        switch (jj_nt.kind) {
        case DOT:{
          jj_consume_token(DOT);
          parseName();
          break;
          }
        case LSP:{
          jj_consume_token(LSP);

              SimpleNode jjtn001 = new SimpleNode(JJTCLASSIFIER);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);



                                           
            
          try {
            parseIdentifier();
          } catch (Throwable jjte001) {                    
                         
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
          
          
          
          
          
          
          
          
          
          
          
          
                                             
                      
          } finally {

              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn001);
                }
              }





               
            
          }
          jj_consume_token(RSP);
          switch (jj_nt.kind) {
          case DOT:{
            jj_consume_token(DOT);
            parseName();
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * LocalName ::=
 *		  <Identifier>
 */    
  final public void parseLocalName() throws ParseException {/*@bgen(jjtree) LOCALNAME */
  SimpleNode jjtn000 = new SimpleNode(JJTLOCALNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseIdentifier();
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
 
 
/*****************************************
 *       EXPRESSION GRAMMAR              *
 *****************************************/                                            
  final public void compileExpression() throws ParseException {
    parseExpressionList();
    jj_consume_token(0);
}

  
 
 
/*
 * ExpressionList ::=
 *		  <Expression> ("," <Expression>)*
 */    
  final public void parseExpressionList() throws ParseException {/*@bgen(jjtree) EXPRESSIONLIST */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseFilter();
      label_8:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        parseFilter();
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * Expression ::=
 *		  <MultiplicativeExpression> ("+" <MultiplicativeExpression>)*
 *      | <MultiplicativeExpression> ("-" <MultiplicativeExpression>)*
 */    
  final public void parseExpression() throws ParseException {/*@bgen(jjtree) BINARYEXPRESSION */
  SimpleNode jjtn000 = new SimpleNode(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseMultiplicativeExpression();
      label_9:
      while (true) {
        switch (jj_nt.kind) {
        case ADD:
        case SUB:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_9;
        }
        switch (jj_nt.kind) {
        case ADD:{
          jj_consume_token(ADD);

              SimpleNode jjtn001 = new SimpleNode(JJTADDITION);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);



                                           
            
          try {
            parseMultiplicativeExpression();
          } catch (Throwable jjte001) {                    
                         
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
          
          
          
          
          
          
          
          
          
          
          
          
                                             
                      
          } finally {

              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn001);
                }
              }





               
            
          }
          break;
          }
        case SUB:{
          jj_consume_token(SUB);

              SimpleNode jjtn002 = new SimpleNode(JJTSUBTRACTION);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);



                                           
            
          try {
            parseMultiplicativeExpression();
          } catch (Throwable jjte002) {                    
                         
                        if (jjtc002) {
                          jjtree.clearNodeScope(jjtn002);
                          jjtc002 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte002;}
                        }
                        if (jjte002 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte002;}
                        }
                        {if (true) throw (Error)jjte002;}
          
          
          
          
          
          
          
          
          
          
          
          
                                             
                      
          } finally {

              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn002);
                }
              }





               
            
          }
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * MultiplicativeExpression ::=
 *		  <UnaryExpression> ("*" <UnaryExpression>)*
 *		| <UnaryExpression> ("/" <UnaryExpression>)*
 *		| <UnaryExpression> ("%" <UnaryExpression>)*
 */    
  final public void parseMultiplicativeExpression() throws ParseException {/*@bgen(jjtree) BinaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseUnaryExpression();
      label_10:
      while (true) {
        switch (jj_nt.kind) {
        case MUL:
        case DIV:
        case MOD:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_10;
        }
        switch (jj_nt.kind) {
        case MUL:{
          jj_consume_token(MUL);

              SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLICATION);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);



                                           
            
          try {
            parseUnaryExpression();
          } catch (Throwable jjte001) {                    
                         
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
          
          
          
          
          
          
          
          
          
          
          
          
                                             
                      
          } finally {

              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn001);
                }
              }





               
            
          }
          break;
          }
        case DIV:{
          jj_consume_token(DIV);

              SimpleNode jjtn002 = new SimpleNode(JJTDIVISION);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);



                                           
            
          try {
            parseUnaryExpression();
          } catch (Throwable jjte002) {                    
                         
                        if (jjtc002) {
                          jjtree.clearNodeScope(jjtn002);
                          jjtc002 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte002;}
                        }
                        if (jjte002 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte002;}
                        }
                        {if (true) throw (Error)jjte002;}
          
          
          
          
          
          
          
          
          
          
          
          
                                             
                      
          } finally {

              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn002);
                }
              }





               
            
          }
          break;
          }
        case MOD:{
          jj_consume_token(MOD);

              SimpleNode jjtn003 = new SimpleNode(JJTMODULO);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
              jjtreeOpenNodeScope(jjtn003);



                                           
            
          try {
            parseUnaryExpression();
          } catch (Throwable jjte003) {                    
                         
                        if (jjtc003) {
                          jjtree.clearNodeScope(jjtn003);
                          jjtc003 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte003 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte003;}
                        }
                        if (jjte003 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte003;}
                        }
                        {if (true) throw (Error)jjte003;}
          
          
          
          
          
          
          
          
          
          
          
          
                                             
                      
          } finally {

              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn003);
                }
              }





               
            
          }
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * UnaryExpression ::=
 *		  <NULL_LITERAL>
 *		| <Literal>
 *		| <NamedExpression>
 *		| "(" <Expression> ")"
 */    
  final public void parseUnaryExpression() throws ParseException {
    switch (jj_nt.kind) {
    case NULL_TOKEN:{
      parseNull();
      break;
      }
    case OCTAL_TOKEN:
    case INTEGER_TOKEN:
    case HEXADECIMAL_TOKEN:
    case DECIMAL_TOKEN:
    case UUID_TOKEN:
    case STRING_TOKEN:
    case LOCALTIME_TOKEN:
    case LOCALDATE_TOKEN:
    case LOCALDATETIME_TOKEN:
    case OFFSETTIME_TOKEN:
    case OFFSETDATETIME_TOKEN:
    case SRID_TOKEN:
    case POINT_TOKEN:
    case POLYGON_TOKEN:
    case LINESTRING_TOKEN:
    case MULTIPOINT_TOKEN:
    case MULTIPOLYGON_TOKEN:
    case MULTILINESTRING_TOKEN:
    case GEOMETRYCOLLECTION_TOKEN:
    case ENVELOPE_TOKEN:
    case ADD:
    case SUB:{
      parseLiteral();
      break;
      }
    case COLON:
    case DOLLAR:
    case IDENTIFIER_TOKEN:
    case IDENTIFIER_QUOTED_TOKEN:{
      parseNamedExpression();
      break;
      }
    case LP:{
      jj_consume_token(LP);
      parseFilter();
      jj_consume_token(RP);
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*
 * Literal ::=
 *		  <UUID_LITERAL>
 *		| <NUMBER_LITERAL>
 *		| <STRING_LITERAL>
 *		| <TEMPORAL_LITERAL>
 *		| <GEOMETRY_LITERAL>
 */    
  final public void parseLiteral() throws ParseException {/*@bgen(jjtree) LITERAL */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      switch (jj_nt.kind) {
      case UUID_TOKEN:{
        parseUuid();
        break;
        }
      case OCTAL_TOKEN:
      case INTEGER_TOKEN:
      case HEXADECIMAL_TOKEN:
      case DECIMAL_TOKEN:
      case ADD:
      case SUB:{
        parseNumber();
        break;
        }
      case STRING_TOKEN:{
        parseString();
        break;
        }
      case LOCALTIME_TOKEN:
      case LOCALDATE_TOKEN:
      case LOCALDATETIME_TOKEN:
      case OFFSETTIME_TOKEN:
      case OFFSETDATETIME_TOKEN:{
        parseTemporal();
        break;
        }
      case POINT_TOKEN:
      case POLYGON_TOKEN:
      case LINESTRING_TOKEN:
      case MULTIPOINT_TOKEN:
      case MULTIPOLYGON_TOKEN:
      case MULTILINESTRING_TOKEN:
      case GEOMETRYCOLLECTION_TOKEN:
      case ENVELOPE_TOKEN:{
        parseGeometry();
        break;
        }
      case SRID_TOKEN:{
        parseEWKT();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * NamedExpression ::=
 *		  <Binding>
 *		| <Parameter>
 *		| <Attribute>
 *		| <Function>
 */    
  final public void parseNamedExpression() throws ParseException {
    switch (jj_nt.kind) {
    case COLON:{
      parseBinding();
      break;
      }
    case DOLLAR:{
      parseParameter();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      if (jj_2_1(2147483647)) {
        parseFunction();
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER_TOKEN:
        case IDENTIFIER_QUOTED_TOKEN:{
          parseAttribute();
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  
 
 
/*
 * Parameter ::=
 *		  "$" <Identifier>
 * 		| "$" <INTEGER_LITERAL>
 */    
  final public void parseParameter() throws ParseException {
    jj_consume_token(DOLLAR);
    switch (jj_nt.kind) {
    case IDENTIFIER_TOKEN:
    case IDENTIFIER_QUOTED_TOKEN:{

      SimpleNode jjtn001 = new SimpleNode(JJTPARAMETER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);



                                   
    
      try {
        parseIdentifier();
      } catch (Throwable jjte001) {                    
             
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      
      
      
      
      
      
      
      
      
      
      
      
                                 
          
      } finally {

      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn001);
        }
      }





       
    
      }
      break;
      }
    case OCTAL_TOKEN:
    case INTEGER_TOKEN:
    case HEXADECIMAL_TOKEN:{

      SimpleNode jjtn002 = new SimpleNode(JJTPARAMETERINDEX);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);



                                   
    
      try {
        parseInteger();
      } catch (Throwable jjte002) {                    
             
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
      
      
      
      
      
      
      
      
      
      
      
      
                                 
          
      } finally {

      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn002);
        }
      }





       
    
      }
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*
 * Binding ::=
*		  ":" <Name>
 */    
  final public void parseBinding() throws ParseException {/*@bgen(jjtree) BINDING */
  SimpleNode jjtn000 = new SimpleNode(JJTBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      jj_consume_token(COLON);
      parseName();
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * Attribute ::=
 *		  <Name>
 */    
  final public void parseAttribute() throws ParseException {/*@bgen(jjtree) ATTRIBUTE */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseName();
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * Function ::=
 *		  <Name> "(" <ExpressionList> ")"
 */    
  final public void parseFunction() throws ParseException {/*@bgen(jjtree) FUNCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseName();
      jj_consume_token(LP);
      switch (jj_nt.kind) {
      case LP:
      case COLON:
      case DOLLAR:
      case NULL_TOKEN:
      case BOOL_TOKEN:
      case OCTAL_TOKEN:
      case INTEGER_TOKEN:
      case HEXADECIMAL_TOKEN:
      case DECIMAL_TOKEN:
      case UUID_TOKEN:
      case STRING_TOKEN:
      case LOCALTIME_TOKEN:
      case LOCALDATE_TOKEN:
      case LOCALDATETIME_TOKEN:
      case OFFSETTIME_TOKEN:
      case OFFSETDATETIME_TOKEN:
      case SRID_TOKEN:
      case POINT_TOKEN:
      case POLYGON_TOKEN:
      case LINESTRING_TOKEN:
      case MULTIPOINT_TOKEN:
      case MULTIPOLYGON_TOKEN:
      case MULTILINESTRING_TOKEN:
      case GEOMETRYCOLLECTION_TOKEN:
      case ENVELOPE_TOKEN:
      case ADD:
      case SUB:
      case NOT:
      case BBOX:
      case RELATE:
      case EQUALS:
      case BEYOND:
      case WITHIN:
      case DWITHIN:
      case TOUCHES:
      case CROSSES:
      case CONTAINS:
      case OVERLAPS:
      case DISJOINT:
      case INTERSECTS:
      case IDENTIFIER_TOKEN:
      case IDENTIFIER_QUOTED_TOKEN:{
        parseExpressionList();
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(RP);
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
 
 
 
/*****************************************
 *          FILTER GRAMMAR               *
 *****************************************/                                            
  final public void compileFilter() throws ParseException {
    parseFilter();
    jj_consume_token(0);
}

  
 
 
/*
 * Filter ::=
 *		  <AndFilter> ( "OR" <AndFilter> )*
 */    
  final public void parseFilter() throws ParseException {/*@bgen(jjtree) OR */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseAndFilter();
      label_11:
      while (true) {
        switch (jj_nt.kind) {
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          break label_11;
        }
        jj_consume_token(OR);
        parseAndFilter();
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * AndFilter ::=
 *		  <Predicate> ( "AND" <Predicate> )*
 */    
  final public void parseAndFilter() throws ParseException {/*@bgen(jjtree) AND */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseNotFilter();
      label_12:
      while (true) {
        switch (jj_nt.kind) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_12;
        }
        jj_consume_token(AND);
        parseNotFilter();
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * NotFilter ::=
 *		  "NOT" <Predicate>
 *		|  <Predicate>
 */    
  final public void parseNotFilter() throws ParseException {
    switch (jj_nt.kind) {
    case NOT:{
      jj_consume_token(NOT);

            SimpleNode jjtn001 = new SimpleNode(JJTNOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);



                                         
          
      try {
        parsePredicate();
      } catch (Throwable jjte001) {                    
                   
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      
      
      
      
      
      
      
      
      
      
      
      
                                       
                
      } finally {

            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn001);
              }
            }





             
          
      }
      break;
      }
    case LP:
    case COLON:
    case DOLLAR:
    case NULL_TOKEN:
    case BOOL_TOKEN:
    case OCTAL_TOKEN:
    case INTEGER_TOKEN:
    case HEXADECIMAL_TOKEN:
    case DECIMAL_TOKEN:
    case UUID_TOKEN:
    case STRING_TOKEN:
    case LOCALTIME_TOKEN:
    case LOCALDATE_TOKEN:
    case LOCALDATETIME_TOKEN:
    case OFFSETTIME_TOKEN:
    case OFFSETDATETIME_TOKEN:
    case SRID_TOKEN:
    case POINT_TOKEN:
    case POLYGON_TOKEN:
    case LINESTRING_TOKEN:
    case MULTIPOINT_TOKEN:
    case MULTIPOLYGON_TOKEN:
    case MULTILINESTRING_TOKEN:
    case GEOMETRYCOLLECTION_TOKEN:
    case ENVELOPE_TOKEN:
    case ADD:
    case SUB:
    case BBOX:
    case RELATE:
    case EQUALS:
    case BEYOND:
    case WITHIN:
    case DWITHIN:
    case TOUCHES:
    case CROSSES:
    case CONTAINS:
    case OVERLAPS:
    case DISJOINT:
    case INTERSECTS:
    case IDENTIFIER_TOKEN:
    case IDENTIFIER_QUOTED_TOKEN:{
      parsePredicate();
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*
 * Predicate ::=
 *		  "(" <Filter> ")"
 *		| <BOOL_LITERAL>
 *		| <SpatialPredicate>
 *		| <ExistsPredicate>
 *		| <RelationalPredicate>
 */    
  final public void parsePredicate() throws ParseException {
    switch (jj_nt.kind) {
    case BOOL_TOKEN:{
      parseBool();
      break;
      }
    case BBOX:
    case RELATE:
    case EQUALS:
    case BEYOND:
    case WITHIN:
    case DWITHIN:
    case TOUCHES:
    case CROSSES:
    case CONTAINS:
    case OVERLAPS:
    case DISJOINT:
    case INTERSECTS:{

    SimpleNode jjtn001 = new SimpleNode(JJTSPATIAL_PREDICATE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        parseSpatialPredicate();
      } catch (Throwable jjte001) {                    
           
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      
      
      
      
      
      
      
      
      
      
      
      
                               
        
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      if (jj_2_2(2147483647)) {

                                      SimpleNode jjtn002 = new SimpleNode(JJTEXISTS);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                      jjtreeOpenNodeScope(jjtn002);



                                                                   
                                    
        try {
          parseExistsPredicate();
        } catch (Throwable jjte002) {                    
                                               
                                              if (jjtc002) {
                                                jjtree.clearNodeScope(jjtn002);
                                                jjtc002 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte002 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte002;}
                                              }
                                              if (jjte002 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte002;}
                                              }
                                              {if (true) throw (Error)jjte002;}
        
        
        
        
        
        
        
        
        
        
        
        
                                                                   
                                            
        } finally {

                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002, true);
                                        if (jjtree.nodeCreated()) {
                                         jjtreeCloseNodeScope(jjtn002);
                                        }
                                      }





                                       
                                    
        }
      } else if (jj_2_3(2147483647)) {
        parseRelationalPredicate();
      } else {
        switch (jj_nt.kind) {
        case LP:
        case COLON:
        case DOLLAR:
        case NULL_TOKEN:
        case OCTAL_TOKEN:
        case INTEGER_TOKEN:
        case HEXADECIMAL_TOKEN:
        case DECIMAL_TOKEN:
        case UUID_TOKEN:
        case STRING_TOKEN:
        case LOCALTIME_TOKEN:
        case LOCALDATE_TOKEN:
        case LOCALDATETIME_TOKEN:
        case OFFSETTIME_TOKEN:
        case OFFSETDATETIME_TOKEN:
        case SRID_TOKEN:
        case POINT_TOKEN:
        case POLYGON_TOKEN:
        case LINESTRING_TOKEN:
        case MULTIPOINT_TOKEN:
        case MULTIPOLYGON_TOKEN:
        case MULTILINESTRING_TOKEN:
        case GEOMETRYCOLLECTION_TOKEN:
        case ENVELOPE_TOKEN:
        case ADD:
        case SUB:
        case IDENTIFIER_TOKEN:
        case IDENTIFIER_QUOTED_TOKEN:{
          parseExpression();
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  
 
 
/*
 * ExistsPredicate ::=
 *		  <NamedExpression> <ExistsOperator>
 */    
  final public void parseExistsPredicate() throws ParseException {
    parseNamedExpression();
    parseExistsOperator();
}

  
 
 
/*
 * ExistsOperator ::=
 *		  <NamedExpression> "EXISTS"
 *		  <NamedExpression> "NOT" "EXISTS"
 */    
  final public void parseExistsOperator() throws ParseException {
    switch (jj_nt.kind) {
    case EXISTS:{

    SimpleNode jjtn001 = new SimpleNode(JJTEXISTS_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        jj_consume_token(EXISTS);
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    case NOT:{
      jj_consume_token(NOT);

            SimpleNode jjtn002 = new SimpleNode(JJTNOTEXISTS_OPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);



                                         
          
      try {
        jj_consume_token(EXISTS);
      } finally {

            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn002);
              }
            }





             
          
      }
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*
 * RelationalPredicate ::=
 *		  <Expression> <ExpressionPredicatePart>
 */    
  final public void parseRelationalPredicate() throws ParseException {/*@bgen(jjtree) RELATIONAL_PREDICATE */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONAL_PREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseExpression();
      parseRelationalPredicatePart();
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * RelationalPredicatePart ::=
 *		  <IsNullPredicate> 
 *		| <ComparisionPredicate> 
 *		| <LikePredicate> 
 *		| <BetweenPredicate> 
 *		| <InPredicate> 
 */    
  final public void parseRelationalPredicatePart() throws ParseException {
    switch (jj_nt.kind) {
    case IS:{
      parseIsNullPredicate();
      break;
      }
    case EQ:
    case LT:
    case GT:
    case NEQ:
    case LTE:
    case GTE:{
      parseComparisionPredicate();
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      if (jj_2_4(2147483647)) {
        parseLikePredicate();
      } else if (jj_2_5(2147483647)) {
        parseBetweenPredicate();
      } else {
        switch (jj_nt.kind) {
        case NOT:
        case IN:{
          parseInPredicate();
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  
 
 
/*
 * ComparisionPredicate ::=
 *		  <ComparisionOperator> <Expression>
 */    
  final public void parseComparisionPredicate() throws ParseException {
    parseComparisionOperator();
    parseExpression();
}

  
 
 
/*
 * ComparisionOperator ::=
 *		  "=" | "<>" | "<" | "<=" | ">=" | ">"
 */    
  final public void parseComparisionOperator() throws ParseException {
    switch (jj_nt.kind) {
    case EQ:{

    SimpleNode jjtn001 = new SimpleNode(JJTEQUAL_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        jj_consume_token(EQ);
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    case NEQ:{

    SimpleNode jjtn002 = new SimpleNode(JJTNOTEQUAL_OPERATOR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);



                                 
  
      try {
        jj_consume_token(NEQ);
      } finally {

    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }





     
  
      }
      break;
      }
    case LT:{

    SimpleNode jjtn003 = new SimpleNode(JJTLESS_OPERATOR);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);



                                 
  
      try {
        jj_consume_token(LT);
      } finally {

    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn003);
      }
    }





     
  
      }
      break;
      }
    case LTE:{

    SimpleNode jjtn004 = new SimpleNode(JJTLESSEQUAL_OPERATOR);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);



                                 
  
      try {
        jj_consume_token(LTE);
      } finally {

    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn004);
      }
    }





     
  
      }
      break;
      }
    case GT:{

    SimpleNode jjtn005 = new SimpleNode(JJTGREATER_OPERATOR);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);



                                 
  
      try {
        jj_consume_token(GT);
      } finally {

    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn005);
      }
    }





     
  
      }
      break;
      }
    case GTE:{

    SimpleNode jjtn006 = new SimpleNode(JJTGREATEREQUAL_OPERATOR);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtreeOpenNodeScope(jjtn006);



                                 
  
      try {
        jj_consume_token(GTE);
      } finally {

    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn006);
      }
    }





     
  
      }
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*
 * IsNullPredicate ::=
 *		  "IS" <IsNullOperator>
 */    
  final public void parseIsNullPredicate() throws ParseException {
    jj_consume_token(IS);
    parseIsNullOperator();
}

  
 
 
/*
 * IsNullOperator ::=
 *		  "IS" "NULL"
 *		| "IS" "NOT" "NULL"
 */    
  final public void parseIsNullOperator() throws ParseException {
    switch (jj_nt.kind) {
    case NULL_TOKEN:{

    SimpleNode jjtn001 = new SimpleNode(JJTISNULL_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        jj_consume_token(NULL_TOKEN);
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    case NOT:{
      jj_consume_token(NOT);

            SimpleNode jjtn002 = new SimpleNode(JJTISNOTNULL_OPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);



                                         
          
      try {
        jj_consume_token(NULL_TOKEN);
      } finally {

            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn002);
              }
            }





             
          
      }
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*
 * LikePredicate ::=
 *		  <LikeOperator> <LikePattern>
 */    
  final public void parseLikePredicate() throws ParseException {
    parseLikeOperator();
    parseLikePattern();
}

  
 
 
/*
 * LikeOperator ::=
 *		  "LIKE" 
 *		  "ILIKE" 
 *		  "NOT" "LIKE" 
 *		  "NOT" "ILIKE" 
 */    
  final public void parseLikeOperator() throws ParseException {
    switch (jj_nt.kind) {
    case ILIKE:{

    SimpleNode jjtn001 = new SimpleNode(JJTILIKE_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        jj_consume_token(ILIKE);
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    case LIKE:{

    SimpleNode jjtn002 = new SimpleNode(JJTLIKE_OPERATOR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);



                                 
  
      try {
        jj_consume_token(LIKE);
      } finally {

    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }





     
  
      }
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      if (jj_2_6(2)) {
        jj_consume_token(NOT);

                         SimpleNode jjtn003 = new SimpleNode(JJTNOTLIKE_OPERATOR);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                         jjtreeOpenNodeScope(jjtn003);



                                                      
                       
        try {
          jj_consume_token(LIKE);
        } finally {

                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                           if (jjtree.nodeCreated()) {
                            jjtreeCloseNodeScope(jjtn003);
                           }
                         }





                          
                       
        }
      } else {
        switch (jj_nt.kind) {
        case NOT:{
          jj_consume_token(NOT);

            SimpleNode jjtn004 = new SimpleNode(JJTNOTILIKE_OPERATOR);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtreeOpenNodeScope(jjtn004);



                                         
          
          try {
            jj_consume_token(ILIKE);
          } finally {

            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn004);
              }
            }





             
          
          }
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  
 
 
/*
 * LikePattern ::=
 *		  <STRING_LITERAL>
 *		  <REGEXP_LITERAL>
 */    
  final public void parseLikePattern() throws ParseException {
    switch (jj_nt.kind) {
    case STRING_TOKEN:{
      parseString();
      break;
      }
    case REGEXP_TOKEN:{
      parseRegExp();
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*
 * BetweenPredicate ::=
 *		  <BetweenOperator>  <Expression> "AND" <Expression>
 */    
  final public void parseBetweenPredicate() throws ParseException {
    parseBetweenOperator();
    parseExpression();
    jj_consume_token(AND);
    parseExpression();
}

  
 
 
/*
 * BetweenOperator ::=
 *		  "BETWEEN"
 *		  "NOT" "BETWEEN"
 */    
  final public void parseBetweenOperator() throws ParseException {
    switch (jj_nt.kind) {
    case BETWEEN:{

    SimpleNode jjtn001 = new SimpleNode(JJTBETWEEN_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        jj_consume_token(BETWEEN);
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    case NOT:{
      jj_consume_token(NOT);

            SimpleNode jjtn002 = new SimpleNode(JJTNOTBETWEEN_OPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);



                                         
          
      try {
        jj_consume_token(BETWEEN);
      } finally {

            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn002);
              }
            }





             
          
      }
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*
 * InPredicate ::=
 *		  <InOperator>  "(" <InPredicateList> ")"
 */    
  final public void parseInPredicate() throws ParseException {
    parseInOperator();
    jj_consume_token(LP);
    parseInPredicateList();
    jj_consume_token(RP);
}

  
 
 
/*
 * InOperator ::=
 *		  "IN"
 *		  "NOT" "IN"
 */    
  final public void parseInOperator() throws ParseException {
    switch (jj_nt.kind) {
    case IN:{

    SimpleNode jjtn001 = new SimpleNode(JJTIN_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        jj_consume_token(IN);
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    case NOT:{
      jj_consume_token(NOT);

            SimpleNode jjtn002 = new SimpleNode(JJTNOTIN_OPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);



                                         
          
      try {
        jj_consume_token(IN);
      } finally {

            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn002);
              }
            }





             
          
      }
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*
 * InPredicateList ::=
 *		  <Literal> ( "," <Literal> )*
 */    
  final public void parseInPredicateList() throws ParseException {/*@bgen(jjtree) LITERALLIST */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERALLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseInPredicateItem();
      label_13:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        parseInPredicateItem();
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * InPredicateItem ::=
 *		  <Literal> ( "," <Literal> )*
 */    
  final public void parseInPredicateItem() throws ParseException {
    switch (jj_nt.kind) {
    case OCTAL_TOKEN:
    case INTEGER_TOKEN:
    case HEXADECIMAL_TOKEN:
    case DECIMAL_TOKEN:
    case UUID_TOKEN:
    case STRING_TOKEN:
    case LOCALTIME_TOKEN:
    case LOCALDATE_TOKEN:
    case LOCALDATETIME_TOKEN:
    case OFFSETTIME_TOKEN:
    case OFFSETDATETIME_TOKEN:
    case SRID_TOKEN:
    case POINT_TOKEN:
    case POLYGON_TOKEN:
    case LINESTRING_TOKEN:
    case MULTIPOINT_TOKEN:
    case MULTIPOLYGON_TOKEN:
    case MULTILINESTRING_TOKEN:
    case GEOMETRYCOLLECTION_TOKEN:
    case ENVELOPE_TOKEN:
    case ADD:
    case SUB:{
      parseLiteral();
      break;
      }
    case COLON:{
      parseBinding();
      break;
      }
    case DOLLAR:{
      parseParameter();
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
 
 
 
/*****************************************
 *         SPATIAL GRAMMAR               *
 *****************************************/                                            
 
 
/*
 * SpatialPredicate ::=
 *		  "BBOX" <BBoxArguments>
 * 		| "RELATE" <RelateArguments>
 * 		| "CONTAINS" <SpatialArguments>
 * 		| "CROSSES" <SpatialArguments>
 * 		| "DISJOINT" <SpatialArguments>
 * 		| "EQUALS" <SpatialArguments>
 * 		| "INTERSECTS" <SpatialArguments>
 * 		| "OVERLAPS" <SpatialArguments>
 * 		| "TOUCHES" <SpatialArguments>
 * 		| "WITHIN" <SpatialArguments>
 * 		| "BEYOND" <SpatialDistanceArguments>
 * 		| "DWITHIN" <SpatialDistanceArguments>
 */    
  final public void parseSpatialPredicate() throws ParseException {
    switch (jj_nt.kind) {
    case BBOX:{
      jj_consume_token(BBOX);

             SimpleNode jjtn001 = new SimpleNode(JJTST_BBOX_OPERATOR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);



                                          
           
      try {
        parseBBoxArguments();
      } catch (Throwable jjte001) {                    
                    
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      
      
      
      
      
      
      
      
      
      
      
      
                                        
                 
      } finally {

             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               if (jjtree.nodeCreated()) {
                jjtreeCloseNodeScope(jjtn001);
               }
             }





              
           
      }
      break;
      }
    case RELATE:{
      jj_consume_token(RELATE);

               SimpleNode jjtn002 = new SimpleNode(JJTST_RELATE_OPERATOR);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);



                                            
             
      try {
        parseRelateArguments();
      } catch (Throwable jjte002) {                    
                      
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
      
      
      
      
      
      
      
      
      
      
      
      
                                          
                   
      } finally {

               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 if (jjtree.nodeCreated()) {
                  jjtreeCloseNodeScope(jjtn002);
                 }
               }





                
             
      }
      break;
      }
    case CONTAINS:{
      jj_consume_token(CONTAINS);

                 SimpleNode jjtn003 = new SimpleNode(JJTST_CONTAINS_OPERATOR);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
                 jjtreeOpenNodeScope(jjtn003);



                                              
               
      try {
        parseSpatialArguments();
      } catch (Throwable jjte003) {                    
                        
                       if (jjtc003) {
                         jjtree.clearNodeScope(jjtn003);
                         jjtc003 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte003 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte003;}
                       }
                       if (jjte003 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte003;}
                       }
                       {if (true) throw (Error)jjte003;}
      
      
      
      
      
      
      
      
      
      
      
      
                                            
                     
      } finally {

                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003, true);
                   if (jjtree.nodeCreated()) {
                    jjtreeCloseNodeScope(jjtn003);
                   }
                 }





                  
               
      }
      break;
      }
    case CROSSES:{
      jj_consume_token(CROSSES);

                SimpleNode jjtn004 = new SimpleNode(JJTST_CROSSES_OPERATOR);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
                jjtreeOpenNodeScope(jjtn004);



                                             
              
      try {
        parseSpatialArguments();
      } catch (Throwable jjte004) {                    
                       
                      if (jjtc004) {
                        jjtree.clearNodeScope(jjtn004);
                        jjtc004 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte004 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte004;}
                      }
                      if (jjte004 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte004;}
                      }
                      {if (true) throw (Error)jjte004;}
      
      
      
      
      
      
      
      
      
      
      
      
                                           
                    
      } finally {

                if (jjtc004) {
                  jjtree.closeNodeScope(jjtn004, true);
                  if (jjtree.nodeCreated()) {
                   jjtreeCloseNodeScope(jjtn004);
                  }
                }





                 
              
      }
      break;
      }
    case DISJOINT:{
      jj_consume_token(DISJOINT);

                 SimpleNode jjtn005 = new SimpleNode(JJTST_DISJOINT_OPERATOR);
                 boolean jjtc005 = true;
                 jjtree.openNodeScope(jjtn005);
                 jjtreeOpenNodeScope(jjtn005);



                                              
               
      try {
        parseSpatialArguments();
      } catch (Throwable jjte005) {                    
                        
                       if (jjtc005) {
                         jjtree.clearNodeScope(jjtn005);
                         jjtc005 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte005 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte005;}
                       }
                       if (jjte005 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte005;}
                       }
                       {if (true) throw (Error)jjte005;}
      
      
      
      
      
      
      
      
      
      
      
      
                                            
                     
      } finally {

                 if (jjtc005) {
                   jjtree.closeNodeScope(jjtn005, true);
                   if (jjtree.nodeCreated()) {
                    jjtreeCloseNodeScope(jjtn005);
                   }
                 }





                  
               
      }
      break;
      }
    case EQUALS:{
      jj_consume_token(EQUALS);

               SimpleNode jjtn006 = new SimpleNode(JJTST_EQUALS_OPERATOR);
               boolean jjtc006 = true;
               jjtree.openNodeScope(jjtn006);
               jjtreeOpenNodeScope(jjtn006);



                                            
             
      try {
        parseSpatialArguments();
      } catch (Throwable jjte006) {                    
                      
                     if (jjtc006) {
                       jjtree.clearNodeScope(jjtn006);
                       jjtc006 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte006 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte006;}
                     }
                     if (jjte006 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte006;}
                     }
                     {if (true) throw (Error)jjte006;}
      
      
      
      
      
      
      
      
      
      
      
      
                                          
                   
      } finally {

               if (jjtc006) {
                 jjtree.closeNodeScope(jjtn006, true);
                 if (jjtree.nodeCreated()) {
                  jjtreeCloseNodeScope(jjtn006);
                 }
               }





                
             
      }
      break;
      }
    case INTERSECTS:{
      jj_consume_token(INTERSECTS);

                   SimpleNode jjtn007 = new SimpleNode(JJTST_INTERSECTS_OPERATOR);
                   boolean jjtc007 = true;
                   jjtree.openNodeScope(jjtn007);
                   jjtreeOpenNodeScope(jjtn007);



                                                
                 
      try {
        parseSpatialArguments();
      } catch (Throwable jjte007) {                    
                          
                         if (jjtc007) {
                           jjtree.clearNodeScope(jjtn007);
                           jjtc007 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte007 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte007;}
                         }
                         if (jjte007 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte007;}
                         }
                         {if (true) throw (Error)jjte007;}
      
      
      
      
      
      
      
      
      
      
      
      
                                              
                       
      } finally {

                   if (jjtc007) {
                     jjtree.closeNodeScope(jjtn007, true);
                     if (jjtree.nodeCreated()) {
                      jjtreeCloseNodeScope(jjtn007);
                     }
                   }





                    
                 
      }
      break;
      }
    case OVERLAPS:{
      jj_consume_token(OVERLAPS);

                 SimpleNode jjtn008 = new SimpleNode(JJTST_OVERLAPS_OPERATOR);
                 boolean jjtc008 = true;
                 jjtree.openNodeScope(jjtn008);
                 jjtreeOpenNodeScope(jjtn008);



                                              
               
      try {
        parseSpatialArguments();
      } catch (Throwable jjte008) {                    
                        
                       if (jjtc008) {
                         jjtree.clearNodeScope(jjtn008);
                         jjtc008 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte008 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte008;}
                       }
                       if (jjte008 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte008;}
                       }
                       {if (true) throw (Error)jjte008;}
      
      
      
      
      
      
      
      
      
      
      
      
                                            
                     
      } finally {

                 if (jjtc008) {
                   jjtree.closeNodeScope(jjtn008, true);
                   if (jjtree.nodeCreated()) {
                    jjtreeCloseNodeScope(jjtn008);
                   }
                 }





                  
               
      }
      break;
      }
    case TOUCHES:{
      jj_consume_token(TOUCHES);

                SimpleNode jjtn009 = new SimpleNode(JJTST_TOUCHES_OPERATOR);
                boolean jjtc009 = true;
                jjtree.openNodeScope(jjtn009);
                jjtreeOpenNodeScope(jjtn009);



                                             
              
      try {
        parseSpatialArguments();
      } catch (Throwable jjte009) {                    
                       
                      if (jjtc009) {
                        jjtree.clearNodeScope(jjtn009);
                        jjtc009 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte009 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte009;}
                      }
                      if (jjte009 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte009;}
                      }
                      {if (true) throw (Error)jjte009;}
      
      
      
      
      
      
      
      
      
      
      
      
                                           
                    
      } finally {

                if (jjtc009) {
                  jjtree.closeNodeScope(jjtn009, true);
                  if (jjtree.nodeCreated()) {
                   jjtreeCloseNodeScope(jjtn009);
                  }
                }





                 
              
      }
      break;
      }
    case WITHIN:{
      jj_consume_token(WITHIN);

               SimpleNode jjtn010 = new SimpleNode(JJTST_WITHIN_OPERATOR);
               boolean jjtc010 = true;
               jjtree.openNodeScope(jjtn010);
               jjtreeOpenNodeScope(jjtn010);



                                            
             
      try {
        parseSpatialArguments();
      } catch (Throwable jjte010) {                    
                      
                     if (jjtc010) {
                       jjtree.clearNodeScope(jjtn010);
                       jjtc010 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte010 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte010;}
                     }
                     if (jjte010 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte010;}
                     }
                     {if (true) throw (Error)jjte010;}
      
      
      
      
      
      
      
      
      
      
      
      
                                          
                   
      } finally {

               if (jjtc010) {
                 jjtree.closeNodeScope(jjtn010, true);
                 if (jjtree.nodeCreated()) {
                  jjtreeCloseNodeScope(jjtn010);
                 }
               }





                
             
      }
      break;
      }
    case BEYOND:{
      jj_consume_token(BEYOND);

               SimpleNode jjtn011 = new SimpleNode(JJTST_BEYOND_OPERATOR);
               boolean jjtc011 = true;
               jjtree.openNodeScope(jjtn011);
               jjtreeOpenNodeScope(jjtn011);



                                            
             
      try {
        parseSpatialDistanceArguments();
      } catch (Throwable jjte011) {                    
                      
                     if (jjtc011) {
                       jjtree.clearNodeScope(jjtn011);
                       jjtc011 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte011 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte011;}
                     }
                     if (jjte011 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte011;}
                     }
                     {if (true) throw (Error)jjte011;}
      
      
      
      
      
      
      
      
      
      
      
      
                                          
                   
      } finally {

               if (jjtc011) {
                 jjtree.closeNodeScope(jjtn011, true);
                 if (jjtree.nodeCreated()) {
                  jjtreeCloseNodeScope(jjtn011);
                 }
               }





                
             
      }
      break;
      }
    case DWITHIN:{
      jj_consume_token(DWITHIN);

                SimpleNode jjtn012 = new SimpleNode(JJTST_DWITHIN_OPERATOR);
                boolean jjtc012 = true;
                jjtree.openNodeScope(jjtn012);
                jjtreeOpenNodeScope(jjtn012);



                                             
              
      try {
        parseSpatialDistanceArguments();
      } catch (Throwable jjte012) {                    
                       
                      if (jjtc012) {
                        jjtree.clearNodeScope(jjtn012);
                        jjtc012 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte012 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte012;}
                      }
                      if (jjte012 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte012;}
                      }
                      {if (true) throw (Error)jjte012;}
      
      
      
      
      
      
      
      
      
      
      
      
                                           
                    
      } finally {

                if (jjtc012) {
                  jjtree.closeNodeScope(jjtn012, true);
                  if (jjtree.nodeCreated()) {
                   jjtreeCloseNodeScope(jjtn012);
                  }
                }





                 
              
      }
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*
 * BBoxArguments ::=
 *		  "(" <Expression> "," <NUMBER_LITERAL> "," <NUMBER_LITERAL> "," <NUMBER_LITERAL> "," <NUMBER_LITERAL> ("," <STRING_LITERAL>)? ")"
 */    
  final public void parseBBoxArguments() throws ParseException {
    jj_consume_token(LP);
    parseExpression();
    jj_consume_token(COMMA);
    parseNumber();
    jj_consume_token(COMMA);
    parseNumber();
    jj_consume_token(COMMA);
    parseNumber();
    jj_consume_token(COMMA);
    parseNumber();
    switch (jj_nt.kind) {
    case COMMA:{
      jj_consume_token(COMMA);
      parseString();
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    jj_consume_token(RP);
}

  
 
 
/*
 * RelateArguments ::=
 *		  "(" <Expression> "," <Expression> "," <DE9IM_LITERAL> ")"
 */    
  final public void parseRelateArguments() throws ParseException {
    jj_consume_token(LP);
    parseExpression();
    jj_consume_token(COMMA);
    parseExpression();
    jj_consume_token(COMMA);
    parseDE9IM();
    jj_consume_token(RP);
}

  
 
 
/*
 * SpatialArguments ::=
 *		  "(" <Expression> "," <Expression> ")"
 */    
  final public void parseSpatialArguments() throws ParseException {
    jj_consume_token(LP);
    parseExpression();
    jj_consume_token(COMMA);
    parseExpression();
    jj_consume_token(RP);
}

  
 
 
/*
 * SpatialDistanceArguments ::=
 *		  "(" <Expression> "," <Expression> "," <INTEGER_LITERAL> "," <LENGTH_UNIT> ")"
 */    
  final public void parseSpatialDistanceArguments() throws ParseException {
    jj_consume_token(LP);
    parseExpression();
    jj_consume_token(COMMA);
    parseExpression();
    jj_consume_token(COMMA);
    parseNumber();
    jj_consume_token(COMMA);
    parseDistanceUnits();
    jj_consume_token(RP);
}

  
 
 
 
 
 
/*****************************************
 *            SORT GRAMMAR               *
 *****************************************/                                            
  final public void compileSorting() throws ParseException {
    parseSortList();
    jj_consume_token(0);
}

  
 
 
/*
 * SortList ::=
 *		  <SortBy> ("," <SortBy>)*
 */    
  final public void parseSortList() throws ParseException {/*@bgen(jjtree) SORTLIST */
  SimpleNode jjtn000 = new SimpleNode(JJTSORTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseSortBy();
      label_14:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[57] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        parseSortBy();
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * SortBy ::=
 *		  <SortDescending>
 *		  <SortAscending>
 */    
  final public void parseSortBy() throws ParseException {
    if (jj_2_7(2147483647)) {
      parseSortDescending();
    } else {
      switch (jj_nt.kind) {
      case IDENTIFIER_TOKEN:
      case IDENTIFIER_QUOTED_TOKEN:{
        parseSortAscending();
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  
 
 
/*
 * SortAscending ::=
 *		  <Attribute> ( "ASC" )?
 */    
  final public void parseSortAscending() throws ParseException {/*@bgen(jjtree) SORTASCENDING */
  SimpleNode jjtn000 = new SimpleNode(JJTSORTASCENDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseAttribute();
      switch (jj_nt.kind) {
      case ASC:{
        jj_consume_token(ASC);
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * SortAscending ::=
 *		  <Attribute> "DESC"
 */    
  final public void parseSortDescending() throws ParseException {/*@bgen(jjtree) SORTDESCENDING */
  SimpleNode jjtn000 = new SimpleNode(JJTSORTDESCENDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseAttribute();
      jj_consume_token(DESC);
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_parsePointCoordinate_379_3_199()
 {
    if (jj_3R_parseCoordinate_361_3_186()) return true;
    return false;
  }

  private boolean jj_3R_parsePointCoordinate_379_3_189()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parsePointCoordinate_379_3_199()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parsePointCoordinate_379_30_200()) return true;
    return false;
  }

  private boolean jj_3R_parseCoordinate_361_19_197()
 {
    if (jj_3R_parseNumber_319_3_121()) return true;
    return false;
  }

  private boolean jj_3R_parseRelationalPredicatePart_758_3_46()
 {
    if (jj_3R_parseInPredicate_885_3_67()) return true;
    return false;
  }

  private boolean jj_3R_parsePoint_373_4_174()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseCoordinate_361_3_186()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseRelationalPredicatePart_757_3_45()
 {
    if (jj_3R_parseBetweenPredicate_861_3_19()) return true;
    return false;
  }

  private boolean jj_3R_parsePoint_373_3_154()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parsePoint_373_4_174()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseRelationalPredicatePart_756_3_44()
 {
    if (jj_3R_parseLikePredicate_820_3_18()) return true;
    return false;
  }

  private boolean jj_3R_parseRelationalPredicatePart_755_3_43()
 {
    if (jj_3R_parseComparisionPredicate_769_3_66()) return true;
    return false;
  }

  private boolean jj_3R_parseRelationalPredicatePart_754_3_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseRelationalPredicatePart_754_3_42()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseRelationalPredicatePart_755_3_43()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseRelationalPredicatePart_756_3_44()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseRelationalPredicatePart_757_3_45()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseRelationalPredicatePart_758_3_46()) return true;
    return false;
  }

  private boolean jj_3R_parseRelationalPredicatePart_754_3_42()
 {
    if (jj_3R_parseIsNullPredicate_796_3_65()) return true;
    return false;
  }

  private boolean jj_3R_parseCoordinateArray_367_3_187()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseCoordinate_361_3_186()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseCoordinateArray_367_30_198()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseNumber_323_47_153()
 {
    if (jj_3R_parseDecimal_312_3_149()) return true;
    return false;
  }

  private boolean jj_3R_parseCoordinate_361_3_186()
 {
    if (jj_3R_parseNumber_319_3_121()) return true;
    Token xsp;
    if (jj_3R_parseCoordinate_361_19_197()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseCoordinate_361_19_197()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_parseRelationalPredicate_739_3_17()
 {
    if (jj_3R_parseExpression_514_3_25()) return true;
    if (jj_3R_parseRelationalPredicatePart_754_3_26()) return true;
    return false;
  }

  private boolean jj_3R_parseEWKT_354_3_124()
 {
    if (jj_scan_token(SRID_TOKEN)) return true;
    if (jj_3R_parseNumber_319_3_121()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_parseGeometry_340_3_123()) return true;
    return false;
  }

  private boolean jj_3R_parseNumber_321_29_151()
 {
    if (jj_3R_parseDecimal_312_3_149()) return true;
    return false;
  }

  private boolean jj_3R_parseGeometry_347_3_146()
 {
    if (jj_scan_token(ENVELOPE_TOKEN)) return true;
    if (jj_3R_parseEnvelope_421_3_161()) return true;
    return false;
  }

  private boolean jj_3R_parseGeometry_346_3_145()
 {
    if (jj_scan_token(GEOMETRYCOLLECTION_TOKEN)) return true;
    if (jj_3R_parseGeometryCollection_415_3_160()) return true;
    return false;
  }

  private boolean jj_3R_parseGeometry_345_3_144()
 {
    if (jj_scan_token(MULTILINESTRING_TOKEN)) return true;
    if (jj_3R_parseMultiLineString_403_3_159()) return true;
    return false;
  }

  private boolean jj_3R_parseExistsOperator_728_3_39()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_parseGeometry_344_3_143()
 {
    if (jj_scan_token(MULTIPOLYGON_TOKEN)) return true;
    if (jj_3R_parseMultiPolygon_409_3_158()) return true;
    return false;
  }

  private boolean jj_3R_parseExistsOperator_727_3_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseExistsOperator_727_3_38()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseExistsOperator_728_3_39()) return true;
    return false;
  }

  private boolean jj_3R_parseExistsOperator_727_3_38()
 {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_parseGeometry_343_3_142()
 {
    if (jj_scan_token(MULTIPOINT_TOKEN)) return true;
    if (jj_3R_parseMultiPoint_397_3_157()) return true;
    return false;
  }

  private boolean jj_3R_parseGeometry_342_3_141()
 {
    if (jj_scan_token(LINESTRING_TOKEN)) return true;
    if (jj_3R_parseLineString_385_3_156()) return true;
    return false;
  }

  private boolean jj_3R_parseGeometry_341_3_140()
 {
    if (jj_scan_token(POLYGON_TOKEN)) return true;
    if (jj_3R_parsePolygon_391_3_155()) return true;
    return false;
  }

  private boolean jj_3R_parseGeometry_340_3_123()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseGeometry_340_3_139()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseGeometry_341_3_140()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseGeometry_342_3_141()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseGeometry_343_3_142()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseGeometry_344_3_143()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseGeometry_345_3_144()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseGeometry_346_3_145()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseGeometry_347_3_146()) return true;
    return false;
  }

  private boolean jj_3R_parseGeometry_340_3_139()
 {
    if (jj_scan_token(POINT_TOKEN)) return true;
    if (jj_3R_parsePoint_373_3_154()) return true;
    return false;
  }

  private boolean jj_3R_parseTemporal_334_3_138()
 {
    if (jj_scan_token(OFFSETDATETIME_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseTemporal_333_3_137()
 {
    if (jj_scan_token(OFFSETTIME_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseBBoxArguments_976_125_194()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseString_296_3_68()) return true;
    return false;
  }

  private boolean jj_3R_parseNumber_323_12_152()
 {
    if (jj_3R_parseInteger_303_3_90()) return true;
    return false;
  }

  private boolean jj_3R_parseTemporal_332_3_136()
 {
    if (jj_scan_token(LOCALDATETIME_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseExistsPredicate_715_3_16()
 {
    if (jj_3R_parseNamedExpression_585_3_23()) return true;
    if (jj_3R_parseExistsOperator_727_3_24()) return true;
    return false;
  }

  private boolean jj_3R_parseTemporal_331_3_135()
 {
    if (jj_scan_token(LOCALDATE_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseNumber_321_12_150()
 {
    if (jj_3R_parseInteger_303_3_90()) return true;
    return false;
  }

  private boolean jj_3R_parseTemporal_329_3_122()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseTemporal_329_3_134()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseTemporal_331_3_135()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseTemporal_332_3_136()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseTemporal_333_3_137()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseTemporal_334_3_138()) return true;
    return false;
  }

  private boolean jj_3R_parseTemporal_329_3_134()
 {
    if (jj_scan_token(LOCALTIME_TOKEN)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_parseRelationalPredicate_739_3_17()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_parseExistsPredicate_715_3_16()) return true;
    return false;
  }

  private boolean jj_3R_parseNumber_322_3_133()
 {
    if (jj_scan_token(SUB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseNumber_323_12_152()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseNumber_323_47_153()) return true;
    return false;
  }

  private boolean jj_3R_parseNumber_321_3_132()
 {
    if (jj_scan_token(ADD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseNumber_321_12_150()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseNumber_321_29_151()) return true;
    return false;
  }

  private boolean jj_3R_parseNumber_320_3_131()
 {
    if (jj_3R_parseDecimal_312_3_149()) return true;
    return false;
  }

  private boolean jj_3R_parsePredicate_703_3_129()
 {
    if (jj_3R_parseExpression_514_3_25()) return true;
    return false;
  }

  private boolean jj_3R_parseNumber_319_3_121()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseNumber_319_3_130()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseNumber_320_3_131()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseNumber_321_3_132()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseNumber_322_3_133()) return true;
    return false;
  }

  private boolean jj_3R_parseNumber_319_3_130()
 {
    if (jj_3R_parseInteger_303_3_90()) return true;
    return false;
  }

  private boolean jj_3R_parsePredicate_702_3_128()
 {
    if (jj_3R_parseRelationalPredicate_739_3_17()) return true;
    return false;
  }

  private boolean jj_3R_parsePredicate_701_3_126()
 {
    if (jj_3R_parseSpatialPredicate_952_3_148()) return true;
    return false;
  }

  private boolean jj_3R_parsePredicate_701_3_127()
 {
    if (jj_3R_parseExistsPredicate_715_3_16()) return true;
    return false;
  }

  private boolean jj_3R_parsePredicate_699_3_119()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parsePredicate_699_3_125()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parsePredicate_701_3_126()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parsePredicate_701_3_127()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parsePredicate_702_3_128()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parsePredicate_703_3_129()) return true;
    return false;
  }

  private boolean jj_3R_parsePredicate_699_3_125()
 {
    if (jj_3R_parseBool_275_3_147()) return true;
    return false;
  }

  private boolean jj_3R_parseDecimal_312_3_149()
 {
    if (jj_scan_token(DECIMAL_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseInteger_306_3_109()
 {
    if (jj_scan_token(HEXADECIMAL_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseAndFilter_671_21_89()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_parseNotFilter_683_3_88()) return true;
    return false;
  }

  private boolean jj_3R_parseInteger_305_3_108()
 {
    if (jj_scan_token(INTEGER_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseInteger_303_3_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseInteger_303_3_107()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseInteger_305_3_108()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseInteger_306_3_109()) return true;
    return false;
  }

  private boolean jj_3R_parseInteger_303_3_107()
 {
    if (jj_scan_token(OCTAL_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseSortDescending_1068_3_20()
 {
    if (jj_3R_parseAttribute_625_3_30()) return true;
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_parseNotFilter_684_3_106()
 {
    if (jj_3R_parsePredicate_699_3_119()) return true;
    return false;
  }

  private boolean jj_3R_parseNotFilter_683_3_88()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseNotFilter_683_3_105()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseNotFilter_684_3_106()) return true;
    return false;
  }

  private boolean jj_3R_parseNotFilter_683_3_105()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_parsePredicate_699_3_119()) return true;
    return false;
  }

  private boolean jj_3R_parseString_296_3_68()
 {
    if (jj_scan_token(STRING_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseFilter_660_21_74()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_parseAndFilter_671_3_73()) return true;
    return false;
  }

  private boolean jj_3R_parseRegExp_289_3_69()
 {
    if (jj_scan_token(REGEXP_TOKEN)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_parseSortDescending_1068_3_20()) return true;
    return false;
  }

  private boolean jj_3R_parseAndFilter_671_3_73()
 {
    if (jj_3R_parseNotFilter_683_3_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseAndFilter_671_21_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_parseUuid_282_3_120()
 {
    if (jj_scan_token(UUID_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseFilter_660_3_57()
 {
    if (jj_3R_parseAndFilter_671_3_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseFilter_660_21_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_parseBool_275_3_147()
 {
    if (jj_scan_token(BOOL_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseFunction_636_24_22()
 {
    if (jj_3R_parseExpressionList_502_3_33()) return true;
    return false;
  }

  private boolean jj_3R_parseNull_268_3_91()
 {
    if (jj_scan_token(NULL_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseFunction_636_3_15()
 {
    if (jj_3R_parseName_465_3_21()) return true;
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseFunction_636_24_22()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialDistanceArguments_1009_3_185()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseExpression_514_3_25()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseExpression_514_3_25()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseNumber_319_3_121()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseDistanceUnits_440_3_196()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseAttribute_625_3_30()
 {
    if (jj_3R_parseName_465_3_21()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialArguments_998_3_184()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseExpression_514_3_25()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseExpression_514_3_25()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseBinding_614_3_59()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_parseName_465_3_21()) return true;
    return false;
  }

  private boolean jj_3R_parseParameter_604_5_76()
 {
    if (jj_3R_parseInteger_303_3_90()) return true;
    return false;
  }

  private boolean jj_3R_parseRelateArguments_987_3_183()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseExpression_514_3_25()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseExpression_514_3_25()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseDE9IM_434_3_195()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseParameter_602_5_75()
 {
    if (jj_3R_parseIdentifier_427_3_54()) return true;
    return false;
  }

  private boolean jj_3R_parseParameter_600_3_60()
 {
    if (jj_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseParameter_602_5_75()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseParameter_604_5_76()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_parseFunction_636_3_15()) return true;
    return false;
  }

  private boolean jj_3R_parseBBoxArguments_976_3_182()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseExpression_514_3_25()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseNumber_319_3_121()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseNumber_319_3_121()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseNumber_319_3_121()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseNumber_319_3_121()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseBBoxArguments_976_125_194()) jj_scanpos = xsp;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseNamedExpression_588_3_37()
 {
    if (jj_3R_parseAttribute_625_3_30()) return true;
    return false;
  }

  private boolean jj_3R_parseNamedExpression_587_3_36()
 {
    if (jj_3R_parseFunction_636_3_15()) return true;
    return false;
  }

  private boolean jj_3R_parseNamedExpression_586_3_35()
 {
    if (jj_3R_parseParameter_600_3_60()) return true;
    return false;
  }

  private boolean jj_3R_parseNamedExpression_585_3_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseNamedExpression_585_3_34()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseNamedExpression_586_3_35()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseNamedExpression_587_3_36()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseNamedExpression_588_3_37()) return true;
    return false;
  }

  private boolean jj_3R_parseNamedExpression_585_3_34()
 {
    if (jj_3R_parseBinding_614_3_59()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_965_3_173()
 {
    if (jj_scan_token(DWITHIN)) return true;
    if (jj_3R_parseSpatialDistanceArguments_1009_3_185()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_964_3_172()
 {
    if (jj_scan_token(BEYOND)) return true;
    if (jj_3R_parseSpatialDistanceArguments_1009_3_185()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_962_3_171()
 {
    if (jj_scan_token(WITHIN)) return true;
    if (jj_3R_parseSpatialArguments_998_3_184()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_961_3_170()
 {
    if (jj_scan_token(TOUCHES)) return true;
    if (jj_3R_parseSpatialArguments_998_3_184()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_960_3_169()
 {
    if (jj_scan_token(OVERLAPS)) return true;
    if (jj_3R_parseSpatialArguments_998_3_184()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_959_3_168()
 {
    if (jj_scan_token(INTERSECTS)) return true;
    if (jj_3R_parseSpatialArguments_998_3_184()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_958_3_167()
 {
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_parseSpatialArguments_998_3_184()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_957_3_166()
 {
    if (jj_scan_token(DISJOINT)) return true;
    if (jj_3R_parseSpatialArguments_998_3_184()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_956_3_165()
 {
    if (jj_scan_token(CROSSES)) return true;
    if (jj_3R_parseSpatialArguments_998_3_184()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_955_3_164()
 {
    if (jj_scan_token(CONTAINS)) return true;
    if (jj_3R_parseSpatialArguments_998_3_184()) return true;
    return false;
  }

  private boolean jj_3R_parseLiteral_571_3_115()
 {
    if (jj_3R_parseEWKT_354_3_124()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_953_3_163()
 {
    if (jj_scan_token(RELATE)) return true;
    if (jj_3R_parseRelateArguments_987_3_183()) return true;
    return false;
  }

  private boolean jj_3R_parseLiteral_570_3_114()
 {
    if (jj_3R_parseGeometry_340_3_123()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_952_3_162()
 {
    if (jj_scan_token(BBOX)) return true;
    if (jj_3R_parseBBoxArguments_976_3_182()) return true;
    return false;
  }

  private boolean jj_3R_parseSpatialPredicate_952_3_148()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseSpatialPredicate_952_3_162()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseSpatialPredicate_953_3_163()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseSpatialPredicate_955_3_164()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseSpatialPredicate_956_3_165()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseSpatialPredicate_957_3_166()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseSpatialPredicate_958_3_167()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseSpatialPredicate_959_3_168()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseSpatialPredicate_960_3_169()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseSpatialPredicate_961_3_170()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseSpatialPredicate_962_3_171()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseSpatialPredicate_964_3_172()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseSpatialPredicate_965_3_173()) return true;
    return false;
  }

  private boolean jj_3R_parseLiteral_569_3_113()
 {
    if (jj_3R_parseTemporal_329_3_122()) return true;
    return false;
  }

  private boolean jj_3R_parseLiteral_568_3_112()
 {
    if (jj_3R_parseString_296_3_68()) return true;
    return false;
  }

  private boolean jj_3R_parseLiteral_567_3_111()
 {
    if (jj_3R_parseNumber_319_3_121()) return true;
    return false;
  }

  private boolean jj_3R_parseLiteral_566_3_92()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseLiteral_566_3_110()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseLiteral_567_3_111()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseLiteral_568_3_112()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseLiteral_569_3_113()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseLiteral_570_3_114()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseLiteral_571_3_115()) return true;
    return false;
  }

  private boolean jj_3R_parseLiteral_566_3_110()
 {
    if (jj_3R_parseUuid_282_3_120()) return true;
    return false;
  }

  private boolean jj_3R_parseUnaryExpression_551_3_80()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseFilter_660_3_57()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseUnaryExpression_550_3_79()
 {
    if (jj_3R_parseNamedExpression_585_3_23()) return true;
    return false;
  }

  private boolean jj_3R_parseInPredicateList_909_27_104()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseInPredicateItem_920_3_103()) return true;
    return false;
  }

  private boolean jj_3R_parseUnaryExpression_549_3_78()
 {
    if (jj_3R_parseLiteral_566_3_92()) return true;
    return false;
  }

  private boolean jj_3R_parseUnaryExpression_548_3_77()
 {
    if (jj_3R_parseNull_268_3_91()) return true;
    return false;
  }

  private boolean jj_3R_parseUnaryExpression_548_3_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseUnaryExpression_548_3_77()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseUnaryExpression_549_3_78()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseUnaryExpression_550_3_79()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseUnaryExpression_551_3_80()) return true;
    return false;
  }

  private boolean jj_3R_parseInPredicateItem_922_3_118()
 {
    if (jj_3R_parseParameter_600_3_60()) return true;
    return false;
  }

  private boolean jj_3R_parseInPredicateItem_921_3_117()
 {
    if (jj_3R_parseBinding_614_3_59()) return true;
    return false;
  }

  private boolean jj_3R_parseInPredicateItem_920_3_103()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseInPredicateItem_920_3_116()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseInPredicateItem_921_3_117()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseInPredicateItem_922_3_118()) return true;
    return false;
  }

  private boolean jj_3R_parseInPredicateItem_920_3_116()
 {
    if (jj_3R_parseLiteral_566_3_92()) return true;
    return false;
  }

  private boolean jj_3R_parseMultiplicativeExpression_534_5_83()
 {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_parseUnaryExpression_548_3_61()) return true;
    return false;
  }

  private boolean jj_3R_parseMultiplicativeExpression_533_5_82()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_parseUnaryExpression_548_3_61()) return true;
    return false;
  }

  private boolean jj_3R_parseMultiplicativeExpression_532_5_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseMultiplicativeExpression_532_5_81()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseMultiplicativeExpression_533_5_82()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseMultiplicativeExpression_534_5_83()) return true;
    return false;
  }

  private boolean jj_3R_parseMultiplicativeExpression_532_5_81()
 {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_parseUnaryExpression_548_3_61()) return true;
    return false;
  }

  private boolean jj_3R_parseMultiplicativeExpression_530_3_40()
 {
    if (jj_3R_parseUnaryExpression_548_3_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseMultiplicativeExpression_532_5_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_parseInPredicateList_909_3_87()
 {
    if (jj_3R_parseInPredicateItem_920_3_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseInPredicateList_909_27_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_parseExpression_517_5_64()
 {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_parseMultiplicativeExpression_530_3_40()) return true;
    return false;
  }

  private boolean jj_3R_parseName_468_53_72()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_parseName_465_3_21()) return true;
    return false;
  }

  private boolean jj_3R_parseExpression_516_5_63()
 {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_parseMultiplicativeExpression_530_3_40()) return true;
    return false;
  }

  private boolean jj_3R_parseExpression_516_5_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseExpression_516_5_63()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseExpression_517_5_64()) return true;
    return false;
  }

  private boolean jj_3R_parseExpressionList_502_18_58()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseFilter_660_3_57()) return true;
    return false;
  }

  private boolean jj_3R_parseInOperator_898_3_102()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_parseExpression_514_3_25()
 {
    if (jj_3R_parseMultiplicativeExpression_530_3_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseExpression_516_5_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_parseInOperator_897_3_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseInOperator_897_3_101()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseInOperator_898_3_102()) return true;
    return false;
  }

  private boolean jj_3R_parseInOperator_897_3_101()
 {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_parseExpressionList_502_3_33()
 {
    if (jj_3R_parseFilter_660_3_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseExpressionList_502_18_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_parseInPredicate_885_3_67()
 {
    if (jj_3R_parseInOperator_897_3_86()) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseInPredicateList_909_3_87()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseBetweenOperator_874_3_53()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(BETWEEN)) return true;
    return false;
  }

  private boolean jj_3R_parseBetweenOperator_873_3_52()
 {
    if (jj_scan_token(BETWEEN)) return true;
    return false;
  }

  private boolean jj_3R_parseBetweenOperator_873_3_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseBetweenOperator_873_3_52()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseBetweenOperator_874_3_53()) return true;
    return false;
  }

  private boolean jj_3R_parseLocalName_479_3_31()
 {
    if (jj_3R_parseIdentifier_427_3_54()) return true;
    return false;
  }

  private boolean jj_3R_parseBetweenPredicate_861_3_19()
 {
    if (jj_3R_parseBetweenOperator_873_3_29()) return true;
    if (jj_3R_parseExpression_514_3_25()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_parseExpression_514_3_25()) return true;
    return false;
  }

  private boolean jj_3R_parseName_467_9_55()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_parseName_465_3_21()) return true;
    return false;
  }

  private boolean jj_3R_parseName_467_9_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseName_467_9_55()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseName_468_5_56()) return true;
    return false;
  }

  private boolean jj_3R_parseName_468_5_56()
 {
    if (jj_scan_token(LSP)) return true;
    if (jj_3R_parseIdentifier_427_3_54()) return true;
    if (jj_scan_token(RSP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseName_468_53_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseLikePattern_850_3_51()
 {
    if (jj_3R_parseRegExp_289_3_69()) return true;
    return false;
  }

  private boolean jj_3R_parseLikePattern_849_3_50()
 {
    if (jj_3R_parseString_296_3_68()) return true;
    return false;
  }

  private boolean jj_3R_parseLikePattern_849_3_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseLikePattern_849_3_50()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseLikePattern_850_3_51()) return true;
    return false;
  }

  private boolean jj_3R_parseName_465_3_21()
 {
    if (jj_3R_parseLocalName_479_3_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseName_467_9_32()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseLikeOperator_837_3_49()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(ILIKE)) return true;
    return false;
  }

  private boolean jj_3R_parseLikeOperator_836_3_48()
 {
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  private boolean jj_3R_parseLikeOperator_834_3_47()
 {
    if (jj_scan_token(ILIKE)) return true;
    return false;
  }

  private boolean jj_3R_parseLikeOperator_834_3_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseLikeOperator_834_3_47()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseLikeOperator_836_3_48()) return false;
    jj_scanpos = xsp;
    if (!jj_3_6()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseLikeOperator_837_3_49()) return true;
    return false;
  }

  private boolean jj_3R_parseDistanceUnits_440_3_196()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(84)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(85)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(86)) return false;
    jj_scanpos = xsp;
    if (!jj_scan_token(87)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_parseGeometryCollection_415_28_193()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseGeometry_340_3_123()) return true;
    return false;
  }

  private boolean jj_3R_parseLikePredicate_820_3_18()
 {
    if (jj_3R_parseLikeOperator_834_3_27()) return true;
    if (jj_3R_parseLikePattern_849_3_28()) return true;
    return false;
  }

  private boolean jj_3R_parseDE9IM_434_3_195()
 {
    if (jj_scan_token(DE9IM)) return true;
    return false;
  }

  private boolean jj_3R_parseMultiPolygon_409_27_191()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parsePolygon_391_3_155()) return true;
    return false;
  }

  private boolean jj_3R_parseMultiLineString_403_30_192()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseLineString_385_3_156()) return true;
    return false;
  }

  private boolean jj_3R_parseMultiPoint_397_35_190()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parsePointCoordinate_379_3_189()) return true;
    return false;
  }

  private boolean jj_3R_parseIdentifier_429_3_71()
 {
    if (jj_scan_token(IDENTIFIER_QUOTED_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseIdentifier_427_3_70()
 {
    if (jj_scan_token(IDENTIFIER_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseIdentifier_427_3_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseIdentifier_427_3_70()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseIdentifier_429_3_71()) return true;
    return false;
  }

  private boolean jj_3R_parseIsNullOperator_809_3_94()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(NULL_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parseIsNullOperator_808_3_84()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseIsNullOperator_808_3_93()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseIsNullOperator_809_3_94()) return true;
    return false;
  }

  private boolean jj_3R_parseIsNullOperator_808_3_93()
 {
    if (jj_scan_token(NULL_TOKEN)) return true;
    return false;
  }

  private boolean jj_3R_parsePolygon_391_35_188()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseCoordinateArray_367_3_187()) return true;
    return false;
  }

  private boolean jj_3R_parseEnvelope_421_4_181()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseNumber_319_3_121()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseNumber_319_3_121()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseNumber_319_3_121()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseNumber_319_3_121()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseEnvelope_421_3_161()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseEnvelope_421_4_181()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseGeometryCollection_415_4_180()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseGeometry_340_3_123()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseGeometryCollection_415_28_193()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseGeometryCollection_415_3_160()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseGeometryCollection_415_4_180()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseIsNullPredicate_796_3_65()
 {
    if (jj_scan_token(IS)) return true;
    if (jj_3R_parseIsNullOperator_808_3_84()) return true;
    return false;
  }

  private boolean jj_3R_parseMultiPolygon_409_4_178()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parsePolygon_391_3_155()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseMultiPolygon_409_27_191()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseMultiPolygon_409_3_158()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseMultiPolygon_409_4_178()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parsePointCoordinate_379_30_200()
 {
    if (jj_3R_parsePoint_373_3_154()) return true;
    return false;
  }

  private boolean jj_3R_parseMultiLineString_403_4_179()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseLineString_385_3_156()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseMultiLineString_403_30_192()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseMultiLineString_403_3_159()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseMultiLineString_403_4_179()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseComparisionOperator_786_3_100()
 {
    if (jj_scan_token(GTE)) return true;
    return false;
  }

  private boolean jj_3R_parseComparisionOperator_785_3_99()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_parseComparisionOperator_784_3_98()
 {
    if (jj_scan_token(LTE)) return true;
    return false;
  }

  private boolean jj_3R_parseComparisionOperator_783_3_97()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_parseComparisionOperator_782_3_96()
 {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  private boolean jj_3R_parseMultiPoint_397_4_177()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parsePointCoordinate_379_3_189()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseMultiPoint_397_35_190()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parseMultiPoint_397_3_157()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseMultiPoint_397_4_177()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseComparisionOperator_780_3_85()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_parseComparisionOperator_780_3_95()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseComparisionOperator_782_3_96()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseComparisionOperator_783_3_97()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseComparisionOperator_784_3_98()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_parseComparisionOperator_785_3_99()) return false;
    jj_scanpos = xsp;
    if (jj_3R_parseComparisionOperator_786_3_100()) return true;
    return false;
  }

  private boolean jj_3R_parseComparisionOperator_780_3_95()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_parseCoordinateArray_367_30_198()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseCoordinate_361_3_186()) return true;
    return false;
  }

  private boolean jj_3R_parsePolygon_391_4_175()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_parseCoordinateArray_367_3_187()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parsePolygon_391_35_188()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_parsePolygon_391_3_155()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parsePolygon_391_4_175()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseLineString_385_4_176()
 {
    if (jj_3R_parseCoordinateArray_367_3_187()) return true;
    return false;
  }

  private boolean jj_3R_parseComparisionPredicate_769_3_66()
 {
    if (jj_3R_parseComparisionOperator_780_3_85()) return true;
    if (jj_3R_parseExpression_514_3_25()) return true;
    return false;
  }

  private boolean jj_3R_parseLineString_385_3_156()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseLineString_385_4_176()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_parseBetweenPredicate_861_3_19()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_parseLikePredicate_820_3_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ExpressionTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
    jj_la1_init_0();
    jj_la1_init_1();
    jj_la1_init_2();
 }
 private static void jj_la1_init_0() {
    jj_la1_0 = new int[] {0xe000000,0x1e000000,0x1e000000,0x1e000000,0x0,0x0,0x1e000000,0x10000,0x800,0x1e000000,0x800,0x10000,0x800,0x10000,0x800,0x10000,0x800,0x10000,0x800,0x10000,0x800,0x800,0x0,0x0,0x8000,0xa000,0xa000,0x10000,0x0,0x0,0x0,0x0,0x9e860800,0x9e000000,0x60000,0x0,0xe000000,0x9f860800,0x0,0x0,0x9f860800,0x1000000,0x9e860800,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x10000,0x9e060000,0x0,0x10000,0x10000,0x0,0x0,};
 }
 private static void jj_la1_init_1() {
    jj_la1_1 = new int[] {0x0,0x0,0x0,0xc0000,0x7c,0x1fe00,0xc0000,0x0,0x0,0xc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000,0xc0000,0x700000,0x700000,0xdff7e,0xdff7e,0x0,0x0,0x0,0x80dff7e,0x2000000,0x4000000,0x80dff7e,0x0,0xdff7e,0x8000000,0xf0000000,0x8000000,0xf0000000,0x8000000,0x0,0x8000000,0x3,0x8000000,0x8000000,0x0,0xdff7e,0x0,0x0,0x0,0x0,0x800000,};
 }
 private static void jj_la1_init_2() {
    jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x1f00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x0,0x0,0x6000000,0x6000000,0x60fff00,0x0,0x0,0x60fff00,0xfff00,0x6000000,0x40,0x7,0x8,0x3,0x0,0x30,0x0,0x0,0x80,0x8,0x0,0x0,0xfff00,0x0,0x0,0x6000000,0x0,};
 }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor. */
  public Expression(Provider stream) {
  jj_input_stream = new JavaCharStream(stream, 1, 1);
  token_source = new ExpressionTokenManager(jj_input_stream);
  token = new Token();
  token.next = jj_nt = token_source.getNextToken();
  jj_gen = 0;
  for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Expression(String dsl) throws ParseException, TokenMgrException {
    this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
   ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
 if (jj_input_stream == null) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
 } else {
    jj_input_stream.ReInit(stream, 1, 1);
 }
 if (token_source == null) {
 token_source = new ExpressionTokenManager(jj_input_stream);
 }

  token_source.ReInit(jj_input_stream);
  token = new Token();
  token.next = jj_nt = token_source.getNextToken();
  jjtree.reset();
  jj_gen = 0;
  for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Expression(ExpressionTokenManager tm) {
  token_source = tm;
  token = new Token();
  token.next = jj_nt = token_source.getNextToken();
  jj_gen = 0;
  for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExpressionTokenManager tm) {
  token_source = tm;
  token = new Token();
  token.next = jj_nt = token_source.getNextToken();
  jjtree.reset();
  jj_gen = 0;
  for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
  Token oldToken = token;
  if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
  else jj_nt = jj_nt.next = token_source.getNextToken();
  if (token.kind == kind) {
    jj_gen++;
    if (++jj_gc > 100) {
    jj_gc = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) {
      JJCalls c = jj_2_rtns[i];
      while (c != null) {
      if (c.gen < jj_gen) c.first = null;
      c = c.next;
      }
    }
    }
    return token;
  }
  jj_nt = token;
  token = oldToken;
  jj_kind = kind;
  throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.RuntimeException {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
  if (jj_scanpos == jj_lastpos) {
    jj_la--;
    if (jj_scanpos.next == null) {
    jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
    } else {
    jj_lastpos = jj_scanpos = jj_scanpos.next;
    }
  } else {
    jj_scanpos = jj_scanpos.next;
  }
  if (jj_rescan) {
    int i = 0; Token tok = token;
    while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
    if (tok != null) jj_add_error_token(kind, i);
  }
  if (jj_scanpos.kind != kind) return true;
  if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
  return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
  if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
  else jj_nt = jj_nt.next = token_source.getNextToken();
  jj_gen++;
  return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
  Token t = token;
  for (int i = 0; i < index; i++) {
    if (t.next != null) t = t.next;
    else t = t.next = token_source.getNextToken();
  }
  return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
  if (pos >= 100) {
   return;
  }

  if (pos == jj_endpos + 1) {
    jj_lasttokens[jj_endpos++] = kind;
  } else if (jj_endpos != 0) {
    jj_expentry = new int[jj_endpos];

    for (int i = 0; i < jj_endpos; i++) {
    jj_expentry[i] = jj_lasttokens[i];
    }

    for (int[] oldentry : jj_expentries) {
    if (oldentry.length == jj_expentry.length) {
      boolean isMatched = true;

      for (int i = 0; i < jj_expentry.length; i++) {
      if (oldentry[i] != jj_expentry[i]) {
        isMatched = false;
        break;
      }

      }
      if (isMatched) {
      jj_expentries.add(jj_expentry);
      break;
      }
    }
    }

    if (pos != 0) {
    jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
  jj_expentries.clear();
  boolean[] la1tokens = new boolean[95];
  if (jj_kind >= 0) {
    la1tokens[jj_kind] = true;
    jj_kind = -1;
  }
  for (int i = 0; i < 60; i++) {
    if (jj_la1[i] == jj_gen) {
    for (int j = 0; j < 32; j++) {
      if ((jj_la1_0[i] & (1<<j)) != 0) {
      la1tokens[j] = true;
      }
      if ((jj_la1_1[i] & (1<<j)) != 0) {
      la1tokens[32+j] = true;
      }
      if ((jj_la1_2[i] & (1<<j)) != 0) {
      la1tokens[64+j] = true;
      }
    }
    }
  }
  for (int i = 0; i < 95; i++) {
    if (la1tokens[i]) {
    jj_expentry = new int[1];
    jj_expentry[0] = i;
    jj_expentries.add(jj_expentry);
    }
  }
  jj_endpos = 0;
  jj_rescan_token();
  jj_add_error_token(0, 0);
  int[][] exptokseq = new int[jj_expentries.size()][];
  for (int i = 0; i < jj_expentries.size(); i++) {
    exptokseq[i] = jj_expentries.get(i);
  }
  return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : token_source.lexStateNames[token_source.curLexState]);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
  return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
  jj_rescan = true;
  for (int i = 0; i < 7; i++) {
    try {
    JJCalls p = jj_2_rtns[i];

    do {
      if (p.gen > jj_gen) {
      jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
      switch (i) {
        case 0: jj_3_1(); break;
        case 1: jj_3_2(); break;
        case 2: jj_3_3(); break;
        case 3: jj_3_4(); break;
        case 4: jj_3_5(); break;
        case 5: jj_3_6(); break;
        case 6: jj_3_7(); break;
      }
      }
      p = p.next;
    } while (p != null);

    } catch(LookaheadSuccess ls) { }
  }
  jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
  JJCalls p = jj_2_rtns[index];
  while (p.gen > jj_gen) {
    if (p.next == null) { p = p.next = new JJCalls(); break; }
    p = p.next;
  }

  p.gen = jj_gen + xla - jj_la; 
  p.first = token;
  p.arg = xla;
  }

  static final class JJCalls {
  int gen;
  Token first;
  int arg;
  JJCalls next;
  }


}
   
 

/* JavaCC - OriginalChecksum=10bd6a4222260e67df352d995d7313ce (do not edit this line) */
