/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Expression.jj */
/*@egen*//*
 * Copyright (c) 2001-2016 Territorium Online Srl. All Rights Reserved.
 *
 * This file contains Original Code and/or Modifications of Original Code as
 * defined in and that are subject to the Territorium Online License Version
 * 1.0. You may not use this file except in compliance with the License. Please
 * obtain a copy of the License at http://www.mapaccel.com/license/ and read it
 * before using this file.
 *
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, AND TERRITORIUM ONLINE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 * A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. Please see the
 * License for the specific language governing rights and limitations under the
 * License.
 */
options
{
  OUTPUT_LANGUAGE = "java"; // java,c++
  JAVA_TEMPLATE_TYPE = "modern";

  STATIC = false; /* true */
  CACHE_TOKENS = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
  UNICODE_INPUT = true; /* false */
  JAVA_UNICODE_ESCAPE = true;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;           

                         
                            /* false */

  OUTPUT_DIRECTORY = ".";
                                           

  // DEBUG
  DEBUG_TOKEN_MANAGER = false;
  DEBUG_PARSER = false;
}

PARSER_BEGIN(Expression)
//C++
//protected:
//  virtual void jjtreeOpenNodeScope(SimpleNode * node) = 0;
//  virtual void jjtreeCloseNodeScope(SimpleNode * node) = 0;

//JAVA
package org.parser;

public abstract class Expression/*@bgen(jjtree)*/implements ExpressionTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTExpressionState jjtree = new JJTExpressionState();

/*@egen*/
  protected final Node rootNode() { return jjtree.rootNode(); }
  protected void jjtreeOpenNodeScope(Node node) throws ParseException {}
  protected void jjtreeCloseNodeScope(Node node) throws ParseException {}
}

PARSER_END(Expression)


/*****************************************
 * LEXICAL & REGEXP GRAMMARS STARTS HERE *
 *****************************************/
// Skip White Space characters and Line Terminators
SKIP :
{
  "	"	/* Horizontal Tabulation \t */
| "\n"		/* New Line u000A */
| "\u000b"	/* Vertical Tabulation \v */
| ""	/* Form Feed \f */
| "\r"		/* Carriage Return u000D */
| " "	/* Space */
| "\u00a0"	/* No-break space NO C++*/
| "\u2028"	/* Line separator NO C++ */
| "\u2029"	/* Paragraph separator NO C++ */
| "\u3000"	/* Ideographic Space NO C++ */
}


// Separators & Brackets
TOKEN :
{
  < LP : "(" >
| < RP : ")" >
| < LSP : "[" >
| < RSP : "]" >
| < DOT : "." >
| < COMMA : "," >
| < COLON : ":" >
| < DOLLAR : "$" >
| < SEMICOLON : ";" >
}



// Internal Tokens
TOKEN:
{
  < #SIGN :		["-","+"] >
| < #DIGIT :	["0"-"9"] >
| < #HEX :		["0"-"9","a"-"f","A"-"F"] >
}


// Constants Tokens
TOKEN [ IGNORE_CASE ] :
{
  < NULL_TOKEN : "null" >
| < BOOL_TOKEN : "false" | "true"  >
}


// Numeric Tokens
TOKEN:
{
  < OCTAL_TOKEN : "0" ([ "0"-"7" ])+ >
| < INTEGER_TOKEN : "0" | [ "1"-"9" ] (< DIGIT >)* >
| < HEXADECIMAL_TOKEN : "0" [ "x", "X" ] (< HEX >)+ >

| < DECIMAL_TOKEN : "NaN" | "Infinity" | < DECIMAL > | (< INTEGER_TOKEN >  | < DECIMAL >) < EXPONENT > >

| < #DECIMAL :	("0" | ["1"-"9"] (< DIGIT >)*)? "." (< DIGIT >)+ >
| < #EXPONENT :	["e","E"] (< SIGN >)? (< DIGIT >)+ >
}


// String Tokens
TOKEN:
{ 
  < UUID_TOKEN : "{" (< HEX >){8} "-" (< HEX >){4} "-" (< HEX >){4} "-" (< HEX >){4} "-" (< HEX >){12} "}" >
| < REGEXP_TOKEN : "/" ( "\\/" | ~["/"] )* "/" >
| < STRING_TOKEN : "'" ( "''" | ~["'"] )* "'" >
}


// Temporal Tokens
TOKEN:
{ 
  < LOCALTIME_TOKEN : (< DIGIT >){2} ":" (< DIGIT >){2} ( ":" (< DIGIT >){2} ( "." (< DIGIT >)+ )? )? >
| < LOCALDATE_TOKEN : (< SIGN >)? (< DIGIT >){4,} "-" (< DIGIT >){2} "-" (< DIGIT >){2} >
| < LOCALDATETIME_TOKEN : < LOCALDATE_TOKEN > "T" < LOCALTIME_TOKEN > >

| < OFFSETTIME_TOKEN : < LOCALTIME_TOKEN > < TIMEZONE> >
| < OFFSETDATETIME_TOKEN : < LOCALDATETIME_TOKEN > < TIMEZONE> >

| < #TIMEZONE : "Z" | < SIGN > (< DIGIT >){2} ( (":")? (< DIGIT >){2})? >
}


// Geometry Tokens
TOKEN [ IGNORE_CASE ] :
{
  < SRID_TOKEN : "SRID=" >
| < POINT_TOKEN : "POINT" >
| < POLYGON_TOKEN : "POLYGON" >
| < LINESTRING_TOKEN : "LINESTRING" >
| < MULTIPOINT_TOKEN : "MULTIPOINT" >
| < MULTIPOLYGON_TOKEN : "MULTIPOLYGON" >
| < MULTILINESTRING_TOKEN : "MULTILINESTRING" >
| < GEOMETRYCOLLECTION_TOKEN : "GEOMETRYCOLLECTION" >
| < ENVELOPE_TOKEN : "ENVELOPE" >
| < DE9IM: (["*", "T", "F", "0"-"2"]){9} >
}


// Arithmetic operators
TOKEN:
{
  < ADD : "+" >
| < SUB : "-" >
| < MUL : "*" >
| < DIV : "/" >
| < MOD : "%" >
}


// Sort operators
TOKEN [ IGNORE_CASE ] :
{
  < ASC : "ASC" >
| < DESC : "DESC" >
}


// Logic operators
TOKEN [ IGNORE_CASE ] :
{
  < OR : "OR" >
| < AND : "AND" >
| < NOT : "NOT" >
}


// Comparison operators
TOKEN [ IGNORE_CASE ] :
{
  < EQ : ( "=" | "EQ" ) >
| < LT : ( "<" | "LT" ) >
| < GT : ( ">" | "GT" ) >
| < NEQ : ( "<>" | "NE" ) >
| < LTE : ( "<=" | "LE" ) >
| < GTE : ( ">=" | "GE" ) >
| < IS : "IS" >
| < IN : "IN" >
| < LIKE : "LIKE" >
| < ILIKE : "ILIKE" >
| < EXISTS : "EXISTS" >
| < BETWEEN : "BETWEEN" >
}


// Spatial operators
TOKEN [ IGNORE_CASE ] :
{
  < BBOX : "BBOX" >
| < RELATE : "RELATE" >
| < EQUALS : "EQUALS" >
| < BEYOND : "BEYOND" >
| < WITHIN : "WITHIN" >
| < DWITHIN : "DWITHIN" >
| < TOUCHES : "TOUCHES" >
| < CROSSES : "CROSSES" >
| < CONTAINS : "CONTAINS" >
| < OVERLAPS : "OVERLAPS" >
| < DISJOINT : "DISJOINT" >
| < INTERSECTS : "INTERSECTS" >
}

// unit constants
TOKEN [ IGNORE_CASE ] :
{
  < FEET : "feet" >
| < METERS : "meters" >
| < KILOMETERS : "kilometers" >
| < STATUTE_MILES : "statute miles" >
| < NAUTICAL_MILES : "nautical miles" >
}


// Identifier Tokens
TOKEN:
{ 
  < IDENTIFIER_TOKEN : < LETTER > (< LETTER > | < DIGIT >| < DOLLAR >)* >
| < IDENTIFIER_QUOTED_TOKEN : "\"" ( ~["\""] )* "\"" >
| < #LETTER : ["a"-"z", "A"-"Z", "_"] >
}


// Duration Literals
TOKEN:
{ 
  < DURATION : "P" (< DURATION_DATE > ("T" < DURATION_TIME >)? | "T" < DURATION_TIME >) >

| < #DURATION_DATE : (< DIGIT > "Y")? (< DIGIT > "M")? (< DIGIT > "W")? (< DIGIT > "D")? >
| < #DURATION_TIME : (< DIGIT > "H")? (< DIGIT > "M")? (< DIGIT > "S")? >
}





/*****************************************
 *         LITERAL GRAMMAR               *
 *****************************************/
void parseNull() :
{}
{/*@bgen(jjtree) NIL */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTNIL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < NULL_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/     
}


void parseBool() :
{}
{/*@bgen(jjtree) BOOL */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTBOOL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < BOOL_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/      
}


void parseUuid() :
{}
{/*@bgen(jjtree) UUID */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTUUID);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < UUID_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/      
}


void parseRegExp() :
{}
{/*@bgen(jjtree) REGEXP */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTREGEXP);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < REGEXP_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/        
}


void parseString() :
{}
{/*@bgen(jjtree) STRING */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTSTRING);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < STRING_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/        
}


void parseInteger() :
{}
{/*@bgen(jjtree) OCTAL */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTOCTAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < OCTAL_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/       
|/*@bgen(jjtree) INTEGER */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTINTEGER);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*/ < INTEGER_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }
  }
/*@egen*/         
|/*@bgen(jjtree) HEXADECIMAL */
  {
    SimpleNode jjtn003 = new SimpleNode(JJTHEXADECIMAL);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
  }
  try {
/*@egen*/ < HEXADECIMAL_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn003);
      }
    }
  }
/*@egen*/             
}


void parseDecimal() :
{}
{/*@bgen(jjtree) DECIMAL */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTDECIMAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < DECIMAL_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/         
}


void parseNumber() :
{}
{
  parseInteger()
| parseDecimal()
| < ADD > (parseInteger() | parseDecimal())
| < SUB > (/*@bgen(jjtree) NEGATIVE_INTEGER */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTNEGATIVE_INTEGER);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
           }
           try {
/*@egen*/parseInteger()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               if (jjtree.nodeCreated()) {
                jjtreeCloseNodeScope(jjtn001);
               }
             }
           }
/*@egen*/                   |/*@bgen(jjtree) NEGATIVE_NUMBER */
                                              {
                                                SimpleNode jjtn002 = new SimpleNode(JJTNEGATIVE_NUMBER);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
                                                jjtreeOpenNodeScope(jjtn002);
                                              }
                                              try {
/*@egen*/ parseDecimal()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte002) {
                                                if (jjtc002) {
                                                  jjtree.clearNodeScope(jjtn002);
                                                  jjtc002 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte002 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte002;
                                                }
                                                if (jjte002 instanceof ParseException) {
                                                  throw (ParseException)jjte002;
                                                }
                                                throw (Error)jjte002;
                                              } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002, true);
                                                  if (jjtree.nodeCreated()) {
                                                   jjtreeCloseNodeScope(jjtn002);
                                                  }
                                                }
                                              }
/*@egen*/                 )
}


void parseTemporal() :
{}
{/*@bgen(jjtree) LOCALTIME */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTLOCALTIME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < LOCALTIME_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/           
|/*@bgen(jjtree) LOCALDATE */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTLOCALDATE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*/ < LOCALDATE_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }
  }
/*@egen*/           
|/*@bgen(jjtree) LOCALDATETIME */
  {
    SimpleNode jjtn003 = new SimpleNode(JJTLOCALDATETIME);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
  }
  try {
/*@egen*/ < LOCALDATETIME_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn003);
      }
    }
  }
/*@egen*/               
|/*@bgen(jjtree) OFFSETTIME */
  {
    SimpleNode jjtn004 = new SimpleNode(JJTOFFSETTIME);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
  }
  try {
/*@egen*/ < OFFSETTIME_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn004);
      }
    }
  }
/*@egen*/            
|/*@bgen(jjtree) OFFSETDATETIME */
  {
    SimpleNode jjtn005 = new SimpleNode(JJTOFFSETDATETIME);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);
  }
  try {
/*@egen*/ < OFFSETDATETIME_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn005);
      }
    }
  }
/*@egen*/                
}


void parseGeometry() :
{}
{
  < POINT_TOKEN > parsePoint()
| < POLYGON_TOKEN > parsePolygon()
| < LINESTRING_TOKEN > parseLineString()
| < MULTIPOINT_TOKEN > parseMultiPoint()
| < MULTIPOLYGON_TOKEN > parseMultiPolygon()
| < MULTILINESTRING_TOKEN > parseMultiLineString()
| < GEOMETRYCOLLECTION_TOKEN > parseGeometryCollection()
| < ENVELOPE_TOKEN > parseEnvelope()
}


void parseEWKT()       :
{/*@bgen(jjtree) EWKT */
  SimpleNode jjtn000 = new SimpleNode(JJTEWKT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EWKT */
  try {
/*@egen*/
  < SRID_TOKEN > parseNumber() < SEMICOLON > parseGeometry()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


void parseCoordinate()             :
{/*@bgen(jjtree) COORDINATE */
  SimpleNode jjtn000 = new SimpleNode(JJTCOORDINATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COORDINATE */
  try {
/*@egen*/
  parseNumber() ( parseNumber() )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void parseCoordinateArray()                  :
{/*@bgen(jjtree) COORDINATEARRAY */
  SimpleNode jjtn000 = new SimpleNode(JJTCOORDINATEARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COORDINATEARRAY */
  try {
/*@egen*/
  < LP > parseCoordinate() ( < COMMA > parseCoordinate() )* < RP >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void parsePoint()        :
{/*@bgen(jjtree) POINT */
  SimpleNode jjtn000 = new SimpleNode(JJTPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) POINT */
  try {
/*@egen*/
  (< LP > parseCoordinate() < RP >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void parsePointCoordinate() :
{}
{/*@bgen(jjtree) Point */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTPOINT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  parseCoordinate()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/        | parsePoint()
}

void parseLineString()             :
{/*@bgen(jjtree) LINESTRING */
  SimpleNode jjtn000 = new SimpleNode(JJTLINESTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LINESTRING */
  try {
/*@egen*/
  (parseCoordinateArray() )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void parsePolygon()          :
{/*@bgen(jjtree) POLYGON */
  SimpleNode jjtn000 = new SimpleNode(JJTPOLYGON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) POLYGON */
  try {
/*@egen*/
  (< LP > parseCoordinateArray() (< COMMA > parseCoordinateArray() )* < RP >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void parseMultiPoint()             :
{/*@bgen(jjtree) MULTIPOINT */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPOINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MULTIPOINT */
  try {
/*@egen*/
  (< LP > parsePointCoordinate() (< COMMA > parsePointCoordinate() )* < RP >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void parseMultiLineString()                  :
{/*@bgen(jjtree) MULTILINESTRING */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTILINESTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MULTILINESTRING */
  try {
/*@egen*/
  (< LP > parseLineString() (< COMMA > parseLineString() )* < RP >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void parseMultiPolygon()               :
{/*@bgen(jjtree) MULTIPOLYGON */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPOLYGON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MULTIPOLYGON */
  try {
/*@egen*/
  (< LP > parsePolygon() (< COMMA > parsePolygon() )* < RP >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void parseGeometryCollection()                     :
{/*@bgen(jjtree) GEOMETRYCOLLECTION */
  SimpleNode jjtn000 = new SimpleNode(JJTGEOMETRYCOLLECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GEOMETRYCOLLECTION */
  try {
/*@egen*/
  (< LP > parseGeometry() (< COMMA > parseGeometry() )* < RP >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void parseEnvelope()           :
{/*@bgen(jjtree) ENVELOPE */
  SimpleNode jjtn000 = new SimpleNode(JJTENVELOPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ENVELOPE */
  try {
/*@egen*/
  (< LP > parseNumber() < COMMA > parseNumber() < COMMA > parseNumber() < COMMA > parseNumber() < RP >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void parseIdentifier() :
{}
{/*@bgen(jjtree) IDENTIFIER */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < IDENTIFIER_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/            
|/*@bgen(jjtree) IDENTIFIER_QUOTED */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFIER_QUOTED);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*/ < IDENTIFIER_QUOTED_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }
  }
/*@egen*/                   
}

void parseDE9IM() :
{}
{/*@bgen(jjtree) DE9IM */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTDE9IM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < DE9IM >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/       
}

void parseDistanceUnits()               :
{/*@bgen(jjtree) LENGTH_UNITS */
  SimpleNode jjtn000 = new SimpleNode(JJTLENGTH_UNITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LENGTH_UNITS */
  try {
/*@egen*/
  < FEET >
| < METERS >
| < KILOMETERS >
| < STATUTE_MILES >
| < NAUTICAL_MILES >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*****************************************
 *       NAME GRAMMAR                    *
 *****************************************/
void compileName() :
{}
{
  parseName() < EOF >
}


/*
 * Name ::=
 *		  <LocalName> ("." <Name> | "[" <Identifier> "]" ("." <Name>) ? ) ?
 */
void parseName()       :
{/*@bgen(jjtree) NAME */
  SimpleNode jjtn000 = new SimpleNode(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NAME */
  try {
/*@egen*/
  parseLocalName()
  (
	< DOT > parseName()
  | < LSP >/*@bgen(jjtree) CLASSIFIER */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTCLASSIFIER);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
            }
            try {
/*@egen*/ parseIdentifier()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn001);
                }
              }
            }
/*@egen*/             < RSP > ( < DOT > parseName() ) ? ) ?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * LocalName ::=
 *		  <Identifier>
 */
void parseLocalName()            :
{/*@bgen(jjtree) LOCALNAME */
  SimpleNode jjtn000 = new SimpleNode(JJTLOCALNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LOCALNAME */
  try {
/*@egen*/
  parseIdentifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}




/*****************************************
 *       EXPRESSION GRAMMAR              *
 *****************************************/
void compileExpression() :
{}
{
  parseExpressionList() < EOF >
}


/*
 * ExpressionList ::=
 *		  <Expression> ("," <Expression>)*
 */
void parseExpressionList()                 :
{/*@bgen(jjtree) EXPRESSIONLIST */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EXPRESSIONLIST */
  try {
/*@egen*/
  parseFilter() (< COMMA > parseFilter() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * Expression ::=
 *		  <MultiplicativeExpression> ("+" <MultiplicativeExpression>)*
 *      | <MultiplicativeExpression> ("-" <MultiplicativeExpression>)*
 */
void parseExpression()                   :
{/*@bgen(jjtree) BINARYEXPRESSION */
  SimpleNode jjtn000 = new SimpleNode(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BINARYEXPRESSION */
  try {
/*@egen*/
  parseMultiplicativeExpression()
  (
    < ADD >/*@bgen(jjtree) ADDITION */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTADDITION);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
            }
            try {
/*@egen*/ parseMultiplicativeExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn001);
                }
              }
            }
/*@egen*/          
  | < SUB >/*@bgen(jjtree) SUBTRACTION */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTSUBTRACTION);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);
            }
            try {
/*@egen*/ parseMultiplicativeExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn002);
                }
              }
            }
/*@egen*/             )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * MultiplicativeExpression ::=
 *		  <UnaryExpression> ("*" <UnaryExpression>)*
 *		| <UnaryExpression> ("/" <UnaryExpression>)*
 *		| <UnaryExpression> ("%" <UnaryExpression>)*
 */
void parseMultiplicativeExpression()                   :
{/*@bgen(jjtree) BinaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BinaryExpression */
  try {
/*@egen*/
  parseUnaryExpression()
  (
    < MUL >/*@bgen(jjtree) Multiplication */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLICATION);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
            }
            try {
/*@egen*/ parseUnaryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn001);
                }
              }
            }
/*@egen*/                
  | < DIV >/*@bgen(jjtree) Division */
            {
              SimpleNode jjtn002 = new SimpleNode(JJTDIVISION);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);
            }
            try {
/*@egen*/ parseUnaryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn002);
                }
              }
            }
/*@egen*/          
  | < MOD >/*@bgen(jjtree) Modulo */
            {
              SimpleNode jjtn003 = new SimpleNode(JJTMODULO);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
              jjtreeOpenNodeScope(jjtn003);
            }
            try {
/*@egen*/ parseUnaryExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                throw (RuntimeException)jjte003;
              }
              if (jjte003 instanceof ParseException) {
                throw (ParseException)jjte003;
              }
              throw (Error)jjte003;
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003, true);
                if (jjtree.nodeCreated()) {
                 jjtreeCloseNodeScope(jjtn003);
                }
              }
            }
/*@egen*/        )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * UnaryExpression ::=
 *		  <NULL_LITERAL>
 *		| <Literal>
 *		| <NamedExpression>
 *		| "(" <Expression> ")"
 */
void parseUnaryExpression() :
{}
{
  parseNull()
| parseLiteral()
| parseNamedExpression() 
| < LP > parseFilter() < RP > 
}


/*
 * Literal ::=
 *		  <UUID_LITERAL>
 *		| <NUMBER_LITERAL>
 *		| <STRING_LITERAL>
 *		| <TEMPORAL_LITERAL>
 *		| <GEOMETRY_LITERAL>
 */
void parseLiteral()          :
{/*@bgen(jjtree) LITERAL */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LITERAL */
  try {
/*@egen*/
  parseUuid()
| parseNumber()
| parseString()
| parseTemporal()
| parseGeometry()
| parseEWKT()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * NamedExpression ::=
 *		  <Binding>
 *		| <Parameter>
 *		| <Attribute>
 *		| <Function>
 */
void parseNamedExpression() :
{}
{
  parseBinding() 
| parseParameter() 
| LOOKAHEAD(parseFunction()) parseFunction() 
| parseAttribute() 
}


/*
 * Parameter ::=
 *		  "$" <Identifier>
 * 		| "$" <INTEGER_LITERAL>
 */
void parseParameter() :
{}
{
  < DOLLAR >
  (/*@bgen(jjtree) PARAMETER */
    {
      SimpleNode jjtn001 = new SimpleNode(JJTPARAMETER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/
    parseIdentifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn001);
        }
      }
    }
/*@egen*/           
  |/*@bgen(jjtree) PARAMETERINDEX */
    {
      SimpleNode jjtn002 = new SimpleNode(JJTPARAMETERINDEX);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/ parseInteger()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn002);
        }
      }
    }
/*@egen*/                )
}


/*
 * Binding ::=
*		  ":" <Name>
 */
void parseBinding()          :
{/*@bgen(jjtree) BINDING */
  SimpleNode jjtn000 = new SimpleNode(JJTBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BINDING */
  try {
/*@egen*/
  < COLON > parseName()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * Attribute ::=
 *		  <Name>
 */
void parseAttribute()            :
{/*@bgen(jjtree) ATTRIBUTE */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ATTRIBUTE */
  try {
/*@egen*/
  parseName()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * Function ::=
 *		  <Name> "(" <ExpressionList> ")"
 */
void parseFunction()           :
{/*@bgen(jjtree) FUNCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FUNCTION */
  try {
/*@egen*/
  parseName() < LP > ( parseExpressionList() )? < RP >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/ 
}





/*****************************************
 *          FILTER GRAMMAR               *
 *****************************************/
void compileFilter() :
{}
{
  parseFilter() < EOF >
}


/*
 * Filter ::=
 *		  <AndFilter> ( "OR" <AndFilter> )*
 */
void parseFilter()     :
{/*@bgen(jjtree) OR */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OR */
  try {
/*@egen*/
  parseAndFilter() (< OR > parseAndFilter())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * AndFilter ::=
 *		  <Predicate> ( "AND" <Predicate> )*
 */
void parseAndFilter()      :
{/*@bgen(jjtree) AND */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AND */
  try {
/*@egen*/
  parseNotFilter() (< AND > parseNotFilter())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * NotFilter ::=
 *		  "NOT" <Predicate>
 *		|  <Predicate>
 */
void parseNotFilter() :
{}
{
  < NOT >/*@bgen(jjtree) NOT */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTNOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          }
          try {
/*@egen*/ parsePredicate()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn001);
              }
            }
          }
/*@egen*/     
| parsePredicate()
}


/*
 * Predicate ::=
 *		  "(" <Filter> ")"
 *		| <BOOL_LITERAL>
 *		| <SpatialPredicate>
 *		| <ExistsPredicate>
 *		| <RelationalPredicate>
 */
void parsePredicate() :
{}
{
  parseBool()
|/*@bgen(jjtree) SPATIAL_PREDICATE */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTSPATIAL_PREDICATE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/ parseSpatialPredicate()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/                   
| LOOKAHEAD(parseExistsPredicate())/*@bgen(jjtree) EXISTS */
                                    {
                                      SimpleNode jjtn002 = new SimpleNode(JJTEXISTS);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                      jjtreeOpenNodeScope(jjtn002);
                                    }
                                    try {
/*@egen*/ parseExistsPredicate()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte002) {
                                      if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte002;
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        throw (ParseException)jjte002;
                                      }
                                      throw (Error)jjte002;
                                    } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002, true);
                                        if (jjtree.nodeCreated()) {
                                         jjtreeCloseNodeScope(jjtn002);
                                        }
                                      }
                                    }
/*@egen*/        
| LOOKAHEAD(parseRelationalPredicate()) parseRelationalPredicate()
| parseExpression()
//| < LP > parseFilter() < RP > 
}


/*
 * ExistsPredicate ::=
 *		  <NamedExpression> <ExistsOperator>
 */
void parseExistsPredicate() :
{}
{
  parseNamedExpression() parseExistsOperator()
}


/*
 * ExistsOperator ::=
 *		  <NamedExpression> "EXISTS"
 *		  <NamedExpression> "NOT" "EXISTS"
 */
void parseExistsOperator() :
{}
{/*@bgen(jjtree) EXISTS_OPERATOR */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTEXISTS_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < EXISTS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/                 
| < NOT >/*@bgen(jjtree) NOTEXISTS_OPERATOR */
          {
            SimpleNode jjtn002 = new SimpleNode(JJTNOTEXISTS_OPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/ < EXISTS >/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn002);
              }
            }
          }
/*@egen*/                    
}


/*
 * RelationalPredicate ::=
 *		  <Expression> <ExpressionPredicatePart>
 */
void parseRelationalPredicate()                       :
{/*@bgen(jjtree) RELATIONAL_PREDICATE */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONAL_PREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RELATIONAL_PREDICATE */
  try {
/*@egen*/
  parseExpression() parseRelationalPredicatePart()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * RelationalPredicatePart ::=
 *		  <IsNullPredicate> 
 *		| <ComparisionPredicate> 
 *		| <LikePredicate> 
 *		| <BetweenPredicate> 
 *		| <InPredicate> 
 */
void parseRelationalPredicatePart() :
{}
{
  parseIsNullPredicate() 
| parseComparisionPredicate() 
| LOOKAHEAD(parseLikePredicate()) parseLikePredicate() 
| LOOKAHEAD(parseBetweenPredicate()) parseBetweenPredicate()
| parseInPredicate()
}


/*
 * ComparisionPredicate ::=
 *		  <ComparisionOperator> <Expression>
 */
void parseComparisionPredicate() :
{}
{
  parseComparisionOperator() parseExpression()
}


/*
 * ComparisionOperator ::=
 *		  "=" | "<>" | "<" | "<=" | ">=" | ">"
 */
void parseComparisionOperator() :
{}
{/*@bgen(jjtree) EQUAL_OPERATOR */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTEQUAL_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < EQ >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/                
|/*@bgen(jjtree) NOTEQUAL_OPERATOR */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTNOTEQUAL_OPERATOR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*/ < NEQ >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }
  }
/*@egen*/                   
|/*@bgen(jjtree) LESS_OPERATOR */
  {
    SimpleNode jjtn003 = new SimpleNode(JJTLESS_OPERATOR);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
  }
  try {
/*@egen*/ < LT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn003);
      }
    }
  }
/*@egen*/               
|/*@bgen(jjtree) LESSEQUAL_OPERATOR */
  {
    SimpleNode jjtn004 = new SimpleNode(JJTLESSEQUAL_OPERATOR);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
  }
  try {
/*@egen*/ < LTE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn004);
      }
    }
  }
/*@egen*/                    
|/*@bgen(jjtree) GREATER_OPERATOR */
  {
    SimpleNode jjtn005 = new SimpleNode(JJTGREATER_OPERATOR);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);
  }
  try {
/*@egen*/ < GT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn005);
      }
    }
  }
/*@egen*/                  
|/*@bgen(jjtree) GREATEREQUAL_OPERATOR */
  {
    SimpleNode jjtn006 = new SimpleNode(JJTGREATEREQUAL_OPERATOR);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtreeOpenNodeScope(jjtn006);
  }
  try {
/*@egen*/ < GTE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn006);
      }
    }
  }
/*@egen*/                       
}


/*
 * IsNullPredicate ::=
 *		  "IS" <IsNullOperator>
 */
void parseIsNullPredicate() :
{}
{
  < IS > parseIsNullOperator()
}


/*
 * IsNullOperator ::=
 *		  "IS" "NULL"
 *		| "IS" "NOT" "NULL"
 */
void parseIsNullOperator() :
{}
{/*@bgen(jjtree) ISNULL_OPERATOR */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTISNULL_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < NULL_TOKEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/                 
| < NOT >/*@bgen(jjtree) ISNOTNULL_OPERATOR */
          {
            SimpleNode jjtn002 = new SimpleNode(JJTISNOTNULL_OPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/ < NULL_TOKEN >/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn002);
              }
            }
          }
/*@egen*/                    
}


/*
 * LikePredicate ::=
 *		  <LikeOperator> <LikePattern>
 */
void parseLikePredicate() :
{}
{
  parseLikeOperator() parseLikePattern()
}


/*
 * LikeOperator ::=
 *		  "LIKE" 
 *		  "ILIKE" 
 *		  "NOT" "LIKE" 
 *		  "NOT" "ILIKE" 
 */
void parseLikeOperator() :
{}
{/*@bgen(jjtree) ILIKE_OPERATOR */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTILIKE_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < ILIKE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/                
|/*@bgen(jjtree) LIKE_OPERATOR */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTLIKE_OPERATOR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*/ < LIKE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }
  }
/*@egen*/               
| LOOKAHEAD(2) < NOT >/*@bgen(jjtree) NOTLIKE_OPERATOR */
                       {
                         SimpleNode jjtn003 = new SimpleNode(JJTNOTLIKE_OPERATOR);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                         jjtreeOpenNodeScope(jjtn003);
                       }
                       try {
/*@egen*/ < LIKE >/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                           if (jjtree.nodeCreated()) {
                            jjtreeCloseNodeScope(jjtn003);
                           }
                         }
                       }
/*@egen*/                  
| < NOT >/*@bgen(jjtree) NOTILIKE_OPERATOR */
          {
            SimpleNode jjtn004 = new SimpleNode(JJTNOTILIKE_OPERATOR);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtreeOpenNodeScope(jjtn004);
          }
          try {
/*@egen*/ < ILIKE >/*@bgen(jjtree)*/
          } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn004);
              }
            }
          }
/*@egen*/                   
}


/*
 * LikePattern ::=
 *		  <STRING_LITERAL>
 *		  <REGEXP_LITERAL>
 */
void parseLikePattern() :
{}
{
  parseString()
| parseRegExp()
}


/*
 * BetweenPredicate ::=
 *		  <BetweenOperator>  <Expression> "AND" <Expression>
 */
void parseBetweenPredicate() :
{}
{
  parseBetweenOperator() parseExpression() < AND > parseExpression()
}


/*
 * BetweenOperator ::=
 *		  "BETWEEN"
 *		  "NOT" "BETWEEN"
 */
void parseBetweenOperator() :
{}
{/*@bgen(jjtree) BETWEEN_OPERATOR */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTBETWEEN_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < BETWEEN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/                  
| < NOT >/*@bgen(jjtree) NOTBETWEEN_OPERATOR */
          {
            SimpleNode jjtn002 = new SimpleNode(JJTNOTBETWEEN_OPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/ < BETWEEN  >/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn002);
              }
            }
          }
/*@egen*/                     
}


/*
 * InPredicate ::=
 *		  <InOperator>  "(" <InPredicateList> ")"
 */
void parseInPredicate() :
{}
{
  parseInOperator() "(" parseInPredicateList() ")"
}


/*
 * InOperator ::=
 *		  "IN"
 *		  "NOT" "IN"
 */
void parseInOperator() :
{}
{/*@bgen(jjtree) IN_OPERATOR */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTIN_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < IN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/             
| < NOT >/*@bgen(jjtree) NOTIN_OPERATOR */
          {
            SimpleNode jjtn002 = new SimpleNode(JJTNOTIN_OPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/ < IN  >/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn002);
              }
            }
          }
/*@egen*/                
}


/*
 * InPredicateList ::=
 *		  <Literal> ( "," <Literal> )*
 */
void parseInPredicateList()             :
{/*@bgen(jjtree) LITERALLIST */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERALLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LITERALLIST */
  try {
/*@egen*/
  parseInPredicateItem() (< COMMA > parseInPredicateItem() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * InPredicateItem ::=
 *		  <Literal> ( "," <Literal> )*
 */
void parseInPredicateItem() :
{}
{
  parseLiteral()
| parseBinding()
| parseParameter()
}





/*****************************************
 *         SPATIAL GRAMMAR               *
 *****************************************/


/*
 * SpatialPredicate ::=
 *		  "BBOX" <BBoxArguments>
 * 		| "RELATE" <RelateArguments>
 * 		| "CONTAINS" <SpatialArguments>
 * 		| "CROSSES" <SpatialArguments>
 * 		| "DISJOINT" <SpatialArguments>
 * 		| "EQUALS" <SpatialArguments>
 * 		| "INTERSECTS" <SpatialArguments>
 * 		| "OVERLAPS" <SpatialArguments>
 * 		| "TOUCHES" <SpatialArguments>
 * 		| "WITHIN" <SpatialArguments>
 * 		| "BEYOND" <SpatialDistanceArguments>
 * 		| "DWITHIN" <SpatialDistanceArguments>
 */
void parseSpatialPredicate() :
{}
{
  < BBOX >/*@bgen(jjtree) ST_BBOX_OPERATOR */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTST_BBOX_OPERATOR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
           }
           try {
/*@egen*/ parseBBoxArguments()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               if (jjtree.nodeCreated()) {
                jjtreeCloseNodeScope(jjtn001);
               }
             }
           }
/*@egen*/                  
| < RELATE >/*@bgen(jjtree) ST_RELATE_OPERATOR */
             {
               SimpleNode jjtn002 = new SimpleNode(JJTST_RELATE_OPERATOR);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
             }
             try {
/*@egen*/ parseRelateArguments()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 if (jjtree.nodeCreated()) {
                  jjtreeCloseNodeScope(jjtn002);
                 }
               }
             }
/*@egen*/                    

| < CONTAINS >/*@bgen(jjtree) ST_CONTAINS_OPERATOR */
               {
                 SimpleNode jjtn003 = new SimpleNode(JJTST_CONTAINS_OPERATOR);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
                 jjtreeOpenNodeScope(jjtn003);
               }
               try {
/*@egen*/ parseSpatialArguments()/*@bgen(jjtree)*/
               } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   throw (RuntimeException)jjte003;
                 }
                 if (jjte003 instanceof ParseException) {
                   throw (ParseException)jjte003;
                 }
                 throw (Error)jjte003;
               } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003, true);
                   if (jjtree.nodeCreated()) {
                    jjtreeCloseNodeScope(jjtn003);
                   }
                 }
               }
/*@egen*/                      
| < CROSSES >/*@bgen(jjtree) ST_CROSSES_OPERATOR */
              {
                SimpleNode jjtn004 = new SimpleNode(JJTST_CROSSES_OPERATOR);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
                jjtreeOpenNodeScope(jjtn004);
              }
              try {
/*@egen*/ parseSpatialArguments()/*@bgen(jjtree)*/
              } catch (Throwable jjte004) {
                if (jjtc004) {
                  jjtree.clearNodeScope(jjtn004);
                  jjtc004 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte004 instanceof RuntimeException) {
                  throw (RuntimeException)jjte004;
                }
                if (jjte004 instanceof ParseException) {
                  throw (ParseException)jjte004;
                }
                throw (Error)jjte004;
              } finally {
                if (jjtc004) {
                  jjtree.closeNodeScope(jjtn004, true);
                  if (jjtree.nodeCreated()) {
                   jjtreeCloseNodeScope(jjtn004);
                  }
                }
              }
/*@egen*/                     
| < DISJOINT >/*@bgen(jjtree) ST_DISJOINT_OPERATOR */
               {
                 SimpleNode jjtn005 = new SimpleNode(JJTST_DISJOINT_OPERATOR);
                 boolean jjtc005 = true;
                 jjtree.openNodeScope(jjtn005);
                 jjtreeOpenNodeScope(jjtn005);
               }
               try {
/*@egen*/ parseSpatialArguments()/*@bgen(jjtree)*/
               } catch (Throwable jjte005) {
                 if (jjtc005) {
                   jjtree.clearNodeScope(jjtn005);
                   jjtc005 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte005 instanceof RuntimeException) {
                   throw (RuntimeException)jjte005;
                 }
                 if (jjte005 instanceof ParseException) {
                   throw (ParseException)jjte005;
                 }
                 throw (Error)jjte005;
               } finally {
                 if (jjtc005) {
                   jjtree.closeNodeScope(jjtn005, true);
                   if (jjtree.nodeCreated()) {
                    jjtreeCloseNodeScope(jjtn005);
                   }
                 }
               }
/*@egen*/                      
| < EQUALS >/*@bgen(jjtree) ST_EQUALS_OPERATOR */
             {
               SimpleNode jjtn006 = new SimpleNode(JJTST_EQUALS_OPERATOR);
               boolean jjtc006 = true;
               jjtree.openNodeScope(jjtn006);
               jjtreeOpenNodeScope(jjtn006);
             }
             try {
/*@egen*/ parseSpatialArguments()/*@bgen(jjtree)*/
             } catch (Throwable jjte006) {
               if (jjtc006) {
                 jjtree.clearNodeScope(jjtn006);
                 jjtc006 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte006 instanceof RuntimeException) {
                 throw (RuntimeException)jjte006;
               }
               if (jjte006 instanceof ParseException) {
                 throw (ParseException)jjte006;
               }
               throw (Error)jjte006;
             } finally {
               if (jjtc006) {
                 jjtree.closeNodeScope(jjtn006, true);
                 if (jjtree.nodeCreated()) {
                  jjtreeCloseNodeScope(jjtn006);
                 }
               }
             }
/*@egen*/                    
| < INTERSECTS >/*@bgen(jjtree) ST_INTERSECTS_OPERATOR */
                 {
                   SimpleNode jjtn007 = new SimpleNode(JJTST_INTERSECTS_OPERATOR);
                   boolean jjtc007 = true;
                   jjtree.openNodeScope(jjtn007);
                   jjtreeOpenNodeScope(jjtn007);
                 }
                 try {
/*@egen*/ parseSpatialArguments()/*@bgen(jjtree)*/
                 } catch (Throwable jjte007) {
                   if (jjtc007) {
                     jjtree.clearNodeScope(jjtn007);
                     jjtc007 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte007 instanceof RuntimeException) {
                     throw (RuntimeException)jjte007;
                   }
                   if (jjte007 instanceof ParseException) {
                     throw (ParseException)jjte007;
                   }
                   throw (Error)jjte007;
                 } finally {
                   if (jjtc007) {
                     jjtree.closeNodeScope(jjtn007, true);
                     if (jjtree.nodeCreated()) {
                      jjtreeCloseNodeScope(jjtn007);
                     }
                   }
                 }
/*@egen*/                        
| < OVERLAPS >/*@bgen(jjtree) ST_OVERLAPS_OPERATOR */
               {
                 SimpleNode jjtn008 = new SimpleNode(JJTST_OVERLAPS_OPERATOR);
                 boolean jjtc008 = true;
                 jjtree.openNodeScope(jjtn008);
                 jjtreeOpenNodeScope(jjtn008);
               }
               try {
/*@egen*/ parseSpatialArguments()/*@bgen(jjtree)*/
               } catch (Throwable jjte008) {
                 if (jjtc008) {
                   jjtree.clearNodeScope(jjtn008);
                   jjtc008 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte008 instanceof RuntimeException) {
                   throw (RuntimeException)jjte008;
                 }
                 if (jjte008 instanceof ParseException) {
                   throw (ParseException)jjte008;
                 }
                 throw (Error)jjte008;
               } finally {
                 if (jjtc008) {
                   jjtree.closeNodeScope(jjtn008, true);
                   if (jjtree.nodeCreated()) {
                    jjtreeCloseNodeScope(jjtn008);
                   }
                 }
               }
/*@egen*/                      
| < TOUCHES >/*@bgen(jjtree) ST_TOUCHES_OPERATOR */
              {
                SimpleNode jjtn009 = new SimpleNode(JJTST_TOUCHES_OPERATOR);
                boolean jjtc009 = true;
                jjtree.openNodeScope(jjtn009);
                jjtreeOpenNodeScope(jjtn009);
              }
              try {
/*@egen*/ parseSpatialArguments()/*@bgen(jjtree)*/
              } catch (Throwable jjte009) {
                if (jjtc009) {
                  jjtree.clearNodeScope(jjtn009);
                  jjtc009 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte009 instanceof RuntimeException) {
                  throw (RuntimeException)jjte009;
                }
                if (jjte009 instanceof ParseException) {
                  throw (ParseException)jjte009;
                }
                throw (Error)jjte009;
              } finally {
                if (jjtc009) {
                  jjtree.closeNodeScope(jjtn009, true);
                  if (jjtree.nodeCreated()) {
                   jjtreeCloseNodeScope(jjtn009);
                  }
                }
              }
/*@egen*/                     
| < WITHIN >/*@bgen(jjtree) ST_WITHIN_OPERATOR */
             {
               SimpleNode jjtn010 = new SimpleNode(JJTST_WITHIN_OPERATOR);
               boolean jjtc010 = true;
               jjtree.openNodeScope(jjtn010);
               jjtreeOpenNodeScope(jjtn010);
             }
             try {
/*@egen*/ parseSpatialArguments()/*@bgen(jjtree)*/
             } catch (Throwable jjte010) {
               if (jjtc010) {
                 jjtree.clearNodeScope(jjtn010);
                 jjtc010 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte010 instanceof RuntimeException) {
                 throw (RuntimeException)jjte010;
               }
               if (jjte010 instanceof ParseException) {
                 throw (ParseException)jjte010;
               }
               throw (Error)jjte010;
             } finally {
               if (jjtc010) {
                 jjtree.closeNodeScope(jjtn010, true);
                 if (jjtree.nodeCreated()) {
                  jjtreeCloseNodeScope(jjtn010);
                 }
               }
             }
/*@egen*/                    

| < BEYOND >/*@bgen(jjtree) ST_BEYOND_OPERATOR */
             {
               SimpleNode jjtn011 = new SimpleNode(JJTST_BEYOND_OPERATOR);
               boolean jjtc011 = true;
               jjtree.openNodeScope(jjtn011);
               jjtreeOpenNodeScope(jjtn011);
             }
             try {
/*@egen*/ parseSpatialDistanceArguments()/*@bgen(jjtree)*/
             } catch (Throwable jjte011) {
               if (jjtc011) {
                 jjtree.clearNodeScope(jjtn011);
                 jjtc011 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte011 instanceof RuntimeException) {
                 throw (RuntimeException)jjte011;
               }
               if (jjte011 instanceof ParseException) {
                 throw (ParseException)jjte011;
               }
               throw (Error)jjte011;
             } finally {
               if (jjtc011) {
                 jjtree.closeNodeScope(jjtn011, true);
                 if (jjtree.nodeCreated()) {
                  jjtreeCloseNodeScope(jjtn011);
                 }
               }
             }
/*@egen*/                    
| < DWITHIN >/*@bgen(jjtree) ST_DWITHIN_OPERATOR */
              {
                SimpleNode jjtn012 = new SimpleNode(JJTST_DWITHIN_OPERATOR);
                boolean jjtc012 = true;
                jjtree.openNodeScope(jjtn012);
                jjtreeOpenNodeScope(jjtn012);
              }
              try {
/*@egen*/ parseSpatialDistanceArguments()/*@bgen(jjtree)*/
              } catch (Throwable jjte012) {
                if (jjtc012) {
                  jjtree.clearNodeScope(jjtn012);
                  jjtc012 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte012 instanceof RuntimeException) {
                  throw (RuntimeException)jjte012;
                }
                if (jjte012 instanceof ParseException) {
                  throw (ParseException)jjte012;
                }
                throw (Error)jjte012;
              } finally {
                if (jjtc012) {
                  jjtree.closeNodeScope(jjtn012, true);
                  if (jjtree.nodeCreated()) {
                   jjtreeCloseNodeScope(jjtn012);
                  }
                }
              }
/*@egen*/                     
}


/*
 * BBoxArguments ::=
 *		  "(" <Expression> "," <NUMBER_LITERAL> "," <NUMBER_LITERAL> "," <NUMBER_LITERAL> "," <NUMBER_LITERAL> ("," <STRING_LITERAL>)? ")"
 */
void parseBBoxArguments() :
{}
{
  < LP > parseExpression() < COMMA > parseNumber() < COMMA > parseNumber() < COMMA > parseNumber() < COMMA > parseNumber() (< COMMA > parseString() )? < RP >
}


/*
 * RelateArguments ::=
 *		  "(" <Expression> "," <Expression> "," <DE9IM_LITERAL> ")"
 */
void parseRelateArguments() :
{}
{
  < LP > parseExpression() < COMMA > parseExpression() < COMMA > parseDE9IM() < RP >
}


/*
 * SpatialArguments ::=
 *		  "(" <Expression> "," <Expression> ")"
 */
void parseSpatialArguments() :
{}
{
  < LP > parseExpression() < COMMA > parseExpression() < RP >
}


/*
 * SpatialDistanceArguments ::=
 *		  "(" <Expression> "," <Expression> "," <INTEGER_LITERAL> "," <LENGTH_UNIT> ")"
 */
void parseSpatialDistanceArguments() :
{}
{
  < LP > parseExpression() < COMMA > parseExpression() < COMMA > parseNumber() < COMMA > parseDistanceUnits() < RP >
}





/*****************************************
 *            SORT GRAMMAR               *
 *****************************************/
void compileSorting() :
{}
{
  parseSortList() < EOF >
}


/*
 * SortList ::=
 *		  <SortBy> ("," <SortBy>)*
 */
void parseSortList()           :
{/*@bgen(jjtree) SORTLIST */
  SimpleNode jjtn000 = new SimpleNode(JJTSORTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SORTLIST */
  try {
/*@egen*/
  parseSortBy() (< COMMA > parseSortBy() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * SortBy ::=
 *		  <SortDescending>
 *		  <SortAscending>
 */
void parseSortBy() :
{}
{
  LOOKAHEAD(parseSortDescending()) parseSortDescending()
| parseSortAscending()
}


/*
 * SortAscending ::=
 *		  <Attribute> ( "ASC" )?
 */
void parseSortAscending()                :
{/*@bgen(jjtree) SORTASCENDING */
  SimpleNode jjtn000 = new SimpleNode(JJTSORTASCENDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SORTASCENDING */
  try {
/*@egen*/
  parseAttribute() (< ASC >)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/ 
}


/*
 * SortAscending ::=
 *		  <Attribute> "DESC"
 */
void parseSortDescending()                 :
{/*@bgen(jjtree) SORTDESCENDING */
  SimpleNode jjtn000 = new SimpleNode(JJTSORTDESCENDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SORTDESCENDING */
  try {
/*@egen*/
  parseAttribute() < DESC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}