/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ExpressionSimpleC++.jj */
/*@egen*//*
 * Copyright (c) 2001-2016 Territorium Online Srl. All Rights Reserved.
 *
 * This file contains Original Code and/or Modifications of Original Code as
 * defined in and that are subject to the Territorium Online License Version
 * 1.0. You may not use this file except in compliance with the License. Please
 * obtain a copy of the License at http://www.mapaccel.com/license/ and read it
 * before using this file.
 *
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS
 * OR IMPLIED, AND TERRITORIUM ONLINE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 * A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. Please see the
 * License for the specific language governing rights and limitations under the
 * License.
 */
options
{
  JAVA_TEMPLATE_TYPE = "modern";

  STATIC = false; /* true */
  CACHE_TOKENS = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
  UNICODE_INPUT = true; /* false */
  JAVA_UNICODE_ESCAPE = true;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;           

                         
                         
                            /* false */
}

PARSER_BEGIN(Expression)

protected:
  virtual void jjtreeOpenNodeScope(SimpleNode * node) {};
  virtual void jjtreeCloseNodeScope(SimpleNode * node) {};

PARSER_END(Expression)


/*****************************************
 * LEXICAL & REGEXP GRAMMARS STARTS HERE *
 *****************************************/
// Skip White Space characters and Line Terminators
SKIP :
{
  "	"	/* Horizontal Tabulation \t */
| "\n"		/* New Line u000A */
| "\u000b"	/* Vertical Tabulation \v */
| ""	/* Form Feed \f */
| "\r"		/* Carriage Return u000D */
| " "	/* Space */
}


// Separators & Brackets
TOKEN :
{
  < LP : "(" >
| < RP : ")" >
| < DOT : "." >
| < COMMA : "," >
}



TOKEN:
{
  < STRING_TOKEN : "'" ( "''" | ~["'"] )* "'" >
| < IDENTIFIER_TOKEN : < LETTER > (< LETTER > | < DIGIT >)* >
| < IDENTIFIER_QUOTED_TOKEN : "\"" ( ~["\""] )* "\"" >
| < INTEGER_TOKEN : "0" | [ "1"-"9" ] (< DIGIT >)* >
| < DECIMAL_TOKEN : "NaN" | "Infinity" | < DECIMAL > | (< INTEGER_TOKEN >  | < DECIMAL >) >

| < #DIGIT :	["0"-"9"] >
| < #DECIMAL :	("0" | ["1"-"9"] (< DIGIT >)*)? "." (< DIGIT >)+ >
| < #LETTER : ["a"-"z", "A"-"Z", "_"] >
}


TOKEN [ IGNORE_CASE ] :
{
  < NULL_TOKEN : "null" >
| < NOT : "NOT" >
| < IS : "IS" >
}



/*****************************************
 *         LITERAL GRAMMAR               *
 *****************************************/
void parseNull() :
{}
{/*@bgen(jjtree) NIL */
  {
    SimpleNode *jjtn001 = new SimpleNode(JJTNIL);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < NULL_TOKEN >/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/     
}

void parseNumber() :
{}
{/*@bgen(jjtree) DECIMAL */
  {
    SimpleNode *jjtn001 = new SimpleNode(JJTDECIMAL);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < DECIMAL_TOKEN >/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/         
}

void parseString() :
{}
{/*@bgen(jjtree) STRING */
  {
    SimpleNode *jjtn001 = new SimpleNode(JJTSTRING);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < STRING_TOKEN >/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/        
}

void parseIdentifier() :
{}
{/*@bgen(jjtree) IDENTIFIER */
  {
    SimpleNode *jjtn001 = new SimpleNode(JJTIDENTIFIER);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < IDENTIFIER_TOKEN >/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/            
|/*@bgen(jjtree) IDENTIFIER_QUOTED */
  {
    SimpleNode *jjtn002 = new SimpleNode(JJTIDENTIFIER_QUOTED);
    bool jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*/ < IDENTIFIER_QUOTED_TOKEN >/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }
  }
/*@egen*/                   
}


/*****************************************
 *       NAME GRAMMAR                    *
 *****************************************/
/*
 * Name ::=
 *		  <LocalName> ("." <Name> ) ?
 */
void parseName()       :
{/*@bgen(jjtree) NAME */
  SimpleNode *jjtn000 = new SimpleNode(JJTNAME);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NAME */
  try {
/*@egen*/
  parseLocalName()
  (
	< DOT > parseName()) ?/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * LocalName ::=
 *		  <Identifier>
 */
void parseLocalName()            :
{/*@bgen(jjtree) LOCALNAME */
  SimpleNode *jjtn000 = new SimpleNode(JJTLOCALNAME);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LOCALNAME */
  try {
/*@egen*/
  parseIdentifier()/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}




/*****************************************
 *       EXPRESSION GRAMMAR              *
 *****************************************/
Node* compile() : {}
{
  compileExpression()
  { return jjtree.rootNode(); }
}

void compileExpression() :
{}
{
  parseExpressionList() < EOF >
}


/*
 * ExpressionList ::=
 *		  <Expression> ("," <Expression>)*
 */
void parseExpressionList()                 :
{/*@bgen(jjtree) EXPRESSIONLIST */
  SimpleNode *jjtn000 = new SimpleNode(JJTEXPRESSIONLIST);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EXPRESSIONLIST */
  try {
/*@egen*/
  parsePredicate() (< COMMA > parsePredicate() )*/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * Expression ::=
 *		  <NULL_LITERAL>
 *		| <Literal>
 *		| <Attribute>
 *		| "(" <Predicate> ")"
 */
void parseExpression() :
{}
{
  parseNull()
| parseLiteral()
| parseAttribute() 
| < LP > parsePredicate() < RP > 
}


/*
 * Literal ::=
 *		  <NUMBER_LITERAL>
 */
void parseLiteral()          :
{/*@bgen(jjtree) LITERAL */
  SimpleNode *jjtn000 = new SimpleNode(JJTLITERAL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LITERAL */
  try {
/*@egen*/
  parseString()/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * Attribute ::=
 *		  <Name>
 */
void parseAttribute()            :
{/*@bgen(jjtree) ATTRIBUTE */
  SimpleNode *jjtn000 = new SimpleNode(JJTATTRIBUTE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ATTRIBUTE */
  try {
/*@egen*/
  parseName()/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}



/*****************************************
 *          FILTER GRAMMAR               *
 *****************************************/
void compileFilter() :
{}
{
  parsePredicate() < EOF >
}


/*
 * Predicate ::=
 *		  "(" <parseExpression> ")"
 */
void parsePredicate() :
{}
{
  parseExpression()
}


/*
 * RelationalPredicate ::=
 *		  <Expression> <ExpressionPredicatePart>
 */
void parseRelationalPredicate()                       :
{/*@bgen(jjtree) RELATIONAL_PREDICATE */
  SimpleNode *jjtn000 = new SimpleNode(JJTRELATIONAL_PREDICATE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RELATIONAL_PREDICATE */
  try {
/*@egen*/
  parseExpression() parseRelationalPredicatePart()/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}


/*
 * RelationalPredicatePart ::=
 *		  "IS" <IsNullOperator>
 */
void parseRelationalPredicatePart() :
{}
{
  < IS > parseIsNullOperator()
}


/*
 * IsNullOperator ::=
 *		  "IS" "NULL"
 *		| "IS" "NOT" "NULL"
 */
void parseIsNullOperator() :
{}
{/*@bgen(jjtree) ISNULL_OPERATOR */
  {
    SimpleNode *jjtn001 = new SimpleNode(JJTISNULL_OPERATOR);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  < NULL_TOKEN >/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/                 
| < NOT >/*@bgen(jjtree) ISNOTNULL_OPERATOR */
          {
            SimpleNode *jjtn002 = new SimpleNode(JJTISNOTNULL_OPERATOR);
            bool jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/ < NULL_TOKEN >/*@bgen(jjtree)*/
          } catch (...) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
          } {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn002);
              }
            }
          }
/*@egen*/                    
}