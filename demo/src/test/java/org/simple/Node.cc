/* Generated By:JJTree: Do not edit this line. Node.cc Version 8.0 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=false */
#include "Node.h"
#include <stdio.h>



Node::Node(int id) : id(id)
{
}

Node::Node(Expression *parser, int id) :
     parser(parser), id(id) 
{
}
Node::~Node() {
    for (int i = 0; i < children.size(); ++i) {
      delete children[i];
    }
}
void Node::jjtOpen() const {
}

void Node::jjtClose() const {
}

void Node::jjtSetParent(Node *n) {
    parent = n; 
}
Node* Node::jjtGetParent() const {
    return parent; 
}

void Node::jjtAddChild(Node *n, int i) {
    if (i >= children.size()) {
      children.resize(i + 1, nullptr);
    }
    children[i] = n;
}

Node* Node::jjtGetChild(int i) const {
    return i < children.size() ? children[i] : nullptr;
}

int Node::jjtGetNumChildren() const {
    return children.size();
}

void Node::jjtSetValue(void * value) {
    this->value = value; 
}

void* Node::jjtGetValue() const {
    return value;
}


std::vector<Node *> Node::jjtExtractChildrenForDestruction() {
    return children;
}

JJString Node::toString() const { return jjtNodeName[id]; }
JJString Node::toString(const JJString& prefix) const { return prefix + toString(); }

static JJChar space_char_arr_[] = { ' ', '\0' };
static JJChar newline_char_arr_[] = { '\n', '\0' };
static JJString space = space_char_arr_;
static JJString newline = newline_char_arr_;

void Node::dumpToBuffer(const JJString& prefix, const JJString& separator, JJString *buffer) const {
    buffer->append(toString(prefix));
    buffer->append(separator);
    for (int i = 0; i < children.size(); ++i) {
      Node *n = (Node*)children[i];
      if (n != nullptr) {
        n->dumpToBuffer(prefix + space, separator, buffer);
      }
    }
}
  
void Node::dump(const JJString& prefix) const {
    JJString *buffer = new JJString();
    dumpToBuffer(prefix, newline, buffer);
    for (int i = 0; i < buffer->size(); i++) {
      printf("%c", (*buffer)[i]);
    }
    delete buffer;
}


/* JavaCC - OriginalChecksum=0bda033382ce14884a5ba9361b4c00b2 (do not edit this line) */
