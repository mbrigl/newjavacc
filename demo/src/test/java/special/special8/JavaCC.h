/* Generated By:JavaCC: Do not edit this line. JavaCC.h Version 8.0.0 */
/* JavaCCOptions:STATIC=true,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
#ifndef JAVACC_JAVACC_H
#define JAVACC_JAVACC_H

#include <string>
#include <memory>
#include <cassert>
#include <cstdint>
#include <cctype>
#include <functional>
#include <iostream>

#ifndef JAVACC_CHAR_TYPE
#define JAVACC_CHAR_TYPE char
#define JAVACC_CHAR_TYPE_SIZEOF 1
#define JAVACC_CIN  std::cin
#define JAVACC_COUT std::cout
#define JAVACC_CERR std::cerr
#define JAVACC_CLOG std::clog
#define JAVACC_WIDE(x) #x
#else
#define JAVACC_CIN  std::wcin
#define JAVACC_COUT std::wcout
#define JAVACC_CERR std::wcerr
#define JAVACC_CLOG std::wclog
#define JAVACC_WIDE(x) L#x
#endif

#ifndef JAVACC_STRING_TYPE
#define JAVACC_STRING_TYPE   std::basic_string<JAVACC_CHAR_TYPE>
#endif

#define JAVACC_SIMPLE_STRING std::basic_string<char>

typedef JAVACC_CHAR_TYPE      JJChar;
typedef JAVACC_STRING_TYPE    JJString;
typedef JAVACC_SIMPLE_STRING  JJSimpleString;

static const JJChar JJEMPTY[] = { 0 };
static const JJChar JJSPACE[] = { ' ', 0 };
static const JJChar JJCOMMA[] = { ',', 0 };
static const JJChar JJQUOTE[] = { '\'', 0 };

// Abstraction on stream classes to read a block of data into a buffer.
class ReaderStream {
public:
  // Read block of data into a buffer and return the actual number read.
  virtual size_t read(JJChar* buffer, int offset, size_t len) { return 0; }
  virtual bool   endOfInput() { return true; }
  virtual ~ReaderStream() {}
};


template<typename T>
struct JJEnter
{
    JJEnter(T f) : f{f} {f();}
    ~JJEnter(){}
    T f;
};
template<typename T>
struct JJExit
{
    JJExit(T f) : f{f} {}
    ~JJExit(){f();}
    T f;
};
#endif
/* JavaCC - OriginalChecksum=a0c2e9f57663c0d2674f2e328158fe1a (do not edit this line) */
