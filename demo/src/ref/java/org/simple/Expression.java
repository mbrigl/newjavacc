/* Expression.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Expression.java */


package org.simple;

public class Expression/*@bgen(jjtree)*/implements ExpressionTreeConstants, ExpressionConstants /*@egen*/ {/*@bgen(jjtree)*/
  protected JJTExpressionState jjtree = new JJTExpressionState();

/*@egen*/ 

  protected final Node rootNode() { return jjtree.rootNode(); }
  protected void jjtreeOpenNodeScope(Node node) throws ParseException {}
  protected void jjtreeCloseNodeScope(Node node) throws ParseException {}

  
 
 
 
/*****************************************
 *         LITERAL GRAMMAR               *
 *****************************************/                                            
  final public void  parseNull() throws ParseException {

    SimpleNode jjtn001 = new SimpleNode(JJTNIL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
    try {
      jj_consume_token(NULL_TOKEN);
    } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
    }
}

  
 
  final public void  parseNumber() throws ParseException {

    SimpleNode jjtn001 = new SimpleNode(JJTDECIMAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
    try {
      jj_consume_token(DECIMAL_TOKEN);
    } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
    }
}

  
 
  final public void  parseString() throws ParseException {

    SimpleNode jjtn001 = new SimpleNode(JJTSTRING);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
    try {
      jj_consume_token(STRING_TOKEN);
    } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
    }
}

  
 
  final public void  parseIdentifier() throws ParseException {
    switch (jj_nt.kind) {
    case IDENTIFIER_TOKEN:{

    SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        jj_consume_token(IDENTIFIER_TOKEN);
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    case IDENTIFIER_QUOTED_TOKEN:{

    SimpleNode jjtn002 = new SimpleNode(JJTIDENTIFIER_QUOTED);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);



                                 
  
      try {
        jj_consume_token(IDENTIFIER_QUOTED_TOKEN);
      } finally {

    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }





     
  
      }
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*****************************************
 *       NAME GRAMMAR                    *
 *****************************************/                                            
/*
 * Name ::=
 *		  <LocalName> ("." <Name> ) ?
 */    
  final public void  parseName() throws ParseException {/*@bgen(jjtree) NAME */
  SimpleNode jjtn000 = new SimpleNode(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseLocalName();
      switch (jj_nt.kind) {
      case DOT:{
        jj_consume_token(DOT);
        parseName();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * LocalName ::=
 *		  <Identifier>
 */    
  final public void  parseLocalName() throws ParseException {/*@bgen(jjtree) LOCALNAME */
  SimpleNode jjtn000 = new SimpleNode(JJTLOCALNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseIdentifier();
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
 
 
/*****************************************
 *       EXPRESSION GRAMMAR              *
 *****************************************/                                            
  final public void  compileExpression() throws ParseException {
    parseExpressionList();
    jj_consume_token(0);
}

  
 
 
/*
 * ExpressionList ::=
 *		  <Expression> ("," <Expression>)*
 */    
  final public void  parseExpressionList() throws ParseException {/*@bgen(jjtree) EXPRESSIONLIST */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parsePredicate();
      label_1:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        parsePredicate();
      }
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * Expression ::=
 *		  <NULL_LITERAL>
 *		| <Literal>
 *		| <Attribute>
 *		| "(" <Predicate> ")"
 */    
  final public void  parseExpression() throws ParseException {
    switch (jj_nt.kind) {
    case NULL_TOKEN:{
      parseNull();
      break;
      }
    case STRING_TOKEN:{
      parseLiteral();
      break;
      }
    case IDENTIFIER_TOKEN:
    case IDENTIFIER_QUOTED_TOKEN:{
      parseAttribute();
      break;
      }
    case LP:{
      jj_consume_token(LP);
      parsePredicate();
      jj_consume_token(RP);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  
 
 
/*
 * Literal ::=
 *		  <NUMBER_LITERAL>
 */    
  final public void  parseLiteral() throws ParseException {/*@bgen(jjtree) LITERAL */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseString();
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * Attribute ::=
 *		  <Name>
 */    
  final public void  parseAttribute() throws ParseException {/*@bgen(jjtree) ATTRIBUTE */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseName();
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
 
/*****************************************
 *          FILTER GRAMMAR               *
 *****************************************/                                            
  final public void  compileFilter() throws ParseException {
    parsePredicate();
    jj_consume_token(0);
}

  
 
 
/*
 * Predicate ::=
 *		  "(" <parseExpression> ")"
 */    
  final public void  parsePredicate() throws ParseException {
    parseExpression();
}

  
 
 
/*
 * RelationalPredicate ::=
 *		  <Expression> <ExpressionPredicatePart>
 */    
  final public void  parseRelationalPredicate() throws ParseException {/*@bgen(jjtree) RELATIONAL_PREDICATE */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONAL_PREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);



                               
/*@egen*/

    try {
      parseExpression();
      parseRelationalPredicatePart();
    } catch (Throwable jjte000) {                    
         
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    
    
    
    
    
    
    
    
    
    
    
    
                             
      
    } finally {

    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }





     
  
    }
}

  
 
 
/*
 * RelationalPredicatePart ::=
 *		  "IS" <IsNullOperator>
 */    
  final public void  parseRelationalPredicatePart() throws ParseException {
    jj_consume_token(IS);
    parseIsNullOperator();
}

  
 
 
/*
 * IsNullOperator ::=
 *		  "IS" "NULL"
 *		| "IS" "NOT" "NULL"
 */    
  final public void  parseIsNullOperator() throws ParseException {
    switch (jj_nt.kind) {
    case NULL_TOKEN:{

    SimpleNode jjtn001 = new SimpleNode(JJTISNULL_OPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);



                                 
  
      try {
        jj_consume_token(NULL_TOKEN);
      } finally {

    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }





     
  
      }
      break;
      }
    case NOT:{
      jj_consume_token(NOT);

            SimpleNode jjtn002 = new SimpleNode(JJTISNOTNULL_OPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);



                                         
          
      try {
        jj_consume_token(NULL_TOKEN);
      } finally {

            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              if (jjtree.nodeCreated()) {
               jjtreeCloseNodeScope(jjtn002);
              }
            }





             
          
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public ExpressionTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
    jj_la1_init_0();
 }
 private static void jj_la1_init_0() {
    jj_la1_0 = new int[] {0x3000,0x200,0x400,0x83880,0x180000,};
 }

  /** Constructor. */
  public Expression(Provider stream) {
  jj_input_stream = new JavaCharStream(stream, 1, 1);
  token_source = new ExpressionTokenManager(jj_input_stream);
  token = new Token();
  token.next = jj_nt = token_source.getNextToken();
  jj_gen = 0;
  for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Expression(String dsl) throws ParseException, TokenMgrException {
    this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
   ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
 if (jj_input_stream == null) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
 } else {
    jj_input_stream.ReInit(stream, 1, 1);
 }
 if (token_source == null) {
 token_source = new ExpressionTokenManager(jj_input_stream);
 }

  token_source.ReInit(jj_input_stream);
  token = new Token();
  token.next = jj_nt = token_source.getNextToken();
  jjtree.reset();
  jj_gen = 0;
  for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Expression(ExpressionTokenManager tm) {
  token_source = tm;
  token = new Token();
  token.next = jj_nt = token_source.getNextToken();
  jj_gen = 0;
  for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExpressionTokenManager tm) {
  token_source = tm;
  token = new Token();
  token.next = jj_nt = token_source.getNextToken();
  jjtree.reset();
  jj_gen = 0;
  for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
  Token oldToken = token;
  if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
  else jj_nt = jj_nt.next = token_source.getNextToken();
  if (token.kind == kind) {
    jj_gen++;
    return token;
  }
  jj_nt = token;
  token = oldToken;
  jj_kind = kind;
  throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
  if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
  else jj_nt = jj_nt.next = token_source.getNextToken();
  jj_gen++;
  return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
  Token t = token;
  for (int i = 0; i < index; i++) {
    if (t.next != null) t = t.next;
    else t = t.next = token_source.getNextToken();
  }
  return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
  jj_expentries.clear();
  boolean[] la1tokens = new boolean[22];
  if (jj_kind >= 0) {
    la1tokens[jj_kind] = true;
    jj_kind = -1;
  }
  for (int i = 0; i < 5; i++) {
    if (jj_la1[i] == jj_gen) {
    for (int j = 0; j < 32; j++) {
      if ((jj_la1_0[i] & (1<<j)) != 0) {
      la1tokens[j] = true;
      }
    }
    }
  }
  for (int i = 0; i < 22; i++) {
    if (la1tokens[i]) {
    jj_expentry = new int[1];
    jj_expentry[0] = i;
    jj_expentries.add(jj_expentry);
    }
  }
  int[][] exptokseq = new int[jj_expentries.size()][];
  for (int i = 0; i < jj_expentries.size(); i++) {
    exptokseq[i] = jj_expentries.get(i);
  }
  return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : token_source.lexStateNames[token_source.curLexState]);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
  return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }



}

   
 

