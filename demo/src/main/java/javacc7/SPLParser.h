/* Generated By:JavaCC: Do not edit this line. SPLParser.h Version 8.0.0 */
#pragma once

#include "JavaCC.h"
#include "CharStream.h"
#include "Token.h"
#include "TokenManager.h"
#include "SPLParserConstants.h"
#include "JJTSPLParserState.h"
#include "ErrorHandler.h"
#include "SPLParserTree.h"
  struct JJCalls {
    int        gen;
    int        arg;
    JJCalls*   next;
    Token*     first;
    ~JJCalls() { if (next) delete next; }
     JJCalls() { next = nullptr; arg = 0; gen = -1; first = nullptr; }
  };

class SPLParser {
public:
void CompilationUnit();
void VarDeclaration();
void Expression();
void Assignment();
void ConditionalOrExpression();
void ConditionalAndExpression();
void InclusiveOrExpression();
void ExclusiveOrExpression();
void AndExpression();
void EqualityExpression();
void RelationalExpression();
void AdditiveExpression();
void MultiplicativeExpression();
void UnaryExpression();
void PrimaryExpression();
void Id();
void Literal();
void BooleanLiteral();
void Statement();
void LabeledStatement();
void Block();
void StatementExpression();
void IfStatement();
void WhileStatement();
void IOStatement();
void ReadStatement();
void WriteStatement();
 inline bool jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    jj_done = false;
    return (!jj_3_1() || jj_done);
 { jj_save(0, xla); }
  }

 inline bool jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    jj_done = false;
    return (!jj_3_2() || jj_done);
 { jj_save(1, xla); }
  }

 inline bool jj_3R_RelationalExpression_184_3_39()
 {
    if (jj_done) return true;
    if (jj_3R_AdditiveExpression_200_3_41()) return true;
    Token * xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_RelationalExpression_186_5_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

 inline bool jj_3R_BooleanLiteral_277_3_28()
 {
    if (jj_done) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

 inline bool jj_3R_BooleanLiteral_275_3_24()
 {
    if (jj_done) return true;
    Token * xsp;
    xsp = jj_scanpos;
    if (!jj_3R_BooleanLiteral_275_3_27()) return false;
    jj_scanpos = xsp;
    if (jj_3R_BooleanLiteral_277_3_28()) return true;
    return false;
  }

 inline bool jj_3R_BooleanLiteral_275_3_27()
 {
    if (jj_done) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

 inline bool jj_3R_EqualityExpression_176_6_44()
 {
    if (jj_done) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_RelationalExpression_184_3_39()) return true;
    return false;
  }

 inline bool jj_3R_EqualityExpression_174_6_40()
 {
    if (jj_done) return true;
    Token * xsp;
    xsp = jj_scanpos;
    if (!jj_3R_EqualityExpression_174_6_43()) return false;
    jj_scanpos = xsp;
    if (jj_3R_EqualityExpression_176_6_44()) return true;
    return false;
  }

 inline bool jj_3R_EqualityExpression_174_6_43()
 {
    if (jj_done) return true;
    if (jj_scan_token(16)) return true;
    if (jj_3R_RelationalExpression_184_3_39()) return true;
    return false;
  }

 inline bool jj_3R_Literal_268_3_21()
 {
    if (jj_done) return true;
    if (jj_3R_BooleanLiteral_275_3_24()) return true;
    return false;
  }

 inline bool jj_3R_EqualityExpression_172_3_37()
 {
    if (jj_done) return true;
    if (jj_3R_RelationalExpression_184_3_39()) return true;
    Token * xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_EqualityExpression_174_6_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

 inline bool jj_3R_AndExpression_165_5_38()
 {
    if (jj_done) return true;
    if (jj_scan_token(15)) return true;
    if (jj_3R_EqualityExpression_172_3_37()) return true;
    return false;
  }

 inline bool jj_3R_Literal_261_2_20()
 {
    if (jj_done) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

 inline bool jj_3R_Literal_261_2_17()
 {
    if (jj_done) return true;
    Token * xsp;
    xsp = jj_scanpos;
    if (!jj_3R_Literal_261_2_20()) return false;
    jj_scanpos = xsp;
    if (jj_3R_Literal_268_3_21()) return true;
    return false;
  }

 inline bool jj_3R_AndExpression_164_3_35()
 {
    if (jj_done) return true;
    if (jj_3R_EqualityExpression_172_3_37()) return true;
    Token * xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AndExpression_165_5_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

 inline bool jj_3R_ExclusiveOrExpression_157_5_36()
 {
    if (jj_done) return true;
    if (jj_scan_token(14)) return true;
    if (jj_3R_AndExpression_164_3_35()) return true;
    return false;
  }

 inline bool jj_3R_Id_252_4_18()
 {
    if (jj_done) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

 inline bool jj_3R_ExclusiveOrExpression_156_3_33()
 {
    if (jj_done) return true;
    if (jj_3R_AndExpression_164_3_35()) return true;
    Token * xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExclusiveOrExpression_157_5_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

 inline bool jj_3R_InclusiveOrExpression_149_5_34()
 {
    if (jj_done) return true;
    if (jj_scan_token(13)) return true;
    if (jj_3R_ExclusiveOrExpression_156_3_33()) return true;
    return false;
  }

 inline bool jj_3R_InclusiveOrExpression_148_3_31()
 {
    if (jj_done) return true;
    if (jj_3R_ExclusiveOrExpression_156_3_33()) return true;
    Token * xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_InclusiveOrExpression_149_5_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

 inline bool jj_3R_PrimaryExpression_243_3_16()
 {
    if (jj_done) return true;
    if (jj_scan_token(29)) return true;
    if (jj_3R_Expression_115_3_19()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

 inline bool jj_3R_PrimaryExpression_241_3_15()
 {
    if (jj_done) return true;
    if (jj_3R_Id_252_4_18()) return true;
    return false;
  }

 inline bool jj_3R_PrimaryExpression_239_3_12()
 {
    if (jj_done) return true;
    Token * xsp;
    xsp = jj_scanpos;
    if (!jj_3R_PrimaryExpression_239_3_14()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_PrimaryExpression_241_3_15()) return false;
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_243_3_16()) return true;
    return false;
  }

 inline bool jj_3R_PrimaryExpression_239_3_14()
 {
    if (jj_done) return true;
    if (jj_3R_Literal_261_2_17()) return true;
    return false;
  }

 inline bool jj_3R_ConditionalAndExpression_141_5_32()
 {
    if (jj_done) return true;
    if (jj_scan_token(12)) return true;
    if (jj_3R_InclusiveOrExpression_148_3_31()) return true;
    return false;
  }

 inline bool jj_3R_ConditionalAndExpression_140_3_29()
 {
    if (jj_done) return true;
    if (jj_3R_InclusiveOrExpression_148_3_31()) return true;
    Token * xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ConditionalAndExpression_141_5_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

 inline bool jj_3R_UnaryExpression_230_3_57()
 {
    if (jj_done) return true;
    if (jj_3R_PrimaryExpression_239_3_12()) return true;
    return false;
  }

 inline bool jj_3R_ConditionalOrExpression_133_5_30()
 {
    if (jj_done) return true;
    if (jj_scan_token(11)) return true;
    if (jj_3R_ConditionalAndExpression_140_3_29()) return true;
    return false;
  }

 inline bool jj_3R_UnaryExpression_228_3_56()
 {
    if (jj_done) return true;
    if (jj_scan_token(28)) return true;
    if (jj_3R_UnaryExpression_226_3_51()) return true;
    return false;
  }

 inline bool jj_3R_ConditionalOrExpression_132_3_26()
 {
    if (jj_done) return true;
    if (jj_3R_ConditionalAndExpression_140_3_29()) return true;
    Token * xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ConditionalOrExpression_133_5_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

 inline bool jj_3R_UnaryExpression_226_3_55()
 {
    if (jj_done) return true;
    if (jj_scan_token(27)) return true;
    if (jj_3R_UnaryExpression_226_3_51()) return true;
    return false;
  }

 inline bool jj_3R_UnaryExpression_226_3_51()
 {
    if (jj_done) return true;
    Token * xsp;
    xsp = jj_scanpos;
    if (!jj_3R_UnaryExpression_226_3_55()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_UnaryExpression_228_3_56()) return false;
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_230_3_57()) return true;
    return false;
  }

 inline bool jj_3_1()
 {
    if (jj_done) return true;
    if (jj_3R_PrimaryExpression_239_3_12()) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

 inline bool jj_3R_MultiplicativeExpression_218_5_60()
 {
    if (jj_done) return true;
    if (jj_scan_token(26)) return true;
    if (jj_3R_UnaryExpression_226_3_51()) return true;
    return false;
  }

 inline bool jj_3R_Assignment_125_3_25()
 {
    if (jj_done) return true;
    if (jj_3R_PrimaryExpression_239_3_12()) return true;
    if (jj_scan_token(10)) return true;
    if (jj_3R_Expression_115_3_19()) return true;
    return false;
  }

 inline bool jj_3R_MultiplicativeExpression_216_5_59()
 {
    if (jj_done) return true;
    if (jj_scan_token(25)) return true;
    if (jj_3R_UnaryExpression_226_3_51()) return true;
    return false;
  }

 inline bool jj_3R_MultiplicativeExpression_214_5_58()
 {
    if (jj_done) return true;
    if (jj_scan_token(24)) return true;
    if (jj_3R_UnaryExpression_226_3_51()) return true;
    return false;
  }

 inline bool jj_3R_MultiplicativeExpression_214_5_52()
 {
    if (jj_done) return true;
    Token * xsp;
    xsp = jj_scanpos;
    if (!jj_3R_MultiplicativeExpression_214_5_58()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_MultiplicativeExpression_216_5_59()) return false;
    jj_scanpos = xsp;
    if (jj_3R_MultiplicativeExpression_218_5_60()) return true;
    return false;
  }

 inline bool jj_3R_Expression_118_3_23()
 {
    if (jj_done) return true;
    if (jj_3R_ConditionalOrExpression_132_3_26()) return true;
    return false;
  }

 inline bool jj_3R_LabeledStatement_308_3_13()
 {
    if (jj_done) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(33)) return true;
    return false;
  }

 inline bool jj_3R_MultiplicativeExpression_212_3_45()
 {
    if (jj_done) return true;
    if (jj_3R_UnaryExpression_226_3_51()) return true;
    Token * xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MultiplicativeExpression_214_5_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

 inline bool jj_3R_Expression_115_3_22()
 {
    if (jj_done) return true;
    if (jj_3R_Assignment_125_3_25()) return true;
    return false;
  }

 inline bool jj_3R_Expression_115_3_19()
 {
    if (jj_done) return true;
    Token * xsp;
    xsp = jj_scanpos;
    if (!jj_3R_Expression_115_3_22()) return false;
    jj_scanpos = xsp;
    if (jj_3R_Expression_118_3_23()) return true;
    return false;
  }

 inline bool jj_3R_AdditiveExpression_204_5_54()
 {
    if (jj_done) return true;
    if (jj_scan_token(23)) return true;
    if (jj_3R_MultiplicativeExpression_212_3_45()) return true;
    return false;
  }

 inline bool jj_3R_AdditiveExpression_202_5_53()
 {
    if (jj_done) return true;
    if (jj_scan_token(22)) return true;
    if (jj_3R_MultiplicativeExpression_212_3_45()) return true;
    return false;
  }

 inline bool jj_3R_AdditiveExpression_202_5_46()
 {
    if (jj_done) return true;
    Token * xsp;
    xsp = jj_scanpos;
    if (!jj_3R_AdditiveExpression_202_5_53()) return false;
    jj_scanpos = xsp;
    if (jj_3R_AdditiveExpression_204_5_54()) return true;
    return false;
  }

 inline bool jj_3R_AdditiveExpression_200_3_41()
 {
    if (jj_done) return true;
    if (jj_3R_MultiplicativeExpression_212_3_45()) return true;
    Token * xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AdditiveExpression_202_5_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

 inline bool jj_3_2()
 {
    if (jj_done) return true;
    if (jj_3R_LabeledStatement_308_3_13()) return true;
    return false;
  }

 inline bool jj_3R_RelationalExpression_192_5_50()
 {
    if (jj_done) return true;
    if (jj_scan_token(21)) return true;
    if (jj_3R_AdditiveExpression_200_3_41()) return true;
    return false;
  }

 inline bool jj_3R_RelationalExpression_190_5_49()
 {
    if (jj_done) return true;
    if (jj_scan_token(20)) return true;
    if (jj_3R_AdditiveExpression_200_3_41()) return true;
    return false;
  }

 inline bool jj_3R_RelationalExpression_188_5_48()
 {
    if (jj_done) return true;
    if (jj_scan_token(19)) return true;
    if (jj_3R_AdditiveExpression_200_3_41()) return true;
    return false;
  }

 inline bool jj_3R_RelationalExpression_186_5_47()
 {
    if (jj_done) return true;
    if (jj_scan_token(18)) return true;
    if (jj_3R_AdditiveExpression_200_3_41()) return true;
    return false;
  }

 inline bool jj_3R_RelationalExpression_186_5_42()
 {
    if (jj_done) return true;
    Token * xsp;
    xsp = jj_scanpos;
    if (!jj_3R_RelationalExpression_186_5_47()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_RelationalExpression_188_5_48()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_RelationalExpression_190_5_49()) return false;
    jj_scanpos = xsp;
    if (jj_3R_RelationalExpression_192_5_50()) return true;
    return false;
  }


public: 
  void setErrorHandler(ErrorHandler *eh) {
    if (delete_eh) delete errorHandler;
    errorHandler = eh;
    delete_eh = false;
  }

  TokenManager *token_source = nullptr;
  CharStream   *jj_input_stream = nullptr;
  /** Current token. */
  Token        *token = nullptr;
  /** Next token. */
  Token        *jj_nt = nullptr;

private: 
  int           jj_ntk;
  JJCalls       jj_2_rtns[3];
  bool          jj_rescan;
  int           jj_gc;
  Token        *jj_scanpos, *jj_lastpos;
  int           jj_la;
  /** Whether we are looking ahead. */
  bool          jj_lookingAhead;
  bool          jj_semLA;
  int           jj_gen;
  int           jj_la1[27];
  ErrorHandler *errorHandler = nullptr;

protected: 
  bool          delete_eh     = false;
  bool          delete_tokens = true;
  bool          hasError;

  Token        *head;

public: 
  SPLParser(TokenManager *tokenManager);
  virtual ~SPLParser();
void ReInit(TokenManager* tokenManager);
void clear();
Token * jj_consume_token(int kind);
bool  jj_scan_token(int kind);
Token * getNextToken();
Token * getToken(int index);
int jj_ntk_f();
private:
  int jj_kind;
  int **jj_expentries;
  int *jj_expentry;
  void jj_add_error_token(int kind, int pos);
protected:
  /** Generate ParseException. */
  virtual void  parseError();
private:
  int  indent; // trace indentation
  bool trace = true; // trace enabled if true

public:
  bool trace_enabled();
  void enable_tracing();
  void disable_tracing();
  void trace_call(const char *s);
  void trace_return(const char *s);
  void trace_token(Token *t, const char *where);
  void trace_scan(Token *t1, int t2);
  void jj_rescan_token();
  void jj_save(int index, int xla);

  /**
   * Returns the root node of the AST.  
   * It only makes sense to call this after a successful parse. 
   * @return the root node
   */
  public:
  Node* rootNode() {
    return jjtree.rootNode();
  }

  JJTSPLParserState jjtree;
private:
  bool jj_done;
};
/* JavaCC - OriginalChecksum=d47d25eec7fc0b0f4a857fdceb6dea39 (do not edit this line) */
