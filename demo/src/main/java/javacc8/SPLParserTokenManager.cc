/* Generated By:JavaCC: Do not edit this line. SPLParserTokenManager.cc Version 8.0.0 */
#include "SPLParserTokenManager.h"
#include "TokenMgrError.h"

static const long long stringLiterals[] = {
1LL, 0, 9LL, 2LL, -1LL, 
1LL, 0, 10LL, 3LL, -1LL, 
1LL, 0, 12LL, 5LL, -1LL, 
1LL, 0, 13LL, 4LL, -1LL, 
1LL, 0, 94LL, 14LL, -1LL, 
1LL, 0, 32LL, 1LL, -1LL, 
2LL, 0, 33LL, 61LL, 17LL, -1LL, 
1LL, 0, 33LL, 28LL, -1LL, 
7LL, 0, 98LL, 111LL, 111LL, 108LL, 101LL, 97LL, 110LL, 7LL, 2LL, 
1LL, 0, 37LL, 26LL, -1LL, 
4LL, 0, 101LL, 108LL, 115LL, 101LL, 37LL, 2LL, 
2LL, 0, 38LL, 38LL, 12LL, -1LL, 
1LL, 0, 38LL, 15LL, -1LL, 
5LL, 0, 102LL, 97LL, 108LL, 115LL, 101LL, 32LL, 2LL, 
1LL, 0, 40LL, 29LL, -1LL, 
3LL, 0, 105LL, 110LL, 116LL, 6LL, 2LL, 
2LL, 0, 105LL, 102LL, 36LL, 2LL, 
1LL, 0, 41LL, 30LL, -1LL, 
1LL, 0, 42LL, 24LL, -1LL, 
1LL, 0, 43LL, 22LL, -1LL, 
1LL, 0, 45LL, 23LL, -1LL, 
1LL, 0, 47LL, 25LL, -1LL, 
4LL, 0, 114LL, 101LL, 97LL, 100LL, 39LL, 2LL, 
4LL, 0, 116LL, 114LL, 117LL, 101LL, 31LL, 2LL, 
5LL, 0, 119LL, 114LL, 105LL, 116LL, 101LL, 40LL, 2LL, 
5LL, 0, 119LL, 104LL, 105LL, 108LL, 101LL, 38LL, 2LL, 
1LL, 0, 58LL, 33LL, -1LL, 
1LL, 0, 59LL, 9LL, -1LL, 
1LL, 0, 123LL, 34LL, -1LL, 
2LL, 0, 124LL, 124LL, 11LL, -1LL, 
1LL, 0, 124LL, 13LL, -1LL, 
2LL, 0, 60LL, 61LL, 20LL, -1LL, 
1LL, 0, 60LL, 18LL, -1LL, 
2LL, 0, 61LL, 61LL, 16LL, -1LL, 
1LL, 0, 61LL, 10LL, -1LL, 
1LL, 0, 125LL, 35LL, -1LL, 
2LL, 0, 62LL, 61LL, 21LL, -1LL, 
1LL, 0, 62LL, 19LL, -1LL, 
1LL, 0, 126LL, 27LL, -1LL};

static const long long jjCharData[][5] = {
{2LL, 1LL, 287948901175001088LL},
{4LL, 1LL, 0LL, 1LL, 576460743847706622LL},
{4LL, 1LL, 287948901175001088LL, 1LL, 576460743847706622LL}};

static const int jjcompositeState[][2] = {
{}, 
{0, 1}, 
{}};

static const int jjmatchKinds[] = {
8, 
41, 
41};

static const int jjnextStateSet[][2] = {
{1, 0}, 
{1, 2}, 
{1, 2}};

static const int jjInitStates[]  = {
1};

static const int canMatchAnyChar[] = {
2147483647};

static const JJString jjstrLiteralImages[] = {
""
, 
"\40", 
"\11", 
"\12", 
"\15", 
"\14", 
"\151\156\164", 
"\142\157\157\154\145\141\156", 
""
, 
"\73", 
"\75", 
"\174\174", 
"\46\46", 
"\174", 
"\136", 
"\46", 
"\75\75", 
"\41\75", 
"\74", 
"\76", 
"\74\75", 
"\76\75", 
"\53", 
"\55", 
"\52", 
"\57", 
"\45", 
"\176", 
"\41", 
"\50", 
"\51", 
"\164\162\165\145", 
"\146\141\154\163\145", 
"\72", 
"\173", 
"\175", 
"\151\146", 
"\145\154\163\145", 
"\167\150\151\154\145", 
"\162\145\141\144", 
"\167\162\151\164\145", 
""
, 
""
, 
""
};

static const unsigned long long jjtoSkip[] = {
   35184372088894ULL};
static const unsigned long long jjtoSpecial[] = {
   35184372088832ULL};
static const unsigned long long jjtoMore[] = {
   35184372088832ULL};
static const unsigned long long jjtoToken[] = {
   52776558133185ULL};
static const int jjnewLexState[] = {
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

static const JJChar lexStateNames_arr_0[] = 
{0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0};
static const JJString lexStateNames[] = {
lexStateNames_arr_0
};


bool SPLParserTokenManager::moveToNextChar() {
  if(input_stream->endOfInput())
    return false;

  curChar = input_stream->readChar();
  return true;
}



/** Constructor. */
SPLParserTokenManager::SPLParserTokenManager (JAVACC_CHARSTREAM * stream, int lexState)
{
    ReInit(stream, lexState);
}

/** Reinitialise parser. */
void SPLParserTokenManager::ReInit(JAVACC_CHARSTREAM * stream, int lexState)
{
    defaultLexState = 0;
    curLexState = 0;
    moveIndex = 1;
    errorHandler = nullptr;
    delete_eh = false;

    for (int i = 0; i < 3; i++) {
      int ind = 0;
      // We originally generate something like RLE for the static arrays and
      // we actually expannd them here.
      for (int j = 0; j < (int) jjCharData[i][0]; j += 2) {
        for (int k = 0; k < (int) jjCharData[i][j + 1]; k++) {
          jjChars[i][ind++] = jjCharData[i][j + 2];
        }
      }
    }

    jjmatchedPos = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    SwitchTo(lexState);
    errorHandler = new TokenManagerErrorHandler();
}

/** Switch to specified lex state. */
void SPLParserTokenManager::SwitchTo(int lexState)
{
    if (lexState >= 1 || lexState < 0) {
      JJString message;
#ifdef WIDE_CHAR
      message += L"Error: Ignoring invalid lexical state : ";
      message += lexState; message += L". State unchanged.";
#else
      message += "Error: Ignoring invalid lexical state : ";
      message += lexState; message += ". State unchanged.";
#endif
      throw new TokenMgrError(message, INVALID_LEXICAL_STATE);
    } else
      curLexState = lexState;
}

int SPLParserTokenManager::jjRunStringLiteralMatch() {
  int curPos = 0;
  int key = (int)curLexState << 16 | curChar;
  int startState = jjInitStates[curLexState];
  int index = getStartAndSize(key, 0);
  if (index != -1) {
    for (int i = 0; i < getStartAndSize(key, 1); i++) {
      int len = (int) stringLiterals[index++];
      int ignoreCase = (int) stringLiterals[index++];
      std::cerr << "Looking for string literal match of kind: " << stringLiterals[index + len]
                << "; token image: " << addUnicodeEscapes(tokenImage[stringLiterals[index + len]])
                << std::endl;
      do {
        std::cerr << "  Current character: '" << ((char)curChar) << "'" << std::endl;
        if (curChar != stringLiterals[index + curPos] &&
            (ignoreCase == 0 || curChar != stringLiterals[index + len + curPos])) break;
        if (++curPos == len) break;
        if (!moveToNextChar()) {
          --curPos;
          break;
        }
      } while(curPos < len);
      if (curPos == len) {
        jjmatchedKind = (int) stringLiterals[index + len + (ignoreCase * len)];
        jjmatchedPos = curPos;
        startState = (int) stringLiterals[index + len + (ignoreCase * len) + 1];
        std::cerr << "Currently matched the first: " << jjmatchedPos
            << " chars as kind: " << stringLiterals[index + len]
            << "; with image: " << addUnicodeEscapes(tokenImage[jjmatchedKind])
            << std::endl;
        if (!moveToNextChar()) {
          return curPos;
        }
        curPos++;
        break;
      } else {
        index += len + (ignoreCase * len) + 2;
        input_stream->backup(curPos + 1);
        curPos = 0;
        if (!moveToNextChar()) {
          assert(false);
        }
      }
    }
  } else {
      std::cerr << "No string literal start with char: '" << ((char)curChar) << "'" << std::endl;
  }
  return jjMoveNfa(startState, curPos);
}

int SPLParserTokenManager::jjMoveNfa(int startState, int curPos) {

  if (startState < 0) {
    std::cerr << "No NFA state at pos: " << curPos << std::endl;
    return curPos;
  }

  // We have an array indexed by the NFA state number to roughly indicate
  // the input position so when the input reaches part 0x7fffffff (which
  // should be extremely rare), we need to reset them all back to zero.
  if (++moveIndex == 0x7fffffff) {
    for (int i = 0; i < 3; i++) moved[i] = 0;
    moveIndex = 1;
  }

  // We initialize the kind to MAX value so that when a match is found, we can
  // simply check if it's less than the current match and store it in that
  // case. This helps implement the 'first occurring' rule properly.
  int cnt = 0;
  stateSet[cnt++] = startState;
  moved[startState] = moveIndex;
 
  // Some NFA states have epsilon transitions (move on empty string). So we
  // just start with all of them. Note that the nextStates array already adds
  // the epsilon closure. Only the initial state needs to do this explicitly.
  for (int s : jjcompositeState[startState]) { 
    if (moved[s] != moveIndex) {
      stateSet[cnt++] = s;
      moved[s] = moveIndex;
    }
  }

  std::cerr << "Starting NFA with start state: " << startState << std::endl;
  do {
    std::cerr << "Current character: '" << (char)curChar << "'" << std::endl;
    int newCnt = 0;
    int kind = 0x7fffffff;
    if (++moveIndex == 0x7fffffff) {
      for (int i = 0; i < 3; i++) moved[i] = 0;
      moveIndex = 1;
    }

    int vectorIndex = curChar >> 6;
    // unsigned long long bitpattern = (1ULL << (curChar & 0x37));
    unsigned long long bitpattern = (1ULL << (curChar & 077)) & 0x7fffffe07fffffeULL;
    do {
      int state = stateSet[--cnt];
      std::cerr << "Looking to move from state: " << state << " for: "
                << (jjmatchKinds[state] != 0x7fffffff
                   ? addUnicodeEscapes(tokenImage[jjmatchKinds[state]]).c_str() : " <UNKNOWN>")
                << std::endl;
      if ((jjChars[state][vectorIndex] & bitpattern) != 0L) {
        // Current input character can move this NFA state. So add all the
        // next states of the current states for use with the next input char.
        for (int idx = 0; idx < jjnextStateSet[state][0]; idx++) {
          int newState = jjnextStateSet[state][idx + 1];
          if (moved[newState] != moveIndex) {
            // We add each state only once.
            newStateSet[newCnt++] = newState;
            moved[newState] = moveIndex;
          }
        }
        int newKind = jjmatchKinds[state];
        if (kind > newKind) {
          // It's a state so store the matched kind if it's smaller than
          // what's already matched.
          kind = newKind;
          std::cerr << "Found a match of kind: " << kind << "; kind: "
                    << addUnicodeEscapes(tokenImage[kind]) << " using the first: " << curPos
                    << " characters." << std::endl;
        }
      }
    } while (cnt > 0);

    if (kind != 0x7fffffff) {
      // We found a match. So remember the kind and position of the match.
      jjmatchedKind = kind;
      jjmatchedPos = curPos;
      // Reset the kind to max value so we can contine looking for a longer
      // match.
      kind = 0x7fffffff;
    }

    // Swap the current and next state sets.
    int tmp;
    for(int i = 0; i < 3; i++) {
      tmp = stateSet[i];
      stateSet[i] = newStateSet[i];
      newStateSet[i] = tmp;
    }
    // Reset the number of states.
    cnt = newCnt;
    if (newCnt == 0) {
      // There were no transitions from any of the current states on the
      // current input. So we are done.
      std::cerr << "Done with NFA at pos: " << curPos << std::endl;
      return curPos;
    }
    // Read the next character and try to continue running the NFA.
    if (!moveToNextChar()) {
      // EOF reached!
      std::cerr << "Reached EOF here at pos: " << curPos << std::endl;
      return curPos;
    }
    ++curPos;
  } while (cnt > 0);

  throw "Interal error. Please submit a bug at: http://javacc.java.net.";
//  return curPos;
}

static bool isToken(int kind) {
  return (jjtoToken[kind >> 6] & (1ULL << (kind & 077))) != 0L;
}

static bool isSkip(int kind) {
  return (jjtoSkip[kind >> 6] & (1ULL << (kind & 077))) != 0L;
}

static bool isSpecial(int kind) {
  return (jjtoSpecial[kind >> 6] & (1ULL << (kind & 077))) != 0L;
}

static bool isMore(int kind) {
  return (jjtoMore[kind >> 6] & (1ULL << (kind & 077))) != 0L;
}

Token * SPLParserTokenManager::jjFillToken() {
  Token * t;
  JJString curTokenImage;
  int beginLine;
  int endLine;
  int beginColumn;
  int endColumn;
  if (jjmatchedPos < 0) {
    if (image.length() == 0) {
      curTokenImage = "";
    } else {
      curTokenImage = image;
    }
    beginLine = endLine = input_stream->getEndLine();
    beginColumn = endColumn = input_stream->getEndColumn();
  } else {
    JJString im = jjstrLiteralImages[jjmatchedKind];
    curTokenImage = (im.length() == 0) ? input_stream->GetImage() : im;
    beginLine = input_stream->getBeginLine();
    beginColumn = input_stream->getBeginColumn();
    endLine = input_stream->getEndLine();
    endColumn = input_stream->getEndColumn();
  }

   t = Token::newToken(jjmatchedKind);
   t->kind = jjmatchedKind;
   t->image = curTokenImage;

   t->beginLine = beginLine;
   t->endLine = endLine;
   t->beginColumn = beginColumn;
   t->endColumn = endColumn;

   return t;
}

/** Get the next Token. */
Token * SPLParserTokenManager::getNextToken() {
  Token * specialToken = nullptr;
  Token * matchedToken;
  int lastReadPosition = 0;

  EOFLoop:
  for (;;) {
    if(input_stream->endOfInput()) {
      std::cerr << "<" << addUnicodeEscapes(lexStateNames[curLexState]).c_str() << "> " 
                << "Reached EOF at " << input_stream->getBeginLine()
                << ":" << input_stream->getBeginColumn()
                << std::endl;
      // No input. So return EOF token.
      jjmatchedKind = _EOF;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken->specialToken = specialToken;
      return matchedToken;
    }

    // First see if we have any input at all.
    curChar = input_stream->BeginToken();

      std::cerr << "<" << addUnicodeEscapes(lexStateNames[curLexState]).c_str() << "> " 
                << " Current character: '" << (char)curChar
                << "' at " << input_stream->getBeginLine()
                << ":" << input_stream->getBeginColumn()
                << std::endl;

    // Set matched kind to a MAX VALUE to implement largest, first occuring rule
    // i.e., smallest kind value matched should be used.
    image = jjimage;
    // image->setLength(0);
    jjimageLen = 0;

    for (;;) {
      jjmatchedKind = 0x7fffffff;
      jjmatchedPos = 0;
      lastReadPosition = jjRunStringLiteralMatch();
      if (jjmatchedPos == 0 && jjmatchedKind > canMatchAnyChar[curLexState]) {
        jjmatchedKind = canMatchAnyChar[curLexState];
        std::cerr << "Matched current char: '" << (char)curChar
                  <<  "' as a wildcard kind: " << jjmatchedKind
                  << std::endl;
      }

      if (jjmatchedKind != 0x7fffffff) {
        // We have a match!
  
        // Put back any characters looked ahead.
        input_stream->backup(lastReadPosition - jjmatchedPos);
        if (isToken(jjmatchedKind)) {
          // Matched kind is a real TOKEN.
          matchedToken = jjFillToken();
          matchedToken->specialToken = specialToken;
          TokenLexicalActions(matchedToken);
          if (jjnewLexState[jjmatchedKind] != -1) {
            curLexState = jjnewLexState[jjmatchedKind];
          }
          std::cerr << "Returning token: '"  << addUnicodeEscapes(matchedToken->image).c_str() << "'" << std::endl;
          return matchedToken;
        } else if (isSkip(jjmatchedKind) || isSpecial(jjmatchedKind)) {
          std::cerr << "Found a SKIP match." << std::endl;
          // Matched kind is a SKIP or SPECIAL_TOKEN.
          if (isSpecial(jjmatchedKind)) {
            matchedToken = jjFillToken();
            if (specialToken == nullptr) {
              specialToken = matchedToken;
            } else {
              matchedToken->specialToken = specialToken;
              specialToken = (specialToken->next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
          } else {
            SkipLexicalActions(nullptr);
          }
          if (jjnewLexState[jjmatchedKind] != -1) {
            curLexState = jjnewLexState[jjmatchedKind];
          }
          goto EOFLoop;
        }
        std::cerr << "Found a MORE match." << std::endl;
        // Here it's a MORE.
        MoreLexicalActions();
        if (jjnewLexState[jjmatchedKind] != -1) {
          curLexState = jjnewLexState[jjmatchedKind];
        }
        lastReadPosition = 0;
        jjmatchedKind = 0x7fffffff;
        do {
          curChar = input_stream->readChar();
        } while(curChar >= 0);
      }
      int error_line = input_stream->getEndLine();
      int error_column = input_stream->getEndColumn();
      JJString error_after = "";
      bool EOFSeen = false;

      if(input_stream->endOfInput()) {
        EOFSeen = true;
        error_after = lastReadPosition <= 1 ? "" : input_stream->GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
      }
      if (!EOFSeen) {
        error_after = lastReadPosition <= 1 ? "" : input_stream->GetImage();
      }
      errorHandler->lexicalError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, this);
      goto EOFLoop;
    }
  }
}
int SPLParserTokenManager::getStartAndSize(int index, int isCount)
{
  switch(index) {
    case 9: { return (isCount == 0) ? 0 : 1;}
    case 10: { return (isCount == 0) ? 5 : 1;}
    case 12: { return (isCount == 0) ? 10 : 1;}
    case 13: { return (isCount == 0) ? 15 : 1;}
    case 94: { return (isCount == 0) ? 20 : 1;}
    case 32: { return (isCount == 0) ? 25 : 1;}
    case 33: { return (isCount == 0) ? 30 : 2;}
    case 98: { return (isCount == 0) ? 41 : 1;}
    case 37: { return (isCount == 0) ? 52 : 1;}
    case 101: { return (isCount == 0) ? 57 : 1;}
    case 38: { return (isCount == 0) ? 65 : 2;}
    case 102: { return (isCount == 0) ? 76 : 1;}
    case 40: { return (isCount == 0) ? 85 : 1;}
    case 105: { return (isCount == 0) ? 90 : 2;}
    case 41: { return (isCount == 0) ? 103 : 1;}
    case 42: { return (isCount == 0) ? 108 : 1;}
    case 43: { return (isCount == 0) ? 113 : 1;}
    case 45: { return (isCount == 0) ? 118 : 1;}
    case 47: { return (isCount == 0) ? 123 : 1;}
    case 114: { return (isCount == 0) ? 128 : 1;}
    case 116: { return (isCount == 0) ? 136 : 1;}
    case 119: { return (isCount == 0) ? 144 : 2;}
    case 58: { return (isCount == 0) ? 162 : 1;}
    case 59: { return (isCount == 0) ? 167 : 1;}
    case 123: { return (isCount == 0) ? 172 : 1;}
    case 124: { return (isCount == 0) ? 177 : 2;}
    case 60: { return (isCount == 0) ? 188 : 2;}
    case 61: { return (isCount == 0) ? 199 : 2;}
    case 125: { return (isCount == 0) ? 210 : 1;}
    case 62: { return (isCount == 0) ? 215 : 2;}
    case 126: { return (isCount == 0) ? 226 : 1;}
  }
  return -1;
}

void SPLParserTokenManager::TokenLexicalActions(Token * matchedToken) {
  switch(matchedToken->kind) {
    default: break;
  }
}
void SPLParserTokenManager::SkipLexicalActions(Token * /*matchedToken*/) {
  switch(jjmatchedKind) {
    default: break;
  }
  switch(jjmatchedKind) {
    default: break;
  }
}
void SPLParserTokenManager::MoreLexicalActions() {
jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
  switch(jjmatchedKind) {
    default: break;
  }
}
/* JavaCC - OriginalChecksum=13fea80205189e09d84ae59219122496 (do not edit this line) */
