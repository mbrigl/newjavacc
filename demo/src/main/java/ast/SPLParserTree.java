/* Generated By:JJTree: Do not edit this line. SPLParserTree.java Version 8.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package ast;

class ASTWhileStatement extends SimpleNode {
  public ASTWhileStatement(int id) {
    super(id);
  }

  public ASTWhileStatement(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTDivNode extends SimpleNode {
  public ASTDivNode(int id) {
    super(id);
  }

  public ASTDivNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTNENode extends SimpleNode {
  public ASTNENode(int id) {
    super(id);
  }

  public ASTNENode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTCompilationUnit extends SimpleNode {
  public ASTCompilationUnit(int id) {
    super(id);
  }

  public ASTCompilationUnit(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTStatementExpression extends SimpleNode {
  public ASTStatementExpression(int id) {
    super(id);
  }

  public ASTStatementExpression(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTMulNode extends SimpleNode {
  public ASTMulNode(int id) {
    super(id);
  }

  public ASTMulNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTIntConstNode extends SimpleNode {
  public ASTIntConstNode(int id) {
    super(id);
  }

  public ASTIntConstNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTWriteStatement extends SimpleNode {
  public ASTWriteStatement(int id) {
    super(id);
  }

  public ASTWriteStatement(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTBitwiseComplNode extends SimpleNode {
  public ASTBitwiseComplNode(int id) {
    super(id);
  }

  public ASTBitwiseComplNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTBitwiseXorNode extends SimpleNode {
  public ASTBitwiseXorNode(int id) {
    super(id);
  }

  public ASTBitwiseXorNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTOrNode extends SimpleNode {
  public ASTOrNode(int id) {
    super(id);
  }

  public ASTOrNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTBitwiseAndNode extends SimpleNode {
  public ASTBitwiseAndNode(int id) {
    super(id);
  }

  public ASTBitwiseAndNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTNotNode extends SimpleNode {
  public ASTNotNode(int id) {
    super(id);
  }

  public ASTNotNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTGENode extends SimpleNode {
  public ASTGENode(int id) {
    super(id);
  }

  public ASTGENode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTId extends SimpleNode {
  public ASTId(int id) {
    super(id);
  }

  public ASTId(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTTrueNode extends SimpleNode {
  public ASTTrueNode(int id) {
    super(id);
  }

  public ASTTrueNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTIfStatement extends SimpleNode {
  public ASTIfStatement(int id) {
    super(id);
  }

  public ASTIfStatement(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTAssignment extends SimpleNode {
  public ASTAssignment(int id) {
    super(id);
  }

  public ASTAssignment(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTModNode extends SimpleNode {
  public ASTModNode(int id) {
    super(id);
  }

  public ASTModNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTGTNode extends SimpleNode {
  public ASTGTNode(int id) {
    super(id);
  }

  public ASTGTNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTSubtractNode extends SimpleNode {
  public ASTSubtractNode(int id) {
    super(id);
  }

  public ASTSubtractNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTLTNode extends SimpleNode {
  public ASTLTNode(int id) {
    super(id);
  }

  public ASTLTNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTBitwiseOrNode extends SimpleNode {
  public ASTBitwiseOrNode(int id) {
    super(id);
  }

  public ASTBitwiseOrNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTLENode extends SimpleNode {
  public ASTLENode(int id) {
    super(id);
  }

  public ASTLENode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTReadStatement extends SimpleNode {
  public ASTReadStatement(int id) {
    super(id);
  }

  public ASTReadStatement(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTEQNode extends SimpleNode {
  public ASTEQNode(int id) {
    super(id);
  }

  public ASTEQNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTFalseNode extends SimpleNode {
  public ASTFalseNode(int id) {
    super(id);
  }

  public ASTFalseNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTBlock extends SimpleNode {
  public ASTBlock(int id) {
    super(id);
  }

  public ASTBlock(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTAddNode extends SimpleNode {
  public ASTAddNode(int id) {
    super(id);
  }

  public ASTAddNode(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTVarDeclaration extends SimpleNode {
  public ASTVarDeclaration(int id) {
    super(id);
  }

  public ASTVarDeclaration(SPLParser p, int id) {
    super(p, id);
  }

}
class ASTAndNode extends SimpleNode {
  public ASTAndNode(int id) {
    super(id);
  }

  public ASTAndNode(SPLParser p, int id) {
    super(p, id);
  }

}
/* JavaCC - OriginalChecksum=734ed47e5bc0d76a5ec2b0238830257e (do not edit this line) */
