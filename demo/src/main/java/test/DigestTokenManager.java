/* Generated By:JavaCC: Do not edit this line. DigestTokenManager.java Version 8.0.0 */
import java.io.*;

public class DigestTokenManager  implements DigestConstants {

protected static boolean moveToNextChar() {
  try {
    curChar = input_stream.readChar();
  } catch(java.io.IOException e) {
    return false;
  }
  return true;
}



    /** Constructor. */
    public DigestTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public DigestTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {

    jjmatchedPos = 0;
    curLexState = defaultLexState;
    input_stream = stream;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState) {
    curLexState = lexState;
  }

private static  int jjRunStringLiteralMatch() {
  int curPos = 0;
  int key = (int)curLexState << 16 | curChar;
  int startState = jjInitStates[curLexState];
  if (startAndSize.containsKey(key)) {
    int[] arr = startAndSize.get(key);
    int index = arr[0];
    for (int i = 0; i < arr[1]; i++) {
      int len = stringLiterals[index++];
      int ignoreCase = stringLiterals[index++];
      do {
        if (curChar != stringLiterals[index + curPos] &&
            (ignoreCase == 0 || curChar != stringLiterals[index + len + curPos])) break;
        if (++curPos == len) break;
        if (!moveToNextChar()) {
          --curPos;
          break;
        }
      } while(curPos < len);
      if (curPos == len) {
        jjmatchedKind = stringLiterals[index + len + (ignoreCase * len)];
        jjmatchedPos = curPos;
        startState = stringLiterals[index + len + (ignoreCase * len) + 1];
        if (!moveToNextChar()) {
          return curPos;
        }
        curPos++;
        break;
      } else {
        index += len + (ignoreCase * len) + 2;
        input_stream.backup(curPos + 1);
        curPos = 0;
        if (!moveToNextChar()) {
          assert(false);
        }
      }
    }
  } else {
  }
  return jjMoveNfa(startState, curPos);
}

private static   int[] stateSet = new int[43];
private static   int[] newStateSet = new int[43];
private static   long[] moved = new long[43];
private static  long moveIndex = 1L;

private static final int jjMoveNfa(int startState, int curPos) {

  if (startState < 0) {
    return curPos;
  }

  // We have a long array indexed by the NFA state number to roughly indicate
  // the input position so when the input reaches part Long.MAX_VALUE (which
  // should be extremely rare), we need to reset them all back to zero.
  if (++moveIndex == Long.MAX_VALUE) {
    for (int i = 0; i < 43; i++) moved[i] = 0L;
    moveIndex = 1L;
  }

  // We initialize the kind to MAX value so that when a match is found, we can
  // simply check if it's less than the current match and store it in that
  // case. This helps implement the 'first occurring' rule properly.
  int cnt = 0;
  stateSet[cnt++] = startState;
  moved[startState] = moveIndex;
 
  // Some NFA states have epsilon transitions (move on empty string). So we
  // just start with all of them. Note that the nextStates array already adds
  // the epsilon closure. Only the initial state needs to do this explicitly.
  for (int s : jjcompositeState[startState]) { 
    if (moved[s] != moveIndex) {
      stateSet[cnt++] = s;
      moved[s] = moveIndex;
    }
  }

  do {
    int newCnt = 0;
    int kind = Integer.MAX_VALUE;
    if (++moveIndex == Long.MAX_VALUE) {
      for (int i = 0; i < 43; i++) moved[i] = 0L;
      moveIndex = 1L;
    }

    int vectorIndex = curChar >> 6;
    long bitpattern = (1L << (curChar & 0x3f));
    do {
      int state = stateSet[--cnt];
      if ((jjChars[state][vectorIndex] & bitpattern) != 0L) {
        // Current input character can move this NFA state. So add all the
        // next states of the current states for use with the next input char.
        for (int newState : jjnextStateSet[state]) {
          if (moved[newState] != moveIndex) {
            // We add each state only once.
            newStateSet[newCnt++] = newState;
            moved[newState] = moveIndex;
          }
        }
        int newKind = jjmatchKinds[state];
        if (kind > newKind) {
          // It's a state so store the matched kind if it's smaller than
          // what's already matched.
          kind = newKind;
        }
      }
    } while (cnt > 0);

    if (kind != Integer.MAX_VALUE) {
      // We found a match. So remember the kind and position of the match.
      jjmatchedKind = kind;
      jjmatchedPos = curPos;
      // Reset the kind to max value so we can contine looking for a longer
      // match.
      kind = Integer.MAX_VALUE;
    }

    // Swap the current and next state sets.
    int[] tmp = stateSet;
    stateSet = newStateSet;
    newStateSet = tmp;
    // Reset the number of states.
    cnt = newCnt;
    if (newCnt == 0) {
      // There were no transitions from any of the current states on the
      // current input. So we are done.
      return curPos;
    }
    // Read the next character and try to continue running the NFA.
    if (!moveToNextChar()) {
      // EOF reached!
      return curPos;
    }
    ++curPos;
  } while (cnt > 0);

  assert(false) :
      "Interal error. Please submit a bug at: http://javacc.java.net.";
  return curPos;
}

private static  int defaultLexState = 0;
protected static  int curLexState = 0;
private static  int jjmatchedPos;
private static  int jjmatchedKind;
private static  StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
protected static int curChar;
protected static  SimpleCharStream input_stream;

public static boolean isToken(int kind) {
  return (jjtoToken[kind >> 6] & (1L << (kind & 0x3f))) != 0L;
}

public static final boolean isSkip(int kind) {
  return (jjtoSkip[kind >> 6] & (1L << (kind & 0x3f))) != 0L;
}

public static boolean isSpecial(int kind) {
  return (jjtoSpecial[kind >> 6] & (1L << (kind & 0x3f))) != 0L;
}

public static boolean isMore(int kind) {
  return (jjtoMore[kind >> 6] & (1L << (kind & 0x3f))) != 0L;
}

protected static  Token jjFillToken() {
  Token t;
  String curTokenImage;
  int beginLine;
  int endLine;
  int beginColumn;
  int endColumn;
  if (jjmatchedPos < 0) {
    if (image == null) {
      curTokenImage = "";
    } else {
      curTokenImage = image.toString();
    }
    beginLine = endLine = input_stream.getEndLine();
    beginColumn = endColumn = input_stream.getEndColumn();
  } else {
    String im = jjstrLiteralImages[jjmatchedKind];
    curTokenImage = (im == null) ? input_stream.GetImage() : im;
    beginLine = input_stream.getBeginLine();
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
  }

   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

/** Get the next Token. */
public static  Token getNextToken() {
  Token specialToken = null;
  Token matchedToken;
  int lastReadPosition = 0;

  EOFLoop:
  for (;;) {
    // First see if we have any input at all.
    try {
      curChar = input_stream.BeginToken();
    } catch(Exception e) {
      // No input. So return EOF token.
      jjmatchedKind = EOF;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
    }

    // Set matched kind to a MAX VALUE to implement largest, first occuring rule
    // i.e., smallest kind value matched should be used.
    image = jjimage;
    image.setLength(0);
    jjimageLen = 0;

    MoreLoop: for (;;) {
      jjmatchedKind = Integer.MAX_VALUE;
      jjmatchedPos = 0;
      lastReadPosition = jjRunStringLiteralMatch();
      if (jjmatchedPos == 0 && jjmatchedKind > canMatchAnyChar[curLexState]) {
        jjmatchedKind = canMatchAnyChar[curLexState];
      }

      if (jjmatchedKind != Integer.MAX_VALUE) {
        // We have a match!
  
        // Put back any characters looked ahead.
        input_stream.backup(lastReadPosition - jjmatchedPos);
        if (isToken(jjmatchedKind)) {
          // Matched kind is a real TOKEN.
          matchedToken = jjFillToken();
          matchedToken.specialToken = specialToken;
          TokenLexicalActions(matchedToken);
          if (jjnewLexState[jjmatchedKind] != -1) {
            curLexState = jjnewLexState[jjmatchedKind];
          }
          return matchedToken;
        } else if (isSkip(jjmatchedKind) || isSpecial(jjmatchedKind)) {
          // Matched kind is a SKIP or SPECIAL_TOKEN.
          if (isSpecial(jjmatchedKind)) {
            matchedToken = jjFillToken();
            if (specialToken == null) {
              specialToken = matchedToken;
            } else {
              matchedToken.specialToken = specialToken;
              specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
          } else {
            SkipLexicalActions(null);
          }
          if (jjnewLexState[jjmatchedKind] != -1) {
            curLexState = jjnewLexState[jjmatchedKind];
          }
          continue EOFLoop;
        }
        // Here it's a MORE.
        MoreLexicalActions();
        if (jjnewLexState[jjmatchedKind] != -1) {
          curLexState = jjnewLexState[jjmatchedKind];
        }
        lastReadPosition = 0;
        jjmatchedKind = Integer.MAX_VALUE;
        try {
          curChar = input_stream.readChar();
          continue;
        }
        catch (java.io.IOException e1) { }
      }
      reportError(lastReadPosition);
    }
  }
}

protected static  void reportError(int lastReadPosition) {
  int error_line = input_stream.getEndLine();
  int error_column = input_stream.getEndColumn();
  String error_after = null;
  boolean EOFSeen = false;
  try {
    input_stream.readChar();
    input_stream.backup(1);
  } catch (java.io.IOException e1) {
    EOFSeen = true;
    error_after = lastReadPosition <= 1 ? "" : input_stream.GetImage();
    if (curChar == '\n' || curChar == '\r') {
       error_line++;
       error_column = 0;
    }
    else
       error_column++;
  }
  if (!EOFSeen) {
    input_stream.backup(1);
    error_after = lastReadPosition <= 1 ? "" : input_stream.GetImage();
  }
  throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column,
                          error_after, curChar, TokenMgrError.LEXICAL_ERROR);
}

private static final java.util.Map<Integer, int[]> startAndSize =
    new java.util.HashMap<Integer, int[]>();


private static final long[][] jjChars = new long[43][];
private static void InitNfaData() {
  for (int i = 0; i < 43; i++) {
    jjChars[i] = new long[1024];
    int ind = 0;
    // We originally generate something like RLE for the static arrays and
    // we actually expannd them here.
    for (int j = 0; j < jjCharData[i].length; j += 2) {
      for (int k = 0; k < (int)jjCharData[i][j]; k++) {
        jjChars[i][ind++] = jjCharData[i][j + 1];
      }
    }
  }
}
public static String[] lexStateNames = {
"DEFAULT"
, 
"MAILHEADER"
, 
"MAILSUBJECT"
, 
"MAILFROM"
, 
"MAILDATE"
, 
"MAILBODY"
};
private static final int[] stringLiterals = {
9, 0, 83, 117, 98, 106, 101, 99, 116, 58, 32, 7, -1, 
6, 0, 68, 97, 116, 101, 58, 32, 9, -1, 
6, 0, 70, 114, 111, 109, 58, 32, 8, -1, 
1, 0, 31, 18, -1};
static void InitStringLiteralData() {
startAndSize.put(65619, new int[]{0, 1});
startAndSize.put(65604, new int[]{13, 1});
startAndSize.put(65606, new int[]{23, 1});
startAndSize.put(327711, new int[]{33, 1});
}
private static final long[][] jjCharData = {
new long[] {1, 9216L},
new long[] {1, 4398046511104L},
new long[] {1, 9216L},
new long[] {1, 1024L},
new long[] {1, 8192L},
new long[] {1, 4398046511104L},
new long[] {1, 4398046511104L},
new long[] {1, 4294967296L},
new long[] {1, 0L, 1, 256L},
new long[] {1, 0L, 1, 32768L},
new long[] {1, 0L, 1, 32768L},
new long[] {1, 0L, 1, 32L},
new long[] {1, 4294967296L},
new long[] {1, 4398046511104L},
new long[] {1, 4398046511104L},
new long[] {1, 4398046511104L},
new long[] {1, 1024L},
new long[] {1, 8192L},
new long[] {1, 1024L},
new long[] {1, 9216L},
new long[] {1, 1024L},
new long[] {1, 8192L},
new long[] {1, 8192L},
new long[] {1, 1024L},
new long[] {1, 8192L},
new long[] {1, 1024L},
new long[] {1, -9217L, 3, -1L},
new long[] {1, 9216L},
new long[] {1, 1024L},
new long[] {1, 8192L},
new long[] {1, -9217L, 3, -1L},
new long[] {1, 9216L},
new long[] {1, 1024L},
new long[] {1, 8192L},
new long[] {1, -9217L, 3, -1L},
new long[] {1, 9216L},
new long[] {1, 1024L},
new long[] {1, 8192L},
new long[] {1, -2147492865L, 3, -1L},
new long[] {1, 9216L},
new long[] {1, 1024L},
new long[] {1, 8192L},
new long[] {}};
private static final int[][] jjcompositeState = {
new int[]{0, 17}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{18, 22}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{26, 27, 29}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{30, 31, 33}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{34, 35, 37}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{}, 
new int[]{38, 39, 41}};
private static final int[] jjmatchKinds = {
2147483647, 
2147483647, 
4, 
4, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
6, 
6, 
2147483647, 
2147483647, 
2147483647, 
2147483647, 
6, 
11, 
12, 
12, 
2147483647, 
13, 
14, 
14, 
2147483647, 
15, 
16, 
16, 
2147483647, 
2147483647, 
17, 
17, 
2147483647, 
2147483647};
private static final int[][] jjnextStateSet = {
new int[]{15}, 
new int[]{2, 4}, 
new int[]{}, 
new int[]{}, 
new int[]{3}, 
new int[]{1}, 
new int[]{5}, 
new int[]{6}, 
new int[]{7}, 
new int[]{8}, 
new int[]{9}, 
new int[]{10}, 
new int[]{11}, 
new int[]{12}, 
new int[]{13}, 
new int[]{14}, 
new int[]{15}, 
new int[]{16}, 
new int[]{19, 21}, 
new int[]{}, 
new int[]{}, 
new int[]{20}, 
new int[]{23, 24}, 
new int[]{19, 21}, 
new int[]{25}, 
new int[]{}, 
new int[]{26}, 
new int[]{}, 
new int[]{}, 
new int[]{28}, 
new int[]{30}, 
new int[]{}, 
new int[]{}, 
new int[]{32}, 
new int[]{34}, 
new int[]{}, 
new int[]{}, 
new int[]{36}, 
new int[]{38, 39, 41}, 
new int[]{}, 
new int[]{}, 
new int[]{40}, 
new int[]{}};
private static final int[] jjInitStates  = {
0, 18, 27, 31, 35, 42};
private static final int[] canMatchAnyChar = {
5, 10, 2147483647, 2147483647, 2147483647, 2147483647};
public static final String[] jjstrLiteralImages = {
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
"\123\165\142\152\145\143\164\72\40", 
"\106\162\157\155\72\40", 
"\104\141\164\145\72\40", 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
null
, 
"\37"};
private static final long[] jjtoSkip = {
1136624L};
private static final long[] jjtoSpecial = {
1048576L};
private static final long[] jjtoMore = {
1048576L};
private static final long[] jjtoToken = {
1484815L};
private static final int[] jjnewLexState = {
-1, -1, -1, -1, 1, -1, 5, 2, 3, 4, -1, -1, 1, -1, 1, -1, 1, -1, 0};
static void TokenLexicalActions(Token matchedToken) {
  switch(matchedToken.kind) {
    default: break;
  }
}
static void SkipLexicalActions(Token matchedToken) {
  switch(jjmatchedKind) {
    default: break;
  }
  switch(jjmatchedKind) {
    default: break;
  }
}
static void MoreLexicalActions() {
jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
  switch(jjmatchedKind) {
    default: break;
  }
}
static {
  InitStringLiteralData();
  InitNfaData(); } 
}
/* JavaCC - OriginalChecksum=1a0b27b90ea02dd5d48374a288eaf093 (do not edit this line) */
